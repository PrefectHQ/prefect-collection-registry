{
  "prefect": {
    "block_types": {
      "azure": {
        "name": "Azure",
        "slug": "azure",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#azure",
        "description": "Store data as a file on Azure Datalake and Azure Blob Storage.",
        "code_example": "Load stored Azure config:\n```python\nfrom prefect.filesystems import Azure\n\naz_block = Azure.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f59d267379bb10d0428d077c899c9887982c120956602b6cb62fc6d1c312a92f",
          "fields": {
            "title": "Azure",
            "description": "Store data as a file on Azure Datalake and Azure Blob Storage.",
            "type": "object",
            "properties": {
              "bucket_path": {
                "title": "Bucket Path",
                "description": "An Azure storage bucket path.",
                "example": "my-bucket/a-directory-within",
                "type": "string"
              },
              "azure_storage_connection_string": {
                "title": "Azure storage connection string",
                "description": "Equivalent to the AZURE_STORAGE_CONNECTION_STRING environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_account_name": {
                "title": "Azure storage account name",
                "description": "Equivalent to the AZURE_STORAGE_ACCOUNT_NAME environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_account_key": {
                "title": "Azure storage account key",
                "description": "Equivalent to the AZURE_STORAGE_ACCOUNT_KEY environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_tenant_id": {
                "title": "Azure storage tenant ID",
                "description": "Equivalent to the AZURE_TENANT_ID environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_client_id": {
                "title": "Azure storage client ID",
                "description": "Equivalent to the AZURE_CLIENT_ID environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_client_secret": {
                "title": "Azure storage client secret",
                "description": "Equivalent to the AZURE_CLIENT_SECRET environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "bucket_path"
            ],
            "block_type_slug": "azure",
            "secret_fields": [
              "azure_storage_connection_string",
              "azure_storage_account_name",
              "azure_storage_account_key",
              "azure_storage_tenant_id",
              "azure_storage_client_id",
              "azure_storage_client_secret"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.8.3"
        }
      },
      "date-time": {
        "name": "Date Time",
        "slug": "date-time",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1gmljt5UBcAwEXHPnIofcE/0f3cf1da45b8b2df846e142ab52b1778/image21.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.DateTime",
        "description": "A block that represents a datetime",
        "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import DateTime\n\ndata_time_block = DateTime.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:7943c88ca6ab22804082b595b9847d035a1364bdb23474c927317bcab9cb5d9c",
          "fields": {
            "title": "DateTime",
            "description": "A block that represents a datetime",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "An ISO 8601-compatible datetime value.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "date-time",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.8.3"
        }
      },
      "docker-container": {
        "name": "Docker Container",
        "slug": "docker-container",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.DockerContainer",
        "description": "Runs a command in a container.\n\nRequires a Docker Engine to be connectable. Docker settings will be retrieved from\nthe environment.\n\nClick [here](https://docs.prefect.io/tutorials/docker/) to see a tutorial.",
        "code_example": "```python\nfrom prefect.infrastructure.docker import DockerContainer\n\ndocker_container_block = DockerContainer.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:78f682fc53eeb9a7c4917f621b9afccc039842c432701f07abaef3ba5f1ff752",
          "fields": {
            "title": "DockerContainer",
            "description": "Runs a command in a container.\n\nRequires a Docker Engine to be connectable. Docker settings will be retrieved from\nthe environment.\n\nClick [here](https://docs.prefect.io/tutorials/docker/) to see a tutorial.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The type of infrastructure.",
                "default": "docker-container",
                "enum": [
                  "docker-container"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment",
                "description": "Environment variables to set in the configured infrastructure.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "title": "Image",
                "description": "Tag of a Docker image to use. Defaults to the Prefect image.",
                "type": "string"
              },
              "image_pull_policy": {
                "description": "Specifies if the image should be pulled.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ImagePullPolicy"
                  }
                ]
              },
              "image_registry": {
                "$ref": "#/definitions/DockerRegistry"
              },
              "networks": {
                "title": "Networks",
                "description": "A list of strings specifying Docker networks to connect the container to.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "network_mode": {
                "title": "Network Mode",
                "description": "The network mode for the created container (e.g. host, bridge). If 'networks' is set, this cannot be set.",
                "type": "string"
              },
              "auto_remove": {
                "title": "Auto Remove",
                "description": "If set, the container will be removed on completion.",
                "default": false,
                "type": "boolean"
              },
              "volumes": {
                "title": "Volumes",
                "description": "A list of volume mount strings in the format of \"local_path:container_path\".",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If set, the output will be streamed from the container to local standard output.",
                "default": true,
                "type": "boolean"
              },
              "memswap_limit": {
                "title": "Memswap Limit",
                "description": "Total memory (memory + swap), -1 to disable swap. Should only be set if `mem_limit` is also set. If `mem_limit` is set, this defaults toallowing the container to use as much swap as memory. For example, if `mem_limit` is 300m and `memswap_limit` is not set, the container can use 600m in total of memory and swap.",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "mem_limit": {
                "title": "Mem Limit",
                "description": "Memory limit of the created container. Accepts float values to enforce a limit in bytes or a string with a unit e.g. 100000b, 1000k, 128m, 1g. If a string is given without a unit, bytes are assumed.",
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "privileged": {
                "title": "Privileged",
                "description": "Give extended privileges to this container.",
                "default": false,
                "type": "boolean"
              }
            },
            "block_type_slug": "docker-container",
            "secret_fields": [
              "image_registry.password"
            ],
            "block_schema_references": {
              "image_registry": {
                "block_type_slug": "docker-registry",
                "block_schema_checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9"
              }
            },
            "definitions": {
              "ImagePullPolicy": {
                "title": "ImagePullPolicy",
                "description": "An enumeration.",
                "enum": [
                  "IF_NOT_PRESENT",
                  "ALWAYS",
                  "NEVER"
                ],
                "type": "string"
              },
              "DockerRegistry": {
                "title": "DockerRegistry",
                "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
                "type": "object",
                "properties": {
                  "username": {
                    "title": "Username",
                    "description": "The username to log into the registry with.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password to log into the registry with.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "registry_url": {
                    "title": "Registry Url",
                    "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                    "type": "string"
                  },
                  "reauth": {
                    "title": "Reauth",
                    "description": "Whether or not to reauthenticate on each interaction.",
                    "default": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "registry_url"
                ],
                "block_type_slug": "docker-registry",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "2.8.3"
        }
      },
      "docker-registry": {
        "name": "Docker Registry",
        "slug": "docker-registry",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.docker.DockerRegistry",
        "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
        "code_example": "```python\nfrom prefect.infrastructure.docker import DockerRegistry\n\ndocker_registry_block = DockerRegistry.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9",
          "fields": {
            "title": "DockerRegistry",
            "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
            "type": "object",
            "properties": {
              "username": {
                "title": "Username",
                "description": "The username to log into the registry with.",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "The password to log into the registry with.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "registry_url": {
                "title": "Registry Url",
                "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                "type": "string"
              },
              "reauth": {
                "title": "Reauth",
                "description": "Whether or not to reauthenticate on each interaction.",
                "default": true,
                "type": "boolean"
              }
            },
            "required": [
              "username",
              "password",
              "registry_url"
            ],
            "block_type_slug": "docker-registry",
            "secret_fields": [
              "password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "docker-login"
          ],
          "version": "2.8.3"
        }
      },
      "gcs": {
        "name": "GCS",
        "slug": "gcs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#gcs",
        "description": "Store data as a file on Google Cloud Storage.",
        "code_example": "Load stored GCS config:\n```python\nfrom prefect.filesystems import GCS\n\ngcs_block = GCS.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:1daf535b60cf9304103bcb4015280a30fd6bdd9686aa0c059eb9715082b5b3ec",
          "fields": {
            "title": "GCS",
            "description": "Store data as a file on Google Cloud Storage.",
            "type": "object",
            "properties": {
              "bucket_path": {
                "title": "Bucket Path",
                "description": "A GCS bucket path.",
                "example": "my-bucket/a-directory-within",
                "type": "string"
              },
              "service_account_info": {
                "title": "Service Account Info",
                "description": "The contents of a service account keyfile as a JSON string.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "project": {
                "title": "Project",
                "description": "The project the GCS bucket resides in. If not provided, the project will be inferred from the credentials or environment.",
                "type": "string"
              }
            },
            "required": [
              "bucket_path"
            ],
            "block_type_slug": "gcs",
            "secret_fields": [
              "service_account_info"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.8.3"
        }
      },
      "github": {
        "name": "GitHub",
        "slug": "github",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#github",
        "description": "Interact with files stored on GitHub repositories.",
        "code_example": "```python\nfrom prefect.filesystems import GitHub\n\ngithub_block = GitHub.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:91675c8041736a4086eee462cad180ef2032b2edadcfda032f7a51e80dcbcca6",
          "fields": {
            "title": "GitHub",
            "description": "Interact with files stored on GitHub repositories.",
            "type": "object",
            "properties": {
              "repository": {
                "title": "Repository",
                "description": "The URL of a GitHub repository to read from, in either HTTPS or SSH format.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "An optional reference to pin to; can be a branch name or tag.",
                "type": "string"
              },
              "access_token": {
                "title": "Access Token",
                "description": "A GitHub Personal Access Token (PAT) with repo scope.",
                "name": "Personal Access Token",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "include_git_objects": {
                "title": "Include Git Objects",
                "description": "Whether to include git objects when copying the repo contents to a directory.",
                "default": true,
                "type": "boolean"
              }
            },
            "required": [
              "repository"
            ],
            "block_type_slug": "github",
            "secret_fields": [
              "access_token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "2.8.3"
        }
      },
      "json": {
        "name": "JSON",
        "slug": "json",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/19W3Di10hhb4oma2Qer0x6/764d1e7b4b9974cd268c775a488b9d26/image16.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.JSON",
        "description": "A block that represents JSON",
        "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import JSON\n\njson_block = JSON.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:ef9b76010e0545bd7f2212029460731f66ccfce289affe4b504cbeb702fc8ea3",
          "fields": {
            "title": "JSON",
            "description": "A block that represents JSON",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "A JSON-compatible value."
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "json",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.8.3"
        }
      },
      "kubernetes-cluster-config": {
        "name": "Kubernetes Cluster Config",
        "slug": "kubernetes-cluster-config",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1zrSeY8DZ1MJZs2BAyyyGk/20445025358491b8b72600b8f996125b/Kubernetes_logo_without_workmark.svg.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/kubernetes/#prefect.blocks.kubernetes.KubernetesClusterConfig",
        "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
        "code_example": "Load a saved Kubernetes cluster config:\n```python\nfrom prefect.blocks.kubernetes import KubernetesClusterConfig\n\ncluster_config_block = KubernetesClusterConfig.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b",
          "fields": {
            "title": "KubernetesClusterConfig",
            "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
            "type": "object",
            "properties": {
              "config": {
                "title": "Config",
                "description": "The entire contents of a kubectl config file.",
                "type": "object"
              },
              "context_name": {
                "title": "Context Name",
                "description": "The name of the kubectl context to use.",
                "type": "string"
              }
            },
            "required": [
              "config",
              "context_name"
            ],
            "block_type_slug": "kubernetes-cluster-config",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.8.3"
        }
      },
      "kubernetes-job": {
        "name": "Kubernetes Job",
        "slug": "kubernetes-job",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1zrSeY8DZ1MJZs2BAyyyGk/20445025358491b8b72600b8f996125b/Kubernetes_logo_without_workmark.svg.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.KubernetesJob",
        "description": "Runs a command as a Kubernetes Job.\n\nClick [here](https://medium.com/the-prefect-blog/how-to-use-kubernetes-with-prefect-419b2e8b8cb2/) to see a tutorial.",
        "code_example": "```python\nfrom prefect.infrastructure.kubernetes import KubernetesJob\n\nkubernetes_job_block = KubernetesJob.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:1a553852c1bcc9cd95645917bdbaaae9e28cbcc1270ff5b43b45bbd87564f5cc",
          "fields": {
            "title": "KubernetesJob",
            "description": "Runs a command as a Kubernetes Job.\n\nClick [here](https://medium.com/the-prefect-blog/how-to-use-kubernetes-with-prefect-419b2e8b8cb2/) to see a tutorial.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The type of infrastructure.",
                "default": "kubernetes-job",
                "enum": [
                  "kubernetes-job"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment",
                "description": "Environment variables to set in the configured infrastructure.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "title": "Image",
                "description": "The image reference of a container image to use for the job, for example, `docker.io/prefecthq/prefect:2-latest`.The behavior is as described in the Kubernetes documentation and uses the latest version of Prefect by default, unless an image is already present in a provided job manifest.",
                "type": "string"
              },
              "namespace": {
                "title": "Namespace",
                "description": "The Kubernetes namespace to use for this job. Defaults to 'default' unless a namespace is already present in a provided job manifest.",
                "type": "string"
              },
              "service_account_name": {
                "title": "Service Account Name",
                "description": "The Kubernetes service account to use for this job.",
                "type": "string"
              },
              "image_pull_policy": {
                "description": "The Kubernetes image pull policy to use for job containers.",
                "allOf": [
                  {
                    "$ref": "#/definitions/KubernetesImagePullPolicy"
                  }
                ]
              },
              "cluster_config": {
                "title": "Cluster Config",
                "description": "The Kubernetes cluster config to use for this job.",
                "allOf": [
                  {
                    "$ref": "#/definitions/KubernetesClusterConfig"
                  }
                ]
              },
              "job": {
                "title": "Base Job Manifest",
                "description": "The base manifest for the Kubernetes Job.",
                "type": "object"
              },
              "customizations": {
                "title": "Customizations",
                "description": "A list of JSON 6902 patches to apply to the base Job manifest.",
                "type": "array",
                "format": "rfc6902",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "job_watch_timeout_seconds": {
                "title": "Job Watch Timeout Seconds",
                "description": "Number of seconds to wait for each event emitted by the job before timing out. Defaults to `None`, which means no timeout will be enforced while waiting for each event in the job lifecycle.",
                "type": "integer"
              },
              "pod_watch_timeout_seconds": {
                "title": "Pod Watch Timeout Seconds",
                "description": "Number of seconds to watch for pod creation before timing out.",
                "default": 60,
                "type": "integer"
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If set, output will be streamed from the job to local standard output.",
                "default": true,
                "type": "boolean"
              },
              "finished_job_ttl": {
                "title": "Finished Job Ttl",
                "description": "The number of seconds to retain jobs after completion. If set, finished jobs will be cleaned up by Kubernetes after the given delay. If None (default), jobs will need to be manually removed.",
                "type": "integer"
              }
            },
            "block_type_slug": "kubernetes-job",
            "secret_fields": [],
            "block_schema_references": {
              "cluster_config": {
                "block_type_slug": "kubernetes-cluster-config",
                "block_schema_checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b"
              }
            },
            "definitions": {
              "KubernetesImagePullPolicy": {
                "title": "KubernetesImagePullPolicy",
                "description": "An enumeration.",
                "enum": [
                  "IfNotPresent",
                  "Always",
                  "Never"
                ]
              },
              "KubernetesClusterConfig": {
                "title": "KubernetesClusterConfig",
                "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                "type": "object",
                "properties": {
                  "config": {
                    "title": "Config",
                    "description": "The entire contents of a kubectl config file.",
                    "type": "object"
                  },
                  "context_name": {
                    "title": "Context Name",
                    "description": "The name of the kubectl context to use.",
                    "type": "string"
                  }
                },
                "required": [
                  "config",
                  "context_name"
                ],
                "block_type_slug": "kubernetes-cluster-config",
                "secret_fields": [],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "2.8.3"
        }
      },
      "local-file-system": {
        "name": "Local File System",
        "slug": "local-file-system",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/EVKjxM7fNyi4NGUSkeTEE/95c958c5dd5a56c59ea5033e919c1a63/image1.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#local-filesystem",
        "description": "Store data as a file on a local file system.",
        "code_example": "Load stored local file system config:\n```python\nfrom prefect.filesystems import LocalFileSystem\n\nlocal_file_system_block = LocalFileSystem.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6db1ab242e7b2b88a52dc137a7da3a373af63e0a103b9a91e060ed54a26f395a",
          "fields": {
            "title": "LocalFileSystem",
            "description": "Store data as a file on a local file system.",
            "type": "object",
            "properties": {
              "basepath": {
                "title": "Basepath",
                "description": "Default local path for this block to write to.",
                "type": "string"
              }
            },
            "block_type_slug": "local-file-system",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.8.3"
        }
      },
      "mattermost-webhook": {
        "name": "Mattermost Webhook",
        "slug": "mattermost-webhook",
        "logo_url": "https://images.ctfassets.net/zscdif0zqppk/3mlbsJDAmK402ER1sf0zUF/a48ac43fa38f395dd5f56c6ed29f22bb/mattermost-logo-png-transparent.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.MattermostWebhook",
        "description": "Enables sending notifications via a provided Mattermost webhook.",
        "code_example": "Load a saved Mattermost webhook and send a message:\n```python\nfrom prefect.blocks.notifications import MattermostWebhook\n\nmattermost_webhook_block = MattermostWebhook.load(\"BLOCK_NAME\")\n\nmattermost_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:26d8cbaab33eb653eca72e8c403405d738ed3f1095aba4b64d06c6426253d6cb",
          "fields": {
            "title": "MattermostWebhook",
            "description": "Enables sending notifications via a provided Mattermost webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "hostname": {
                "title": "Hostname",
                "description": "The hostname of your Mattermost server.",
                "example": "Mattermost.example.com",
                "type": "string"
              },
              "token": {
                "title": "Token",
                "description": "The token associated with your Mattermost webhook.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "botname": {
                "title": "Bot name",
                "description": "The name of the bot that will send the message.",
                "type": "string"
              },
              "channels": {
                "title": "Channels",
                "description": "The channel(s) you wish to notify.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "include_image": {
                "title": "Include Image",
                "description": "Whether to include the Apprise status image in the message.",
                "default": false,
                "type": "boolean"
              },
              "path": {
                "title": "Path",
                "description": "An optional sub-path specification to append to the hostname.",
                "type": "string"
              },
              "port": {
                "title": "Port",
                "description": "The port of your Mattermost server.",
                "default": 8065,
                "type": "integer"
              }
            },
            "required": [
              "hostname",
              "token"
            ],
            "block_type_slug": "mattermost-webhook",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.8.3"
        }
      },
      "ms-teams-webhook": {
        "name": "Microsoft Teams Webhook",
        "slug": "ms-teams-webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6n0dSTBzwoVPhX8Vgg37i7/9040e07a62def4f48242be3eae6d3719/teams_logo.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.MicrosoftTeamsWebhook",
        "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
        "code_example": "Load a saved Teams webhook and send a message:\n```python\nfrom prefect.blocks.notifications import MicrosoftTeamsWebhook\nteams_webhook_block = MicrosoftTeamsWebhook.load(\"BLOCK_NAME\")\nteams_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:0a5c2b435930bf8553391878475c5b976592526d2f801e8e559c0119aa393032",
          "fields": {
            "title": "MicrosoftTeamsWebhook",
            "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "url": {
                "title": "Webhook URL",
                "description": "The Teams incoming webhook URL used to send notifications.",
                "example": "https://your-org.webhook.office.com/webhookb2/XXX/IncomingWebhook/YYY/ZZZ",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "url"
            ],
            "block_type_slug": "ms-teams-webhook",
            "secret_fields": [
              "url"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.8.3"
        }
      },
      "opsgenie-webhook": {
        "name": "Opsgenie Webhook",
        "slug": "opsgenie-webhook",
        "logo_url": "https://images.ctfassets.net/sahxz1jinscj/3habq8fTzmplh7Ctkppk4/590cecb73f766361fcea9223cd47bad8/opsgenie.png",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.OpsgenieWebhook",
        "description": "Enables sending notifications via a provided Opsgenie webhook.",
        "code_example": "Load a saved Opsgenie webhook and send a message:\n```python\nfrom prefect.blocks.notifications import OpsgenieWebhook\nopsgenie_webhook_block = OpsgenieWebhook.load(\"BLOCK_NAME\")\nopsgenie_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:df4b3a253e6c2d2a0e6ef4831e7bd77ee920a75201f9c132a5516b42fcd80112",
          "fields": {
            "title": "OpsgenieWebhook",
            "description": "Enables sending notifications via a provided Opsgenie webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "apikey": {
                "title": "API Key",
                "description": "The API Key associated with your Opsgenie account.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "target_user": {
                "title": "Target User",
                "description": "The user(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "target_team": {
                "title": "Target Team",
                "description": "The team(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "target_schedule": {
                "title": "Target Schedule",
                "description": "The schedule(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "target_escalation": {
                "title": "Target Escalation",
                "description": "The escalation(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "region_name": {
                "title": "Region Name",
                "description": "The 2-character region code.",
                "default": "us",
                "enum": [
                  "us",
                  "eu"
                ],
                "type": "string"
              },
              "batch": {
                "title": "Batch",
                "description": "Notify all targets in batches (instead of individually).",
                "default": false,
                "type": "boolean"
              },
              "tags": {
                "title": "Tags",
                "description": "A comma-separated list of tags you can associate with your Opsgenie message.",
                "example": "[\"tag1\", \"tag2\"]",
                "type": "array",
                "items": {}
              },
              "priority": {
                "title": "Priority",
                "description": "The priority to associate with the message. It is on a scale between 1 (LOW) and 5 (EMERGENCY).",
                "default": 3,
                "type": "string"
              },
              "alias": {
                "title": "Alias",
                "description": "The alias to associate with the message.",
                "type": "string"
              },
              "entity": {
                "title": "Entity",
                "description": "The entity to associate with the message.",
                "type": "string"
              },
              "details": {
                "title": "Details",
                "description": "Additional details composed of key/values pairs.",
                "example": "{\"key1\": \"value1\", \"key2\": \"value2\"}",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "apikey"
            ],
            "block_type_slug": "opsgenie-webhook",
            "secret_fields": [
              "apikey"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.8.3"
        }
      },
      "pager-duty-webhook": {
        "name": "Pager Duty Webhook",
        "slug": "pager-duty-webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6FHJ4Lcozjfl1yDPxCvQDT/c2f6bdf47327271c068284897527f3da/PagerDuty-Logo.wine.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.PagerDutyWebHook",
        "description": "Enables sending notifications via a provided PagerDuty webhook.",
        "code_example": "Load a saved PagerDuty webhook and send a message:\n```python\nfrom prefect.blocks.notifications import PagerDutyWebHook\npagerduty_webhook_block = PagerDutyWebHook.load(\"BLOCK_NAME\")\npagerduty_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:4dd2ac9d4e446f3d2717414cf34bd6a62a40f5da4437f99dd61473ac117b1438",
          "fields": {
            "title": "PagerDutyWebHook",
            "description": "Enables sending notifications via a provided PagerDuty webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The severity of the notification.",
                "default": "info",
                "enum": [
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "integration_key": {
                "title": "Integration Key",
                "description": "This can be found on the Events API V2 integration's detail page, and is also referred to as a Routing Key. This must be provided alongside `api_key`, but will error if provided alongside `url`.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "api_key": {
                "title": "API Key",
                "description": "This can be found under Integrations. This must be provided alongside `integration_key`, but will error if provided alongside `url`.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "source": {
                "title": "Source",
                "description": "The source string as part of the payload.",
                "default": "Prefect",
                "type": "string"
              },
              "component": {
                "title": "Component",
                "description": "The component string as part of the payload.",
                "default": "Notification",
                "type": "string"
              },
              "group": {
                "title": "Group",
                "description": "The group string as part of the payload.",
                "type": "string"
              },
              "class_id": {
                "title": "Class ID",
                "description": "The class string as part of the payload.",
                "type": "string"
              },
              "region_name": {
                "title": "Region Name",
                "description": "The region name.",
                "default": "us",
                "enum": [
                  "us",
                  "eu"
                ],
                "type": "string"
              },
              "clickable_url": {
                "title": "Clickable URL",
                "description": "A clickable URL to associate with the notice.",
                "minLength": 1,
                "maxLength": 65536,
                "format": "uri",
                "type": "string"
              },
              "include_image": {
                "title": "Include Image",
                "description": "Associate the notification status via a represented icon.",
                "default": true,
                "type": "boolean"
              },
              "custom_details": {
                "title": "Custom Details",
                "description": "Additional details to include as part of the payload.",
                "example": "{\"disk_space_left\": \"145GB\"}",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "integration_key",
              "api_key"
            ],
            "block_type_slug": "pager-duty-webhook",
            "secret_fields": [
              "integration_key",
              "api_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.8.3"
        }
      },
      "process": {
        "name": "Process",
        "slug": "process",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/39WQhVu4JK40rZWltGqhuC/d15be6189a0cb95949a6b43df00dcb9b/image5.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/infrastructure/#process",
        "description": "Run a command in a new process.\n\nCurrent environment variables and Prefect settings will be included in the created\nprocess. Configured environment variables will override any current environment\nvariables.",
        "code_example": "```python\nfrom prefect.infrastructure.process import Process\n\nprocess_block = Process.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:47c4ac364708f4a6f27fb10b18086ad92c0a53fbbdd9ba07c030467067979f84",
          "fields": {
            "title": "Process",
            "description": "Run a command in a new process.\n\nCurrent environment variables and Prefect settings will be included in the created\nprocess. Configured environment variables will override any current environment\nvariables.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The type of infrastructure.",
                "default": "process",
                "enum": [
                  "process"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment",
                "description": "Environment variables to set in the configured infrastructure.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If set, output will be streamed from the process to local standard output.",
                "default": true,
                "type": "boolean"
              },
              "working_dir": {
                "title": "Working Dir",
                "description": "If set, the process will open within the specified path as the working directory. Otherwise, a temporary directory will be created.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "format": "path"
                  }
                ]
              }
            },
            "block_type_slug": "process",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "2.8.3"
        }
      },
      "remote-file-system": {
        "name": "Remote File System",
        "slug": "remote-file-system",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CxjycqILlT9S9YchI7o1q/ee62e2089dfceb19072245c62f0c69d2/image12.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#remote-file-system",
        "description": "Store data as a file on a remote file system.\n\nSupports any remote file system supported by `fsspec`. The file system is specified\nusing a protocol. For example, \"s3://my-bucket/my-folder/\" will use S3.",
        "code_example": "Load stored remote file system config:\n```python\nfrom prefect.filesystems import RemoteFileSystem\n\nremote_file_system_block = RemoteFileSystem.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f6998c8723a78207471938f5f74d6d4815ff14c2900caf8e9c3b3ece47bfeb40",
          "fields": {
            "title": "RemoteFileSystem",
            "description": "Store data as a file on a remote file system.\n\nSupports any remote file system supported by `fsspec`. The file system is specified\nusing a protocol. For example, \"s3://my-bucket/my-folder/\" will use S3.",
            "type": "object",
            "properties": {
              "basepath": {
                "title": "Basepath",
                "description": "Default path for this block to write to.",
                "example": "s3://my-bucket/my-folder/",
                "type": "string"
              },
              "settings": {
                "title": "Settings",
                "description": "Additional settings to pass through to fsspec.",
                "type": "object"
              }
            },
            "required": [
              "basepath"
            ],
            "block_type_slug": "remote-file-system",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.8.3"
        }
      },
      "s3": {
        "name": "S3",
        "slug": "s3",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#s3",
        "description": "Store data as a file on AWS S3.",
        "code_example": "Load stored S3 config:\n```python\nfrom prefect.filesystems import S3\n\ns3_block = S3.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:77690b4ef54ef3edc93fca6ac54bc540a32ca07169e91aecd36e49b2e1eeebc5",
          "fields": {
            "title": "S3",
            "description": "Store data as a file on AWS S3.",
            "type": "object",
            "properties": {
              "bucket_path": {
                "title": "Bucket Path",
                "description": "An S3 bucket path.",
                "example": "my-bucket/a-directory-within",
                "type": "string"
              },
              "aws_access_key_id": {
                "title": "AWS Access Key ID",
                "description": "Equivalent to the AWS_ACCESS_KEY_ID environment variable.",
                "example": "AKIAIOSFODNN7EXAMPLE",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "aws_secret_access_key": {
                "title": "AWS Secret Access Key",
                "description": "Equivalent to the AWS_SECRET_ACCESS_KEY environment variable.",
                "example": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "bucket_path"
            ],
            "block_type_slug": "s3",
            "secret_fields": [
              "aws_access_key_id",
              "aws_secret_access_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.8.3"
        }
      },
      "secret": {
        "name": "Secret",
        "slug": "secret",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5uUmyGBjRejYuGTWbTxz6E/3003e1829293718b3a5d2e909643a331/image8.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.Secret",
        "description": "A block that represents a secret value. The value stored in this block will be obfuscated when\nthis block is logged or shown in the UI.",
        "code_example": "```python\nfrom prefect.blocks.system import Secret\n\nsecret_block = Secret.load(\"BLOCK_NAME\")\n\n# Access the stored secret\nsecret_block.get()\n```",
        "block_schema": {
          "checksum": "sha256:e6b26e0a0240eb112e604608338f863e5ca2f137936e310014bfa2139d0a9b6c",
          "fields": {
            "title": "Secret",
            "description": "A block that represents a secret value. The value stored in this block will be obfuscated when\nthis block is logged or shown in the UI.",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "A string value that should be kept secret.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "secret",
            "secret_fields": [
              "value"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.8.3"
        }
      },
      "slack-webhook": {
        "name": "Slack Webhook",
        "slug": "slack-webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.SlackWebhook",
        "description": "Enables sending notifications via a provided Slack webhook.",
        "code_example": "Load a saved Slack webhook and send a message:\n```python\nfrom prefect.blocks.notifications import SlackWebhook\n\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nslack_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:273dfe712133cba3cdb092d88741da37e33cee892bfcf4fcf2895bdcee49a965",
          "fields": {
            "title": "SlackWebhook",
            "description": "Enables sending notifications via a provided Slack webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "url": {
                "title": "Webhook URL",
                "description": "Slack incoming webhook URL used to send notifications.",
                "example": "https://hooks.slack.com/XXX",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "url"
            ],
            "block_type_slug": "slack-webhook",
            "secret_fields": [
              "url"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.8.3"
        }
      },
      "smb": {
        "name": "SMB",
        "slug": "smb",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6J444m3vW6ukgBOCinSxLk/025f5562d3c165feb7a5df599578a6a8/samba_2010_logo_transparent_151x27.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#smb",
        "description": "Store data as a file on a SMB share.",
        "code_example": "Load stored SMB config:\n\n```python\nfrom prefect.filesystems import SMB\nsmb_block = SMB.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:d5746a564cf05bec13770a882f76ca8e8f562c8bdc7a6d2d45732b079bf72045",
          "fields": {
            "title": "SMB",
            "description": "Store data as a file on a SMB share.",
            "type": "object",
            "properties": {
              "share_path": {
                "title": "Share Path",
                "description": "SMB target (requires <SHARE>, followed by <PATH>).",
                "example": "/SHARE/dir/subdir",
                "type": "string"
              },
              "smb_username": {
                "title": "SMB Username",
                "description": "Username with access to the target SMB SHARE.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "smb_password": {
                "title": "SMB Password",
                "description": "Password for SMB access.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "smb_host": {
                "title": "Smb Host",
                "description": "SMB server/hostname.",
                "tile": "SMB server/hostname",
                "type": "string"
              },
              "smb_port": {
                "title": "SMB port",
                "description": "SMB port (default: 445).",
                "type": "integer"
              }
            },
            "required": [
              "share_path",
              "smb_host"
            ],
            "block_type_slug": "smb",
            "secret_fields": [
              "smb_username",
              "smb_password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.8.3"
        }
      },
      "string": {
        "name": "String",
        "slug": "string",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4zjrZmh9tBrFiikeB44G4O/2ce1dbbac1c8e356f7c429e0f8bbb58d/image10.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.String",
        "description": "A block that represents a string",
        "code_example": "Load a stored string value:\n```python\nfrom prefect.blocks.system import String\n\nstring_block = String.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:e9f3f43e55b73bc94ee2a355f1e4ef7064645268cba22571c2a95d90a2af8dd0",
          "fields": {
            "title": "String",
            "description": "A block that represents a string",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "A string value.",
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "string",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.8.3"
        }
      },
      "twilio-sms": {
        "name": "Twilio SMS",
        "slug": "twilio-sms",
        "logo_url": "https://images.ctfassets.net/zscdif0zqppk/YTCgPL6bnK3BczP2gV9md/609283105a7006c57dbfe44ee1a8f313/58482bb9cef1014c0b5e4a31.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.TwilioSMS",
        "description": "Enables sending notifications via Twilio SMS.",
        "code_example": "Load a saved `TwilioSMS` block and send a message:\n```python\nfrom prefect.blocks.notifications import TwilioSMS\ntwilio_webhook_block = TwilioSMS.load(\"BLOCK_NAME\")\ntwilio_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:46c6934a4ea723f515caf9e7b0f8ce313c5deca4050d31d32adf5abdf1de05c2",
          "fields": {
            "title": "TwilioSMS",
            "description": "Enables sending notifications via Twilio SMS.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "account_sid": {
                "title": "Account Sid",
                "description": "The Twilio Account SID - it can be found on the homepage of the Twilio console.",
                "type": "string"
              },
              "auth_token": {
                "title": "Auth Token",
                "description": "The Twilio Authentication Token - it can be found on the homepage of the Twilio console.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "from_phone_number": {
                "title": "From Phone Number",
                "description": "The valid Twilio phone number to send the message from.",
                "example": "18001234567",
                "type": "string"
              },
              "to_phone_numbers": {
                "title": "To Phone Numbers",
                "description": "A list of valid Twilio phone number(s) to send the message to.",
                "example": "18004242424",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "account_sid",
              "auth_token",
              "from_phone_number",
              "to_phone_numbers"
            ],
            "block_type_slug": "twilio-sms",
            "secret_fields": [
              "auth_token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.8.3"
        }
      },
      "webhook": {
        "name": "Webhook",
        "slug": "webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6ciCsTFsvUAiiIvTllMfOU/627e9513376ca457785118fbba6a858d/webhook_icon_138018.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/webhook/#prefect.blocks.webhook.Webhook",
        "description": "Block that enables calling webhooks.",
        "code_example": "```python\nfrom prefect.blocks.webhook import Webhook\n\nwebhook_block = Webhook.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:0207cea0ff5b9d2b39e52007c3ba1d797f1aca7906fb3bf26dd409abae953a85",
          "fields": {
            "title": "Webhook",
            "description": "Block that enables calling webhooks.",
            "type": "object",
            "properties": {
              "method": {
                "title": "Method",
                "description": "The webhook request method. Defaults to `POST`.",
                "default": "POST",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ],
                "type": "string"
              },
              "url": {
                "title": "Webhook URL",
                "description": "The webhook URL.",
                "example": "https://hooks.slack.com/XXX",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "headers": {
                "title": "Webhook Headers",
                "description": "A dictionary of headers to send with the webhook request.",
                "type": "object"
              }
            },
            "required": [
              "url"
            ],
            "block_type_slug": "webhook",
            "secret_fields": [
              "url",
              "headers.*"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.8.3"
        }
      }
    }
  }
}