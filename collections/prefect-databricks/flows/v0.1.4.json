{
    "prefect-databricks": {
        "jobs_runs_submit_and_wait_for_completion": {
            "description": {
                "summary": "Triggers a Databricks jobs runs and waits for the triggered runs to complete."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-databricks/flows/#prefect_databricks.flows.jobs_runs_submit_and_wait_for_completion",
            "entrypoint": "prefect_databricks/flows.py:jobs_runs_submit_and_wait_for_completion",
            "install_command": "pip install prefect-databricks",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250",
            "name": "Submit jobs runs and wait for completion",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "databricks_credentials": {
                        "title": "databricks_credentials",
                        "description": "\nCredentials to use for authentication with Databricks.",
                        "position": 0,
                        "allOf": [
                            {
                                "$ref": "#/definitions/DatabricksCredentials"
                            }
                        ]
                    },
                    "tasks": {
                        "title": "tasks",
                        "description": "Tasks to run, e.g.\n```\n[\n    {\n        \"task_key\": \"Sessionize\",\n        \"description\": \"Extracts session data from events\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.Sessionize\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n        \"timeout_seconds\": 86400,\n    },\n    {\n        \"task_key\": \"Orders_Ingest\",\n        \"description\": \"Ingests order data\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.OrdersIngest\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n        \"timeout_seconds\": 86400,\n    },\n    {\n        \"task_key\": \"Match\",\n        \"description\": \"Matches orders with user sessions\",\n        \"depends_on\": [\n            {\"task_key\": \"Orders_Ingest\"},\n            {\"task_key\": \"Sessionize\"},\n        ],\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n        },\n        \"notebook_task\": {\n            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n            \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"},\n        },\n        \"timeout_seconds\": 86400,\n    },\n]\n```",
                        "position": 1,
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/RunSubmitTaskSettings"
                        }
                    },
                    "run_name": {
                        "title": "run_name",
                        "description": "\nAn optional name for the run. The default value is `Untitled`, e.g. `A\nmultitask job run`.",
                        "position": 2,
                        "type": "string"
                    },
                    "max_wait_seconds": {
                        "title": "max_wait_seconds",
                        "description": "Maximum number of seconds to wait for the entire flow to complete.",
                        "default": 900,
                        "position": 3,
                        "type": "integer"
                    },
                    "poll_frequency_seconds": {
                        "title": "poll_frequency_seconds",
                        "description": "Number of seconds to wait in between checks for\nrun completion.",
                        "default": 10,
                        "position": 4,
                        "type": "integer"
                    },
                    "git_source": {
                        "title": "git_source",
                        "description": "\nThis functionality is in Public Preview.  An optional specification for\na remote repository containing the notebooks used by this\njob's notebook tasks. Key-values:\n- git_url:\n    URL of the repository to be cloned by this job. The maximum\n    length is 300 characters, e.g.\n    `https://github.com/databricks/databricks-cli`.\n- git_provider:\n    Unique identifier of the service used to host the Git\n    repository. The value is case insensitive, e.g. `github`.\n- git_branch:\n    Name of the branch to be checked out and used by this job.\n    This field cannot be specified in conjunction with git_tag\n    or git_commit. The maximum length is 255 characters, e.g.\n    `main`.\n- git_tag:\n    Name of the tag to be checked out and used by this job. This\n    field cannot be specified in conjunction with git_branch or\n    git_commit. The maximum length is 255 characters, e.g.\n    `release-1.0.0`.\n- git_commit:\n    Commit to be checked out and used by this job. This field\n    cannot be specified in conjunction with git_branch or\n    git_tag. The maximum length is 64 characters, e.g.\n    `e0056d01`.\n- git_snapshot:\n    Read-only state of the remote repository at the time the job was run.\n                This field is only included on job runs.",
                        "position": 5,
                        "allOf": [
                            {
                                "$ref": "#/definitions/GitSource"
                            }
                        ]
                    },
                    "timeout_seconds": {
                        "title": "timeout_seconds",
                        "description": "\nAn optional timeout applied to each run of this job. The default\nbehavior is to have no timeout, e.g. `86400`.",
                        "position": 6,
                        "type": "integer"
                    },
                    "idempotency_token": {
                        "title": "idempotency_token",
                        "description": "\nAn optional token that can be used to guarantee the idempotency of job\nrun requests. If a run with the provided token already\nexists, the request does not create a new run but returns\nthe ID of the existing run instead. If a run with the\nprovided token is deleted, an error is returned.  If you\nspecify the idempotency token, upon failure you can retry\nuntil the request succeeds. Databricks guarantees that\nexactly one run is launched with that idempotency token.\nThis token must have at most 64 characters.  For more\ninformation, see [How to ensure idempotency for\njobs](https://kb.databricks.com/jobs/jobs-idempotency.html),\ne.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`.",
                        "position": 7,
                        "type": "string"
                    },
                    "access_control_list": {
                        "title": "access_control_list",
                        "description": "\nList of permissions to set on the job.",
                        "position": 8,
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/AccessControlRequest"
                        }
                    },
                    "jobs_runs_submit_kwargs": {
                        "title": "jobs_runs_submit_kwargs",
                        "position": 9,
                        "type": "object"
                    }
                },
                "required": [
                    "databricks_credentials",
                    "jobs_runs_submit_kwargs"
                ],
                "definitions": {
                    "DatabricksCredentials": {
                        "title": "DatabricksCredentials",
                        "description": "Block used to manage Databricks authentication.",
                        "type": "object",
                        "properties": {
                            "databricks_instance": {
                                "title": "Databricks Instance",
                                "description": "Databricks instance used in formatting the endpoint URL.",
                                "type": "string"
                            },
                            "token": {
                                "title": "Token",
                                "description": "The token to authenticate with Databricks.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "client_kwargs": {
                                "title": "Client Kwargs",
                                "description": "Additional keyword arguments to pass to AsyncClient.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "databricks_instance",
                            "token"
                        ],
                        "block_type_slug": "databricks-credentials",
                        "secret_fields": [
                            "token"
                        ],
                        "block_schema_references": {}
                    },
                    "DbtTask": {
                        "title": "DbtTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "catalog": {
                                "title": "Catalog",
                                "description": "Optional name of the catalog to use. The value is the top level in the 3-level namespace of Unity Catalog (catalog / schema / relation). The catalog value can only be specified if a warehouse_id is specified. Requires dbt-databricks >= 1.1.1.",
                                "example": "main",
                                "type": "string"
                            },
                            "commands": {
                                "title": "Commands",
                                "description": "A list of dbt commands to execute. All commands must start with `dbt`. This parameter must not be empty. A maximum of up to 10 commands can be provided.",
                                "example": [
                                    "dbt deps",
                                    "dbt seed",
                                    "dbt run --models 123"
                                ],
                                "type": "array",
                                "items": {}
                            },
                            "profiles_directory": {
                                "title": "Profiles Directory",
                                "description": "Optional (relative) path to the profiles directory. Can only be specified if no warehouse_id is specified. If no warehouse_id is specified and this folder is unset, the root directory is used.",
                                "type": "string"
                            },
                            "project_directory": {
                                "title": "Project Directory",
                                "description": "Optional (relative) path to the project directory, if no value is provided, the root of the git repository is used.",
                                "type": "string"
                            },
                            "schema": {
                                "title": "Schema",
                                "description": "Optional schema to write to. This parameter is only used when a warehouse_id is also provided. If not provided, the `default` schema is used.",
                                "type": "string"
                            },
                            "warehouse_id": {
                                "title": "Warehouse Id",
                                "description": "ID of the SQL warehouse to connect to. If provided, we automatically generate and provide the profile and connection details to dbt. It can be overridden on a per-command basis by using the `--profiles-dir` command line argument.",
                                "example": "30dade0507d960d1",
                                "type": "string"
                            }
                        },
                        "required": [
                            "commands"
                        ]
                    },
                    "TaskDependency": {
                        "title": "TaskDependency",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "task_key": {
                                "title": "Task Key",
                                "type": "string"
                            }
                        }
                    },
                    "TaskDependencies": {
                        "title": "TaskDependencies",
                        "description": "An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task.\nThe key is `task_key`, and the value is the name assigned to the dependent task.\nThis field is required when a job consists of more than one task.",
                        "example": [
                            {
                                "task_key": "Previous_Task_Key"
                            },
                            {
                                "task_key": "Other_Task_Key"
                            }
                        ],
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/TaskDependency"
                        }
                    },
                    "RCranLibrary": {
                        "title": "RCranLibrary",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "package": {
                                "title": "Package",
                                "description": "The name of the CRAN package to install. This field is required.",
                                "example": "geojson",
                                "type": "string"
                            },
                            "repo": {
                                "title": "Repo",
                                "description": "The repository where the package can be found. If not specified, the default CRAN repo is used.",
                                "example": "https://my-repo.com",
                                "type": "string"
                            }
                        },
                        "required": [
                            "package"
                        ]
                    },
                    "MavenLibrary": {
                        "title": "MavenLibrary",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "coordinates": {
                                "title": "Coordinates",
                                "description": "Gradle-style Maven coordinates. For example: `org.jsoup:jsoup:1.7.2`. This field is required.",
                                "example": "org.jsoup:jsoup:1.7.2",
                                "type": "string"
                            },
                            "exclusions": {
                                "title": "Exclusions",
                                "description": "List of dependences to exclude. For example: `[\"slf4j:slf4j\", \"*:hadoop-client\"]`.\n\nMaven dependency exclusions: <https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html>.",
                                "example": [
                                    "slf4j:slf4j",
                                    "*:hadoop-client"
                                ],
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "repo": {
                                "title": "Repo",
                                "description": "Maven repo to install the Maven package from. If omitted, both Maven Central Repository and Spark Packages are searched.",
                                "example": "https://my-repo.com",
                                "type": "string"
                            }
                        },
                        "required": [
                            "coordinates"
                        ]
                    },
                    "PythonPyPiLibrary": {
                        "title": "PythonPyPiLibrary",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "package": {
                                "title": "Package",
                                "description": "The name of the PyPI package to install. An optional exact version specification is also supported. Examples: `simplejson` and `simplejson==3.8.0`. This field is required.",
                                "example": "simplejson==3.8.0",
                                "type": "string"
                            },
                            "repo": {
                                "title": "Repo",
                                "description": "The repository where the package can be found. If not specified, the default pip index is used.",
                                "example": "https://my-repo.com",
                                "type": "string"
                            }
                        },
                        "required": [
                            "package"
                        ]
                    },
                    "Library": {
                        "title": "Library",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "cran": {
                                "title": "Cran",
                                "description": "If cran, specification of a CRAN library to be installed.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/RCranLibrary"
                                    }
                                ]
                            },
                            "egg": {
                                "title": "Egg",
                                "description": "If egg, URI of the egg to be installed. DBFS and S3 URIs are supported. For example: `{ \"egg\": \"dbfs:/my/egg\" }` or `{ \"egg\": \"s3://my-bucket/egg\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI.",
                                "example": "dbfs:/my/egg",
                                "type": "string"
                            },
                            "jar": {
                                "title": "Jar",
                                "description": "If jar, URI of the JAR to be installed. DBFS and S3 URIs are supported. For example: `{ \"jar\": \"dbfs:/mnt/databricks/library.jar\" }` or `{ \"jar\": \"s3://my-bucket/library.jar\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI.",
                                "example": "dbfs:/my-jar.jar",
                                "type": "string"
                            },
                            "maven": {
                                "title": "Maven",
                                "description": "If maven, specification of a Maven library to be installed. For example: `{ \"coordinates\": \"org.jsoup:jsoup:1.7.2\" }`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/MavenLibrary"
                                    }
                                ]
                            },
                            "pypi": {
                                "title": "Pypi",
                                "description": "If pypi, specification of a PyPI library to be installed. Specifying the `repo` field is optional and if not specified, the default pip index is used. For example: `{ \"package\": \"simplejson\", \"repo\": \"https://my-repo.com\" }`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/PythonPyPiLibrary"
                                    }
                                ]
                            },
                            "whl": {
                                "title": "Whl",
                                "description": "If whl, URI of the wheel or zipped wheels to be installed. DBFS and S3 URIs are supported. For example: `{ \"whl\": \"dbfs:/my/whl\" }` or `{ \"whl\": \"s3://my-bucket/whl\" }`. If S3 is used, make sure the cluster has read access on the library. You may need to launch the cluster with an instance profile to access the S3 URI. Also the wheel file name needs to use the [correct convention](https://www.python.org/dev/peps/pep-0427/#file-format). If zipped wheels are to be installed, the file name suffix should be `.wheelhouse.zip`.",
                                "example": "dbfs:/my/whl",
                                "type": "string"
                            }
                        }
                    },
                    "AutoScale": {
                        "title": "AutoScale",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "max_workers": {
                                "title": "Max Workers",
                                "description": "The maximum number of workers to which the cluster can scale up when overloaded. max_workers must be strictly greater than min_workers.",
                                "type": "integer"
                            },
                            "min_workers": {
                                "title": "Min Workers",
                                "description": "The minimum number of workers to which the cluster can scale down when underutilized. It is also the initial number of workers the cluster has after creation.",
                                "type": "integer"
                            }
                        }
                    },
                    "AwsAttributes": {
                        "title": "AwsAttributes",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "availability": {
                                "title": "Availability",
                                "description": "Availability type used for all subsequent nodes past the `first_on_demand` ones. **Note:** If `first_on_demand` is zero, this availability type is used for the entire cluster.\n\n`SPOT`: use spot instances.\n`ON_DEMAND`: use on-demand instances.\n`SPOT_WITH_FALLBACK`: preferably use spot instances, but fall back to on-demand instances if spot instances cannot be acquired (for example, if AWS spot prices are too high).",
                                "enum": [
                                    "SPOT",
                                    "ON_DEMAND",
                                    "SPOT_WITH_FALLBACK"
                                ],
                                "type": "string"
                            },
                            "ebs_volume_count": {
                                "title": "Ebs Volume Count",
                                "description": "The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation fails.\n\nThese EBS volumes are mounted at `/ebs0`, `/ebs1`, and etc. Instance store volumes are mounted at `/local_disk0`, `/local_disk1`, and etc.\n\nIf EBS volumes are attached, Databricks configures Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks configures Spark to use instance store volumes.\n\nIf EBS volumes are specified, then the Spark configuration `spark.local.dir` is overridden.",
                                "type": "integer"
                            },
                            "ebs_volume_iops": {
                                "title": "Ebs Volume Iops",
                                "description": "The number of IOPS per EBS gp3 volume.\n\nThis value must be between 3000 and 16000.\n\nThe value of IOPS and throughput is calculated based on AWS documentation to match the maximum performance of a gp2 volume with the same volume size.\n\nFor more information, see the [EBS volume limit calculator](https://github.com/awslabs/aws-support-tools/tree/master/EBS/VolumeLimitCalculator).",
                                "type": "integer"
                            },
                            "ebs_volume_size": {
                                "title": "Ebs Volume Size",
                                "description": "The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096\\. For throughput optimized HDD, this value must be within the range 500 - 4096\\. Custom EBS volumes cannot be specified for the legacy node types (_memory-optimized_ and _compute-optimized_).",
                                "type": "integer"
                            },
                            "ebs_volume_throughput": {
                                "title": "Ebs Volume Throughput",
                                "description": "The throughput per EBS gp3 volume, in MiB per second.\n\nThis value must be between 125 and 1000.",
                                "type": "integer"
                            },
                            "ebs_volume_type": {
                                "title": "Ebs Volume Type",
                                "description": "The type of EBS volume that is launched with this cluster.\n\n`GENERAL_PURPOSE_SSD`: provision extra storage using AWS gp2 EBS volumes.\n`THROUGHPUT_OPTIMIZED_HDD`: provision extra storage using AWS st1 volumes.",
                                "enum": [
                                    "GENERAL_PURPOSE_SSD",
                                    "THROUGHPUT_OPTIMIZED_HDD"
                                ],
                                "type": "string"
                            },
                            "first_on_demand": {
                                "title": "First On Demand",
                                "description": "The first first_on_demand nodes of the cluster are placed on on-demand instances. If this value is greater than 0, the cluster driver node is placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes are placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes are placed on on-demand instances and the remainder are placed on `availability` instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.",
                                "type": "integer"
                            },
                            "instance_profile_arn": {
                                "title": "Instance Profile Arn",
                                "description": "Nodes for this cluster are only be placed on AWS instances with this instance profile. If omitted, nodes are placed on instances without an instance profile. The instance profile must have previously been added to the Databricks environment by an account administrator.\n\nThis feature may only be available to certain customer plans.",
                                "type": "string"
                            },
                            "spot_bid_price_percent": {
                                "title": "Spot Bid Price Percent",
                                "description": "The max price for AWS spot instances, as a percentage of the corresponding instance type\u2019s on-demand price. For example, if this field is set to 50, and the cluster needs a new `i3.xlarge` spot instance, then the max price is half of the price of on-demand `i3.xlarge` instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand `i3.xlarge` instances. If not specified, the default value is 100\\. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field is considered. For safety, we enforce this field to be no more than 10000.",
                                "type": "integer"
                            },
                            "zone_id": {
                                "title": "Zone Id",
                                "description": "Identifier for the availability zone/datacenter in which the cluster resides. You have three options:\n\n**Specify an availability zone as a string**, for example: \u201cus-west-2a\u201d. The provided availability zone must be in the same region as the Databricks deployment. For example, \u201cus-west-2a\u201d is not a valid zone ID if the Databricks deployment resides in the \u201cus-east-1\u201d region.\n\n**Enable automatic availability zone selection (\u201cAuto-AZ\u201d)**, by setting the value \u201cauto\u201d. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.\n\n**Do not specify a value**. If not specified, a default zone is used.\n\nThe list of available zones as well as the default value can be found by using the [List zones](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-zones) API.",
                                "type": "string"
                            }
                        }
                    },
                    "DbfsStorageInfo": {
                        "title": "DbfsStorageInfo",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "destination": {
                                "title": "Destination",
                                "description": "DBFS destination. Example: `dbfs:/my/path`",
                                "type": "string"
                            }
                        }
                    },
                    "S3StorageInfo": {
                        "title": "S3StorageInfo",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "canned_acl": {
                                "title": "Canned Acl",
                                "description": "(Optional) Set canned access control list. For example: `bucket-owner-full-control`. If canned_acl is set, the cluster instance profile must have `s3:PutObjectAcl` permission on the destination bucket and prefix. The full list of possible canned ACLs can be found at <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl>. By default only the object owner gets full control. If you are using cross account role for writing data, you may want to set `bucket-owner-full-control` to make bucket owner able to read the logs.",
                                "type": "string"
                            },
                            "destination": {
                                "title": "Destination",
                                "description": "S3 destination. For example: `s3://my-bucket/some-prefix` You must configure the cluster with an instance profile and the instance profile must have write access to the destination. You _cannot_ use AWS keys.",
                                "type": "string"
                            },
                            "enable_encryption": {
                                "title": "Enable Encryption",
                                "description": "(Optional)Enable server side encryption, `false` by default.",
                                "type": "boolean"
                            },
                            "encryption_type": {
                                "title": "Encryption Type",
                                "description": "(Optional) The encryption type, it could be `sse-s3` or `sse-kms`. It is used only when encryption is enabled and the default type is `sse-s3`.",
                                "type": "string"
                            },
                            "endpoint": {
                                "title": "Endpoint",
                                "description": "S3 endpoint. For example: `https://s3-us-west-2.amazonaws.com`. Either region or endpoint must be set. If both are set, endpoint is used.",
                                "type": "string"
                            },
                            "kms_key": {
                                "title": "Kms Key",
                                "description": "(Optional) KMS key used if encryption is enabled and encryption type is set to `sse-kms`.",
                                "type": "string"
                            },
                            "region": {
                                "title": "Region",
                                "description": "S3 region. For example: `us-west-2`. Either region or endpoint must be set. If both are set, endpoint is used.",
                                "type": "string"
                            }
                        }
                    },
                    "ClusterLogConf": {
                        "title": "ClusterLogConf",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "dbfs": {
                                "title": "Dbfs",
                                "description": "DBFS location of cluster log. Destination must be provided. For example, `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/cluster_log\" } }`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/DbfsStorageInfo"
                                    }
                                ]
                            },
                            "s3": {
                                "title": "S3",
                                "description": "S3 location of cluster log. `destination` and either `region` or `endpoint` must be provided. For example, `{ \"s3\": { \"destination\" : \"s3://cluster_log_bucket/prefix\", \"region\" : \"us-west-2\" } }`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/S3StorageInfo"
                                    }
                                ]
                            }
                        }
                    },
                    "ClusterTag": {
                        "title": "ClusterTag",
                        "description": "See source code for the fields' description.\n\nAn object with key value pairs. The key length must be between 1 and 127 UTF-8 characters, inclusive. The value length must be less than or equal to 255 UTF-8 characters. For a list of all restrictions, see AWS Tag Restrictions: <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions>",
                        "type": "object",
                        "properties": {}
                    },
                    "FileStorageInfo": {
                        "title": "FileStorageInfo",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "destination": {
                                "title": "Destination",
                                "description": "File destination. Example: `file:/my/file.sh`",
                                "type": "string"
                            }
                        }
                    },
                    "InitScriptInfo": {
                        "title": "InitScriptInfo",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "S3": {
                                "title": "S3",
                                "description": "S3 location of init script. Destination and either region or endpoint must be provided. For example, `{ \"s3\": { \"destination\" : \"s3://init_script_bucket/prefix\", \"region\" : \"us-west-2\" } }`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/S3StorageInfo"
                                    }
                                ]
                            },
                            "dbfs": {
                                "title": "Dbfs",
                                "description": "DBFS location of init script. Destination must be provided. For example, `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/init_script\" } }`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/DbfsStorageInfo"
                                    }
                                ]
                            },
                            "file": {
                                "title": "File",
                                "description": "File location of init script. Destination must be provided. For example, `{ \"file\" : { \"destination\" : \"file:/my/local/file.sh\" } }`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/FileStorageInfo"
                                    }
                                ]
                            }
                        }
                    },
                    "SparkConfPair": {
                        "title": "SparkConfPair",
                        "description": "See source code for the fields' description.\n\nAn arbitrary object where the object key is a configuration propery name and the value is a configuration property value.",
                        "type": "object",
                        "properties": {}
                    },
                    "SparkEnvPair": {
                        "title": "SparkEnvPair",
                        "description": "See source code for the fields' description.\n\nAn arbitrary object where the object key is an environment variable name and the value is an environment variable value.",
                        "type": "object",
                        "properties": {}
                    },
                    "NewCluster": {
                        "title": "NewCluster",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "autoscale": {
                                "title": "Autoscale",
                                "description": "If autoscale, the required parameters to automatically scale clusters up and down based on load.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AutoScale"
                                    }
                                ]
                            },
                            "aws_attributes": {
                                "title": "Aws Attributes",
                                "description": "Attributes related to clusters running on Amazon Web Services. If not specified at cluster creation, a set of default values is used.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AwsAttributes"
                                    }
                                ]
                            },
                            "cluster_log_conf": {
                                "title": "Cluster Log Conf",
                                "description": "The configuration for delivering Spark logs to a long-term storage destination. Only one destination can be specified for one cluster. If the conf is given, the logs are delivered to the destination every `5 mins`. The destination of driver logs is `<destination>/<cluster-id>/driver`, while the destination of executor logs is `<destination>/<cluster-id>/executor`.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/ClusterLogConf"
                                    }
                                ]
                            },
                            "custom_tags": {
                                "title": "Custom Tags",
                                "description": "An object containing a set of tags for cluster resources. Databricks tags all cluster resources (such as AWS instances and EBS volumes) with these tags in addition to default_tags.\n\n**Note**:\n\n* Tags are not supported on legacy node types such as compute-optimized and memory-optimized\n* Databricks allows at most 45 custom tags",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/ClusterTag"
                                    }
                                ]
                            },
                            "driver_instance_pool_id": {
                                "title": "Driver Instance Pool Id",
                                "description": "The optional ID of the instance pool to use for the driver node. You must also specify `instance_pool_id`. Refer to [Instance Pools API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html) for details.",
                                "type": "string"
                            },
                            "driver_node_type_id": {
                                "title": "Driver Node Type Id",
                                "description": "The node type of the Spark driver. This field is optional; if unset, the driver node type is set as the same value as `node_type_id` defined above.",
                                "type": "string"
                            },
                            "enable_elastic_disk": {
                                "title": "Enable Elastic Disk",
                                "description": "Autoscaling Local Storage: when enabled, this cluster dynamically acquires additional disk space when its Spark workers are running low on disk space. This feature requires specific AWS permissions to function correctly - refer to [Autoscaling local storage](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage) for details.",
                                "type": "boolean"
                            },
                            "enable_local_disk_encryption": {
                                "title": "Enable Local Disk Encryption",
                                "description": "Determines whether encryption of disks locally attached to the cluster is enabled.",
                                "type": "boolean"
                            },
                            "init_scripts": {
                                "title": "Init Scripts",
                                "description": "The configuration for storing init scripts. Any number of scripts can be specified. The scripts are executed sequentially in the order provided. If `cluster_log_conf` is specified, init script logs are sent to `<destination>/<cluster-id>/init_scripts`.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InitScriptInfo"
                                }
                            },
                            "instance_pool_id": {
                                "title": "Instance Pool Id",
                                "description": "The optional ID of the instance pool to use for cluster nodes. If `driver_instance_pool_id` is present, `instance_pool_id` is used for worker nodes only. Otherwise, it is used for both the driver node and worker nodes. Refer to [Instance Pools API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html) for details.",
                                "type": "string"
                            },
                            "node_type_id": {
                                "title": "Node Type Id",
                                "description": "This field encodes, through a single value, the resources available to each of the Spark nodes in this cluster. For example, the Spark nodes can be provisioned and optimized for memory or compute intensive workloads A list of available node types can be retrieved by using the [List node types](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-node-types) API call.",
                                "type": "string"
                            },
                            "num_workers": {
                                "title": "Num Workers",
                                "description": "If num_workers, number of worker nodes that this cluster must have. A cluster has one Spark driver and num_workers executors for a total of num_workers + 1 Spark nodes. When reading the properties of a cluster, this field reflects the desired number of workers rather than the actual current number of workers. For example, if a cluster is resized from 5 to 10 workers, this field immediately updates to reflect the target size of 10 workers, whereas the workers listed in `spark_info` gradually increase from 5 to 10 as the new nodes are provisioned.",
                                "type": "integer"
                            },
                            "policy_id": {
                                "title": "Policy Id",
                                "description": "A [cluster policy](https://docs.databricks.com/dev-tools/api/latest/policies.html) ID. Either `node_type_id` or `instance_pool_id` must be specified in the cluster policy if they are not specified in this job cluster object.",
                                "type": "string"
                            },
                            "spark_conf": {
                                "title": "Spark Conf",
                                "description": "An object containing a set of optional, user-specified Spark configuration key-value pairs. You can also pass in a string of extra JVM options to the driver and the executors via `spark.driver.extraJavaOptions` and `spark.executor.extraJavaOptions` respectively.\n\nExample Spark confs: `{\"spark.speculation\": true, \"spark.streaming.ui.retainedBatches\": 5}` or `{\"spark.driver.extraJavaOptions\": \"-verbose:gc -XX:+PrintGCDetails\"}`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SparkConfPair"
                                    }
                                ]
                            },
                            "spark_env_vars": {
                                "title": "Spark Env Vars",
                                "description": "An object containing a set of optional, user-specified environment variable key-value pairs. Key-value pair of the form (X,Y) are exported as is (for example, `export X='Y'`) while launching the driver and workers.\n\nTo specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the following example. This ensures that all default databricks managed environmental variables are included as well.\n\nExample Spark environment variables: `{\"SPARK_WORKER_MEMORY\": \"28000m\", \"SPARK_LOCAL_DIRS\": \"/local_disk0\"}` or `{\"SPARK_DAEMON_JAVA_OPTS\": \"$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true\"}`",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SparkEnvPair"
                                    }
                                ]
                            },
                            "spark_version": {
                                "title": "Spark Version",
                                "description": "The Spark version of the cluster. A list of available Spark versions can be retrieved by using the [Runtime versions](https://docs.databricks.com/dev-tools/api/latest/clusters.html#runtime-versions) API call.",
                                "type": "string"
                            },
                            "ssh_public_keys": {
                                "title": "Ssh Public Keys",
                                "description": "SSH public key contents that are added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name `ubuntu` on port `2200`. Up to 10 keys can be specified.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "spark_version"
                        ]
                    },
                    "NotebookTask": {
                        "title": "NotebookTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "base_parameters": {
                                "title": "Base Parameters",
                                "description": "Base parameters to be used for each run of this job. If the run is initiated by a call to [`run-now`](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow) with parameters specified, the two parameters maps are merged. If the same key is specified in `base_parameters` and in `run-now`, the value from `run-now` is used.\n\nUse [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.\n\nIf the notebook takes a parameter that is not specified in the job\u2019s `base_parameters` or the `run-now` override parameters, the default value from the notebook is used.\n\nRetrieve these parameters in a notebook using [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets).",
                                "example": {
                                    "age": 35,
                                    "name": "John Doe"
                                },
                                "type": "object"
                            },
                            "notebook_path": {
                                "title": "Notebook Path",
                                "description": "The path of the notebook to be run in the Databricks workspace or remote repository. For notebooks stored in the Databricks workspace, the path must be absolute and begin with a slash. For notebooks stored in a remote repository, the path must be relative. This field is required.",
                                "example": "/Users/user.name@databricks.com/notebook_to_run",
                                "type": "string"
                            },
                            "source": {
                                "title": "Source",
                                "description": "Optional location type of the notebook. When set to `WORKSPACE`, the notebook will be retrieved from the local Databricks workspace. When set to `GIT`, the notebook will be retrieved from a Git repository defined in `git_source`. If the value is empty, the task will use `GIT` if `git_source` is defined and `WORKSPACE` otherwise.",
                                "example": "WORKSPACE",
                                "enum": [
                                    "WORKSPACE",
                                    "GIT"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "notebook_path"
                        ]
                    },
                    "PipelineTask": {
                        "title": "PipelineTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "full_refresh": {
                                "title": "Full Refresh",
                                "description": "If true, a full refresh will be triggered on the delta live table.",
                                "default": false,
                                "type": "boolean"
                            },
                            "pipeline_id": {
                                "title": "Pipeline Id",
                                "description": "The full name of the pipeline task to execute.",
                                "example": "a12cd3e4-0ab1-1abc-1a2b-1a2bcd3e4fg5",
                                "type": "string"
                            }
                        }
                    },
                    "PythonWheelTask": {
                        "title": "PythonWheelTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "entry_point": {
                                "title": "Entry Point",
                                "description": "Named entry point to use, if it does not exist in the metadata of the package it executes the function from the package directly using `$packageName.$entryPoint()`",
                                "type": "string"
                            },
                            "named_parameters": {
                                "title": "Named Parameters",
                                "description": "Command-line parameters passed to Python wheel task in the form of `[\"--name=task\", \"--data=dbfs:/path/to/data.json\"]`. Leave it empty if `parameters` is not null.",
                                "example": {
                                    "data": "dbfs:/path/to/data.json",
                                    "name": "task"
                                },
                                "type": "object"
                            },
                            "package_name": {
                                "title": "Package Name",
                                "description": "Name of the package to execute",
                                "type": "string"
                            },
                            "parameters": {
                                "title": "Parameters",
                                "description": "Command-line parameters passed to Python wheel task. Leave it empty if `named_parameters` is not null.",
                                "example": [
                                    "--name=task",
                                    "one",
                                    "two"
                                ],
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "SparkJarTask": {
                        "title": "SparkJarTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "jar_uri": {
                                "title": "Jar Uri",
                                "description": "Deprecated since 04/2016\\. Provide a `jar` through the `libraries` field instead. For an example, see [Create](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsCreate).",
                                "deprecated": true,
                                "type": "string"
                            },
                            "main_class_name": {
                                "title": "Main Class Name",
                                "description": "The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library.\n\nThe code must use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs of the job fail.",
                                "example": "com.databricks.ComputeModels",
                                "type": "string"
                            },
                            "parameters": {
                                "title": "Parameters",
                                "description": "Parameters passed to the main method.\n\nUse [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.",
                                "example": [
                                    "--data",
                                    "dbfs:/path/to/data.json"
                                ],
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "SparkPythonTask": {
                        "title": "SparkPythonTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "parameters": {
                                "title": "Parameters",
                                "description": "Command line parameters passed to the Python file.\n\nUse [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.",
                                "example": [
                                    "--data",
                                    "dbfs:/path/to/data.json"
                                ],
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "python_file": {
                                "title": "Python File",
                                "description": "The Python file to be executed. Cloud file URIs (such as dbfs:/, s3:/, adls:/, gcs:/) and workspace paths are supported. For python files stored in the Databricks workspace, the path must be absolute and begin with `/Repos`. This field is required.",
                                "example": "dbfs:/path/to/file.py",
                                "type": "string"
                            }
                        },
                        "required": [
                            "python_file"
                        ]
                    },
                    "SparkSubmitTask": {
                        "title": "SparkSubmitTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "parameters": {
                                "title": "Parameters",
                                "description": "Command-line parameters passed to spark submit.\n\nUse [Task parameter variables](https://docs.databricks.com/jobs.html#parameter-variables) to set parameters containing information about job runs.",
                                "example": [
                                    "--class",
                                    "org.apache.spark.examples.SparkPi",
                                    "dbfs:/path/to/examples.jar",
                                    "10"
                                ],
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "SqlTaskAlert": {
                        "title": "SqlTaskAlert",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "alert_id": {
                                "title": "Alert Id",
                                "description": "The canonical identifier of the SQL alert.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "alert_id"
                        ]
                    },
                    "SqlTaskDashboard": {
                        "title": "SqlTaskDashboard",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "dashboard_id": {
                                "title": "Dashboard Id",
                                "description": "The canonical identifier of the SQL dashboard.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "dashboard_id"
                        ]
                    },
                    "SqlTaskQuery": {
                        "title": "SqlTaskQuery",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "query_id": {
                                "title": "Query Id",
                                "description": "The canonical identifier of the SQL query.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "query_id"
                        ]
                    },
                    "SqlTask": {
                        "title": "SqlTask",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "alert": {
                                "title": "Alert",
                                "description": "If alert, indicates that this job must refresh a SQL alert.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SqlTaskAlert"
                                    }
                                ]
                            },
                            "dashboard": {
                                "title": "Dashboard",
                                "description": "If dashboard, indicates that this job must refresh a SQL dashboard.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SqlTaskDashboard"
                                    }
                                ]
                            },
                            "parameters": {
                                "title": "Parameters",
                                "description": "Parameters to be used for each run of this job. The SQL alert task does not support custom parameters.",
                                "example": {
                                    "age": 35,
                                    "name": "John Doe"
                                },
                                "type": "object"
                            },
                            "query": {
                                "title": "Query",
                                "description": "If query, indicates that this job must execute a SQL query.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SqlTaskQuery"
                                    }
                                ]
                            },
                            "warehouse_id": {
                                "title": "Warehouse Id",
                                "description": "The canonical identifier of the SQL warehouse. Only serverless and pro SQL warehouses are supported.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "warehouse_id"
                        ]
                    },
                    "TaskKey": {
                        "title": "TaskKey",
                        "description": "A unique name for the task. This field is used to refer to this task from other tasks.\nThis field is required and must be unique within its parent job.\nOn Update or Reset, this field is used to reference the tasks to be updated or reset.\nThe maximum length is 100 characters.",
                        "maxLength": 100,
                        "minLength": 1,
                        "pattern": "^[\\w\\-]+$",
                        "example": "Task_Key",
                        "type": "string"
                    },
                    "RunSubmitTaskSettings": {
                        "title": "RunSubmitTaskSettings",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "dbt_task": {
                                "title": "Dbt Task",
                                "description": "If dbt_task, indicates that this must execute a dbt task. It requires both Databricks SQL and the ability to use a serverless or a pro SQL warehouse.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/DbtTask"
                                    }
                                ]
                            },
                            "depends_on": {
                                "$ref": "#/definitions/TaskDependencies"
                            },
                            "existing_cluster_id": {
                                "title": "Existing Cluster Id",
                                "description": "If existing_cluster_id, the ID of an existing cluster that is used for all runs of this task. When running tasks on an existing cluster, you may need to manually restart the cluster if it stops responding. We suggest running jobs on new clusters for greater reliability.",
                                "example": "0923-164208-meows279",
                                "type": "string"
                            },
                            "libraries": {
                                "title": "Libraries",
                                "description": "An optional list of libraries to be installed on the cluster that executes the task. The default value is an empty list.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/Library"
                                }
                            },
                            "new_cluster": {
                                "title": "New Cluster",
                                "description": "If new_cluster, a description of a cluster that is created for each run.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/NewCluster"
                                    }
                                ]
                            },
                            "notebook_task": {
                                "title": "Notebook Task",
                                "description": "If notebook_task, indicates that this task must run a notebook. This field may not be specified in conjunction with spark_jar_task.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/NotebookTask"
                                    }
                                ]
                            },
                            "pipeline_task": {
                                "title": "Pipeline Task",
                                "description": "If pipeline_task, indicates that this task must execute a Pipeline.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/PipelineTask"
                                    }
                                ]
                            },
                            "python_wheel_task": {
                                "title": "Python Wheel Task",
                                "description": "If python_wheel_task, indicates that this job must execute a PythonWheel.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/PythonWheelTask"
                                    }
                                ]
                            },
                            "spark_jar_task": {
                                "title": "Spark Jar Task",
                                "description": "If spark_jar_task, indicates that this task must run a JAR.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SparkJarTask"
                                    }
                                ]
                            },
                            "spark_python_task": {
                                "title": "Spark Python Task",
                                "description": "If spark_python_task, indicates that this task must run a Python file.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SparkPythonTask"
                                    }
                                ]
                            },
                            "spark_submit_task": {
                                "title": "Spark Submit Task",
                                "description": "If spark_submit_task, indicates that this task must be launched by the spark submit script.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SparkSubmitTask"
                                    }
                                ]
                            },
                            "sql_task": {
                                "title": "Sql Task",
                                "description": "If sql_task, indicates that this job must execute a SQL task. It requires both Databricks SQL and a serverless or a pro SQL warehouse.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/SqlTask"
                                    }
                                ]
                            },
                            "task_key": {
                                "$ref": "#/definitions/TaskKey"
                            },
                            "timeout_seconds": {
                                "title": "Timeout Seconds",
                                "description": "An optional timeout applied to each run of this job task. The default behavior is to have no timeout.",
                                "example": 86400,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "task_key"
                        ]
                    },
                    "GitSnapshot": {
                        "title": "GitSnapshot",
                        "description": "See source code for the fields' description.\n\nRead-only state of the remote repository at the time the job was run. This field is only included on job runs.",
                        "type": "object",
                        "properties": {
                            "used_commit": {
                                "title": "Used Commit",
                                "description": "Commit that was used to execute the run. If git_branch was specified, this points to the HEAD of the branch at the time of the run; if git_tag was specified, this points to the commit the tag points to.",
                                "example": "4506fdf41e9fa98090570a34df7a5bce163ff15f",
                                "type": "string"
                            }
                        }
                    },
                    "GitSource": {
                        "title": "GitSource",
                        "description": "See source code for the fields' description.\n\n    This functionality is in Public Preview.\n\nAn optional specification for a remote repository containing the notebooks used by this job's notebook tasks.",
                        "type": "object",
                        "properties": {
                            "git_branch": {
                                "title": "Git Branch",
                                "description": "Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit.\nThe maximum length is 255 characters.",
                                "example": "main",
                                "type": "string"
                            },
                            "git_commit": {
                                "title": "Git Commit",
                                "description": "Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag.\nThe maximum length is 64 characters.",
                                "example": "e0056d01",
                                "type": "string"
                            },
                            "git_provider": {
                                "title": "Git Provider",
                                "description": "Unique identifier of the service used to host the Git repository. The value is case insensitive.",
                                "example": "github",
                                "enum": [
                                    "gitHub",
                                    "bitbucketCloud",
                                    "azureDevOpsServices",
                                    "gitHubEnterprise",
                                    "bitbucketServer",
                                    "gitLab",
                                    "gitLabEnterpriseEdition",
                                    "awsCodeCommit"
                                ],
                                "type": "string"
                            },
                            "git_snapshot": {
                                "$ref": "#/definitions/GitSnapshot"
                            },
                            "git_tag": {
                                "title": "Git Tag",
                                "description": "Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit.\nThe maximum length is 255 characters.",
                                "example": "release-1.0.0",
                                "type": "string"
                            },
                            "git_url": {
                                "title": "Git Url",
                                "description": "URL of the repository to be cloned by this job.\nThe maximum length is 300 characters.",
                                "example": "https://github.com/databricks/databricks-cli",
                                "type": "string"
                            }
                        }
                    },
                    "GroupName": {
                        "title": "GroupName",
                        "description": "Group name. There are two built-in groups: `users` for all users, and `admins` for administrators.",
                        "example": "users",
                        "type": "string"
                    },
                    "CanManage": {
                        "title": "CanManage",
                        "description": "Permission to manage the job.",
                        "enum": [
                            "CAN_MANAGE"
                        ],
                        "type": "string"
                    },
                    "CanManageRun": {
                        "title": "CanManageRun",
                        "description": "Permission to run and/or manage runs for the job.",
                        "enum": [
                            "CAN_MANAGE_RUN"
                        ],
                        "type": "string"
                    },
                    "CanView": {
                        "title": "CanView",
                        "description": "Permission to view the settings of the job.",
                        "enum": [
                            "CAN_VIEW"
                        ],
                        "type": "string"
                    },
                    "IsOwner": {
                        "title": "IsOwner",
                        "description": "Perimssion that represents ownership of the job.",
                        "enum": [
                            "IS_OWNER"
                        ],
                        "type": "string"
                    },
                    "PermissionLevel": {
                        "title": "PermissionLevel",
                        "description": "Permission level to grant.",
                        "anyOf": [
                            {
                                "$ref": "#/definitions/CanManage"
                            },
                            {
                                "$ref": "#/definitions/CanManageRun"
                            },
                            {
                                "$ref": "#/definitions/CanView"
                            },
                            {
                                "$ref": "#/definitions/IsOwner"
                            }
                        ]
                    },
                    "UserName": {
                        "title": "UserName",
                        "description": "Email address for the user.",
                        "example": "jsmith@example.com",
                        "type": "string"
                    },
                    "AccessControlRequest": {
                        "title": "AccessControlRequest",
                        "description": "See source code for the fields' description.",
                        "type": "object",
                        "properties": {
                            "group_name": {
                                "$ref": "#/definitions/GroupName"
                            },
                            "permission_level": {
                                "$ref": "#/definitions/PermissionLevel"
                            },
                            "user_name": {
                                "$ref": "#/definitions/UserName"
                            }
                        }
                    }
                }
            },
            "path_containing_flow": "prefect_databricks/flows.py",
            "repo_url": "https://github.com/PrefectHQ/prefect-databricks",
            "slug": "jobs_runs_submit_and_wait_for_completion"
        },
        "jobs_runs_wait_for_completion": {
            "description": {
                "summary": "Waits for the jobs runs to finish running"
            },
            "documentation_url": "https://prefecthq.github.io/prefect-databricks/flows/#prefect_databricks.flows.jobs_runs_wait_for_completion",
            "entrypoint": "prefect_databricks/flows.py:jobs_runs_wait_for_completion",
            "install_command": "pip install prefect-databricks",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250",
            "name": "Wait for completion of jobs runs",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "multi_task_jobs_runs_id": {
                        "title": "multi_task_jobs_runs_id",
                        "position": 0,
                        "type": "integer"
                    },
                    "databricks_credentials": {
                        "title": "databricks_credentials",
                        "description": "\nCredentials to use for authentication with Databricks.",
                        "position": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/DatabricksCredentials"
                            }
                        ]
                    },
                    "run_name": {
                        "title": "run_name",
                        "description": "The name of the jobs runs task.",
                        "position": 2,
                        "type": "string"
                    },
                    "max_wait_seconds": {
                        "title": "max_wait_seconds",
                        "description": "\nMaximum number of seconds to wait for the entire flow to complete.",
                        "default": 900,
                        "position": 3,
                        "type": "integer"
                    },
                    "poll_frequency_seconds": {
                        "title": "poll_frequency_seconds",
                        "description": "Number of seconds to wait in between checks for\nrun completion.",
                        "default": 10,
                        "position": 4,
                        "type": "integer"
                    }
                },
                "required": [
                    "multi_task_jobs_runs_id",
                    "databricks_credentials"
                ],
                "definitions": {
                    "DatabricksCredentials": {
                        "title": "DatabricksCredentials",
                        "description": "Block used to manage Databricks authentication.",
                        "type": "object",
                        "properties": {
                            "databricks_instance": {
                                "title": "Databricks Instance",
                                "description": "Databricks instance used in formatting the endpoint URL.",
                                "type": "string"
                            },
                            "token": {
                                "title": "Token",
                                "description": "The token to authenticate with Databricks.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "client_kwargs": {
                                "title": "Client Kwargs",
                                "description": "Additional keyword arguments to pass to AsyncClient.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "databricks_instance",
                            "token"
                        ],
                        "block_type_slug": "databricks-credentials",
                        "secret_fields": [
                            "token"
                        ],
                        "block_schema_references": {}
                    }
                }
            },
            "path_containing_flow": "prefect_databricks/flows.py",
            "repo_url": "https://github.com/PrefectHQ/prefect-databricks",
            "slug": "jobs_runs_wait_for_completion"
        }
    }
}