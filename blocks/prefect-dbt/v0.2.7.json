{
  "prefect-dbt": {
    "block_types": {
      "dbt-cli-bigquery-target-configs": {
        "name": "dbt CLI BigQuery Target Configs",
        "slug": "dbt-cli-bigquery-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": null,
        "description": "dbt CLI target configs containing credentials and settings, specific to BigQuery.",
        "code_example": "Load stored BigQueryTargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import BigQueryTargetConfigs\n\nbigquery_target_configs = BigQueryTargetConfigs.load(\"BLOCK_NAME\")\n```\n\nInstantiate BigQueryTargetConfigs with service account file.\n```python\nfrom prefect_dbt.cli.configs import BigQueryTargetConfigs\nfrom prefect_gcp.credentials import GcpCredentials\n\ncredentials = GcpCredentials(service_account_file=\"~/.secrets/gcp\")\ntarget_configs = BigQueryTargetConfigs(\n    schema=\"schema\",\n    project=\"project\",\n    credentials=credentials,\n)\n```\n\nInstantiate BigQueryTargetConfigs with service account info.\n```python\nimport json\nfrom prefect_dbt.cli.configs import BigQueryTargetConfigs\nfrom prefect_gcp.credentials import GcpCredentials\n\ncredentials = GcpCredentials(\n    service_account_info=json.dumps({\n        \"type\": \"service_account\",\n        \"project_id\": \"project_id\",\n        \"private_key_id\": \"private_key_id\",\n        \"private_key\": \"private_key\",\n        \"client_email\": \"client_email\",\n        \"client_id\": \"client_id\",\n        \"auth_uri\": \"auth_uri\",\n        \"token_uri\": \"token_uri\",\n        \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\",\n        \"client_x509_cert_url\": \"client_x509_cert_url\"\n    })\n)\ntarget_configs = BigQueryTargetConfigs(\n    schema=\"schema\",\n    project=\"project\",\n    credentials=credentials,\n)\n```",
        "block_schema": {
          "checksum": "sha256:d243e1feeefac3ba778d1aff1daa26613e54878a4f977a28fe8f1d672db5ba65",
          "fields": {
            "title": "BigQueryTargetConfigs",
            "description": "dbt CLI target configs containing credentials and settings, specific to BigQuery.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "bigquery",
                "enum": [
                  "bigquery"
                ],
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "default": 4,
                "type": "integer"
              },
              "project": {
                "title": "Project",
                "type": "string"
              },
              "credentials": {
                "$ref": "#/definitions/GcpCredentials"
              }
            },
            "required": [
              "schema",
              "credentials"
            ],
            "block_type_slug": "dbt-cli-bigquery-target-configs",
            "secret_fields": [
              "credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.2.7"
        }
      },
      "dbt-cli-profile": {
        "name": "dbt CLI Profile",
        "slug": "dbt-cli-profile",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": null,
        "description": "Profile for use across dbt CLI tasks and flows.",
        "code_example": "Load stored dbt CLI profile:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\ndbt_cli_profile = DbtCliProfile.load(\"BLOCK_NAME\").get_profile()\n```\n\nGet a dbt Snowflake profile from DbtCliProfile by using SnowflakeTargetConfigs:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\nfrom prefect_snowflake.credentials import SnowflakeCredentials\nfrom prefect_snowflake.database import SnowflakeConnector\n\ncredentials = SnowflakeCredentials(\n    user=\"user\",\n    password=\"password\",\n    account=\"account.region.aws\",\n    role=\"role\",\n)\nconnector = SnowflakeConnector(\n    schema=\"public\",\n    database=\"database\",\n    warehouse=\"warehouse\",\n    credentials=credentials,\n)\ntarget_configs = SnowflakeTargetConfigs(\n    connector=connector\n)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\nprofile = dbt_cli_profile.get_profile()\n```\n\nGet a dbt Redshift profile from DbtCliProfile by using generic TargetConfigs:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\nfrom prefect_dbt.cli.configs import GlobalConfigs, TargetConfigs\n\ntarget_configs_extras = dict(\n    host=\"hostname.region.redshift.amazonaws.com\",\n    user=\"username\",\n    password=\"password1\",\n    port=5439,\n    dbname=\"analytics\",\n)\ntarget_configs = TargetConfigs(\n    type=\"redshift\",\n    schema=\"schema\",\n    threads=4,\n    extras=target_configs_extras\n)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\nprofile = dbt_cli_profile.get_profile()\n```",
        "block_schema": {
          "checksum": "sha256:bd0025fe2c7f1b2596c414a359bd0d72e8d9034cadce43c99535e5f9eb6aabda",
          "fields": {
            "title": "DbtCliProfile",
            "description": "Profile for use across dbt CLI tasks and flows.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "target": {
                "title": "Target",
                "type": "string"
              },
              "target_configs": {
                "$ref": "#/definitions/TargetConfigs"
              },
              "global_configs": {
                "$ref": "#/definitions/GlobalConfigs"
              }
            },
            "required": [
              "name",
              "target",
              "target_configs"
            ],
            "block_type_slug": "dbt-cli-profile",
            "secret_fields": [],
            "block_schema_references": {
              "target_configs": {
                "block_type_slug": "dbt-cli-target-configs",
                "block_schema_checksum": "sha256:ca3db7fedd6f0003c96690056f7add371dfc846f3d6cda3186328660f02474f0"
              },
              "global_configs": {
                "block_type_slug": "dbt-cli-global-configs",
                "block_schema_checksum": "sha256:f23fea693fd48fcc832fb24ac967ce035eb45f53be02c54021f0365965e331b9"
              }
            },
            "definitions": {
              "TargetConfigs": {
                "title": "TargetConfigs",
                "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "type": "object"
                  },
                  "type": {
                    "title": "Type",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "default": 4,
                    "type": "integer"
                  }
                },
                "required": [
                  "type",
                  "schema"
                ],
                "block_type_slug": "dbt-cli-target-configs",
                "secret_fields": [],
                "block_schema_references": {}
              },
              "GlobalConfigs": {
                "title": "GlobalConfigs",
                "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "type": "object"
                  },
                  "send_anonymous_usage_stats": {
                    "title": "Send Anonymous Usage Stats",
                    "type": "boolean"
                  },
                  "use_colors": {
                    "title": "Use Colors",
                    "type": "boolean"
                  },
                  "partial_parse": {
                    "title": "Partial Parse",
                    "type": "boolean"
                  },
                  "printer_width": {
                    "title": "Printer Width",
                    "type": "integer"
                  },
                  "write_json": {
                    "title": "Write Json",
                    "type": "boolean"
                  },
                  "warn_error": {
                    "title": "Warn Error",
                    "type": "boolean"
                  },
                  "log_format": {
                    "title": "Log Format",
                    "type": "boolean"
                  },
                  "debug": {
                    "title": "Debug",
                    "type": "boolean"
                  },
                  "version_check": {
                    "title": "Version Check",
                    "type": "boolean"
                  },
                  "fail_fast": {
                    "title": "Fail Fast",
                    "type": "boolean"
                  },
                  "use_experimental_parser": {
                    "title": "Use Experimental Parser",
                    "type": "boolean"
                  },
                  "static_parser": {
                    "title": "Static Parser",
                    "type": "boolean"
                  }
                },
                "block_type_slug": "dbt-cli-global-configs",
                "secret_fields": [],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.2.7"
        }
      },
      "dbt-cloud-credentials": {
        "name": "dbt Cloud Credentials",
        "slug": "dbt-cloud-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": null,
        "description": "Credentials block for credential use across dbt Cloud tasks and flows.",
        "code_example": "Load stored dbt Cloud credentials:\n```python\nfrom prefect_dbt.cloud import DbtCloudCredentials\n\ndbt_cloud_credentials = DbtCloudCredentials.load(\"BLOCK_NAME\")\n```\n\nUse DbtCloudCredentials instance to trigger a job run:\n```python\nfrom prefect_dbt.cloud import DbtCloudCredentials\n\ncredentials = DbtCloudCredentials(api_key=\"my_api_key\", account_id=123456789)\n\nasync with dbt_cloud_credentials.get_administrative_client() as client:\n    client.trigger_job_run(job_id=1)\n```\n\nLoad saved dbt Cloud credentials within a flow:\n```python\nfrom prefect import flow\n\nfrom prefect_dbt.cloud import DbtCloudCredentials\nfrom prefect_dbt.cloud.jobs import trigger_dbt_cloud_job_run\n\n\n@flow\ndef trigger_dbt_cloud_job_run_flow():\n    credentials = DbtCloudCredentials.load(\"my-dbt-credentials\")\n    trigger_dbt_cloud_job_run(dbt_cloud_credentials=credentials, job_id=1)\n\ntrigger_dbt_cloud_job_run_flow()\n```",
        "block_schema": {
          "checksum": "sha256:0e1b2e94e09041e7d732822354503e87b99ddb31422d9d2c83c671be249aa231",
          "fields": {
            "title": "DbtCloudCredentials",
            "description": "Credentials block for credential use across dbt Cloud tasks and flows.",
            "type": "object",
            "properties": {
              "api_key": {
                "title": "API Key",
                "description": "A dbt Cloud API key to use for authentication.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "account_id": {
                "title": "Account ID",
                "description": "The ID of your dbt Cloud account.",
                "type": "integer"
              },
              "domain": {
                "title": "Domain",
                "description": "The base domain of your dbt Cloud instance.",
                "default": "cloud.getdbt.com",
                "type": "string"
              }
            },
            "required": [
              "api_key",
              "account_id"
            ],
            "block_type_slug": "dbt-cloud-credentials",
            "secret_fields": [
              "api_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.7"
        }
      },
      "dbt-cli-global-configs": {
        "name": "dbt CLI Global Configs",
        "slug": "dbt-cli-global-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": null,
        "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
        "code_example": "Load stored GlobalConfigs:\n```python\nfrom prefect_dbt.cli.configs import GlobalConfigs\n\ndbt_cli_global_configs = GlobalConfigs.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f23fea693fd48fcc832fb24ac967ce035eb45f53be02c54021f0365965e331b9",
          "fields": {
            "title": "GlobalConfigs",
            "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "type": "object"
              },
              "send_anonymous_usage_stats": {
                "title": "Send Anonymous Usage Stats",
                "type": "boolean"
              },
              "use_colors": {
                "title": "Use Colors",
                "type": "boolean"
              },
              "partial_parse": {
                "title": "Partial Parse",
                "type": "boolean"
              },
              "printer_width": {
                "title": "Printer Width",
                "type": "integer"
              },
              "write_json": {
                "title": "Write Json",
                "type": "boolean"
              },
              "warn_error": {
                "title": "Warn Error",
                "type": "boolean"
              },
              "log_format": {
                "title": "Log Format",
                "type": "boolean"
              },
              "debug": {
                "title": "Debug",
                "type": "boolean"
              },
              "version_check": {
                "title": "Version Check",
                "type": "boolean"
              },
              "fail_fast": {
                "title": "Fail Fast",
                "type": "boolean"
              },
              "use_experimental_parser": {
                "title": "Use Experimental Parser",
                "type": "boolean"
              },
              "static_parser": {
                "title": "Static Parser",
                "type": "boolean"
              }
            },
            "block_type_slug": "dbt-cli-global-configs",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.7"
        }
      },
      "dbt-cli-postgres-target-configs": {
        "name": "dbt CLI Postgres Target Configs",
        "slug": "dbt-cli-postgres-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": null,
        "description": "dbt CLI target configs containing credentials and settings specific to Postgres.",
        "code_example": "Load stored PostgresTargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import PostgresTargetConfigs\n\npostgres_target_configs = PostgresTargetConfigs.load(\"BLOCK_NAME\")\n```\n\nInstantiate PostgresTargetConfigs with DatabaseCredentials.\n```python\nfrom prefect_dbt.cli.configs import PostgresTargetConfigs\nfrom prefect_sqlalchemy import DatabaseCredentials, SyncDriver\n\ncredentials = DatabaseCredentials(\n    driver=SyncDriver.POSTGRESQL_PSYCOPG2,\n    username=\"prefect\",\n    password=\"prefect_password\",\n    database=\"postgres\",\n    host=\"host\",\n    port=8080\n)\ntarget_configs = PostgresTargetConfigs(credentials=credentials, schema=\"schema\")\n```",
        "block_schema": {
          "checksum": "sha256:0e9a095a1023ef15cb1d17b7ccd999d4c7a2fbe6b78ff5cf2d64057f4fb4d77a",
          "fields": {
            "title": "PostgresTargetConfigs",
            "description": "dbt CLI target configs containing credentials and settings specific to Postgres.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "postgres",
                "enum": [
                  "postgres"
                ],
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "default": 4,
                "type": "integer"
              },
              "credentials": {
                "$ref": "#/definitions/DatabaseCredentials"
              }
            },
            "required": [
              "schema",
              "credentials"
            ],
            "block_type_slug": "dbt-cli-postgres-target-configs",
            "secret_fields": [
              "credentials.password"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "database-credentials",
                "block_schema_checksum": "sha256:a026c06b03d98a6f03031e888381de2144d6f1082850a09672f909cd5cb84d51"
              }
            },
            "definitions": {
              "AsyncDriver": {
                "title": "AsyncDriver",
                "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
                "enum": [
                  "postgresql+asyncpg",
                  "sqlite+aiosqlite",
                  "mysql+asyncmy",
                  "mysql+aiomysql"
                ]
              },
              "SyncDriver": {
                "title": "SyncDriver",
                "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
                "enum": [
                  "postgresql+psycopg2",
                  "postgresql+pg8000",
                  "postgresql+psycopg2cffi",
                  "postgresql+pypostgresql",
                  "postgresql+pygresql",
                  "mysql+mysqldb",
                  "mysql+pymysql",
                  "mysql+mysqlconnector",
                  "mysql+cymysql",
                  "mysql+oursql",
                  "mysql+pyodbc",
                  "sqlite+pysqlite",
                  "sqlite+pysqlcipher",
                  "oracle+cx_oracle",
                  "mssql+pyodbc",
                  "mssql+mxodbc",
                  "mssql+pymssql"
                ]
              },
              "DatabaseCredentials": {
                "title": "DatabaseCredentials",
                "description": "Block used to manage authentication with a database.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "username": {
                    "title": "Username",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "database": {
                    "title": "Database",
                    "type": "string"
                  },
                  "host": {
                    "title": "Host",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "title": "Url",
                    "minLength": 1,
                    "maxLength": 65536,
                    "format": "uri",
                    "type": "string"
                  },
                  "connect_args": {
                    "title": "Connect Args",
                    "type": "object"
                  }
                },
                "block_type_slug": "database-credentials",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.2.7"
        }
      },
      "dbt-cli-snowflake-target-configs": {
        "name": "dbt CLI Snowflake Target Configs",
        "slug": "dbt-cli-snowflake-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": null,
        "description": "Target configs contain credentials and\nsettings, specific to Snowflake.\nTo find valid keys, head to the [Snowflake Profile](\nhttps://docs.getdbt.com/reference/warehouse-profiles/snowflake-profile)\npage.",
        "code_example": "Load stored SnowflakeTargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\n\nsnowflake_target_configs = SnowflakeTargetConfigs.load(\"BLOCK_NAME\")\n```\n\nInstantiate SnowflakeTargetConfigs.\n```python\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\nfrom prefect_snowflake.credentials import SnowflakeCredentials\nfrom prefect_snowflake.database import SnowflakeConnector\n\ncredentials = SnowflakeCredentials(\n    user=\"user\",\n    password=\"password\",\n    account=\"account.region.aws\",\n    role=\"role\",\n)\nconnector = SnowflakeConnector(\n    schema=\"public\",\n    database=\"database\",\n    warehouse=\"warehouse\",\n    credentials=credentials,\n)\ntarget_configs = SnowflakeTargetConfigs(\n    connector=connector\n)\n```",
        "block_schema": {
          "checksum": "sha256:51cd03aa003609949499f17cdd17dfec1b7e50b25db7c9c2ca5837432daa6fe3",
          "fields": {
            "title": "SnowflakeTargetConfigs",
            "description": "Target configs contain credentials and\nsettings, specific to Snowflake.\nTo find valid keys, head to the [Snowflake Profile](\nhttps://docs.getdbt.com/reference/warehouse-profiles/snowflake-profile)\npage.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "snowflake",
                "enum": [
                  "snowflake"
                ],
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "default": 4,
                "type": "integer"
              },
              "connector": {
                "$ref": "#/definitions/SnowflakeConnector"
              }
            },
            "required": [
              "connector"
            ],
            "block_type_slug": "dbt-cli-snowflake-target-configs",
            "secret_fields": [
              "connector.credentials.password",
              "connector.credentials.private_key",
              "connector.credentials.private_key_passphrase",
              "connector.credentials.token"
            ],
            "block_schema_references": {
              "connector": {
                "block_type_slug": "snowflake-connector",
                "block_schema_checksum": "sha256:dd0d36d69bbe0d44870fd754f3c00754e37e3f52209590083eaee4c585ce0bd0"
              }
            },
            "definitions": {
              "SnowflakeCredentials": {
                "title": "SnowflakeCredentials",
                "description": "Block used to manage authentication with Snowflake.",
                "type": "object",
                "properties": {
                  "account": {
                    "title": "Account",
                    "description": "The snowflake account name.",
                    "example": "nh12345.us-east-2.aws",
                    "type": "string"
                  },
                  "user": {
                    "title": "User",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key": {
                    "title": "Private Key",
                    "description": "The PEM used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key_path": {
                    "title": "Private Key Path",
                    "description": "The path to the private key.",
                    "type": "string",
                    "format": "path"
                  },
                  "private_key_passphrase": {
                    "title": "Private Key Passphrase",
                    "description": "The password to use for the private key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "authenticator": {
                    "title": "Authenticator",
                    "description": "The type of authenticator to use for initializing connection.",
                    "default": "snowflake",
                    "enum": [
                      "snowflake",
                      "snowflake_jwt",
                      "externalbrowser",
                      "okta_endpoint",
                      "oauth",
                      "username_password_mfa"
                    ],
                    "type": "string"
                  },
                  "token": {
                    "title": "Token",
                    "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "endpoint": {
                    "title": "Endpoint",
                    "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                    "type": "string"
                  },
                  "role": {
                    "title": "Role",
                    "description": "The name of the default role to use.",
                    "type": "string"
                  },
                  "autocommit": {
                    "title": "Autocommit",
                    "description": "Whether to automatically commit.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "account",
                  "user"
                ],
                "block_type_slug": "snowflake-credentials",
                "secret_fields": [
                  "password",
                  "private_key",
                  "private_key_passphrase",
                  "token"
                ],
                "block_schema_references": {}
              },
              "SnowflakeConnector": {
                "title": "SnowflakeConnector",
                "description": "Perform data operations against a Snowflake database.",
                "type": "object",
                "properties": {
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to authenticate with Snowflake.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/SnowflakeCredentials"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the default database to use.",
                    "type": "string"
                  },
                  "warehouse": {
                    "title": "Warehouse",
                    "description": "The name of the default warehouse to use.",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The name of the default schema to use.",
                    "type": "string"
                  },
                  "fetch_size": {
                    "title": "Fetch Size",
                    "description": "The default number of rows to fetch at a time.",
                    "default": 1,
                    "type": "integer"
                  },
                  "poll_frequency_s": {
                    "title": "Poll Frequency [seconds]",
                    "description": "The number of seconds between checking query status for long running queries.",
                    "default": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "credentials",
                  "database",
                  "warehouse",
                  "schema"
                ],
                "block_type_slug": "snowflake-connector",
                "secret_fields": [
                  "credentials.password",
                  "credentials.private_key",
                  "credentials.private_key_passphrase",
                  "credentials.token"
                ],
                "block_schema_references": {
                  "credentials": {
                    "block_type_slug": "snowflake-credentials",
                    "block_schema_checksum": "sha256:b24edfb413527c951cb2a8b4b4c16aec096523f871d941889e29ac2e6e92e036"
                  }
                }
              }
            }
          },
          "capabilities": [],
          "version": "0.2.7"
        }
      },
      "dbt-cli-target-configs": {
        "name": "dbt CLI Target Configs",
        "slug": "dbt-cli-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": null,
        "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
        "code_example": "Load stored TargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import TargetConfigs\n\ndbt_cli_target_configs = TargetConfigs.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:ca3db7fedd6f0003c96690056f7add371dfc846f3d6cda3186328660f02474f0",
          "fields": {
            "title": "TargetConfigs",
            "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "default": 4,
                "type": "integer"
              }
            },
            "required": [
              "type",
              "schema"
            ],
            "block_type_slug": "dbt-cli-target-configs",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.7"
        }
      }
    }
  }
}