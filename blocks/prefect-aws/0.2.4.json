{
  "block_types": {
    "aws-credentials": {
      "name": "AWS Credentials",
      "slug": "aws-credentials",
      "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
      "documentation_url": null,
      "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
      "code_example": "Load stored AWS credentials:\n```python\nfrom prefect_aws import AwsCredentials\n\naws_credentials_block = AwsCredentials.load(\"BLOCK_NAME\")\n```",
      "block_schema": {
        "checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe",
        "fields": {
          "title": "AwsCredentials",
          "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
          "type": "object",
          "properties": {
            "aws_access_key_id": {
              "title": "AWS Access Key ID",
              "description": "A specific AWS access key ID.",
              "type": "string"
            },
            "aws_secret_access_key": {
              "title": "AWS Access Key Secret",
              "description": "A specific AWS secret access key.",
              "type": "string",
              "writeOnly": true,
              "format": "password"
            },
            "aws_session_token": {
              "title": "AWS Session Token",
              "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
              "type": "string"
            },
            "profile_name": {
              "title": "Profile Name",
              "description": "The profile to use when creating your session.",
              "type": "string"
            },
            "region_name": {
              "title": "Region Name",
              "description": "The AWS Region where you want to create new connections.",
              "type": "string"
            },
            "aws_client_parameters": {
              "title": "AWS Client Parameters",
              "description": "Extra parameters to initialize the Client.",
              "allOf": [
                {
                  "$ref": "#/definitions/AwsClientParameters"
                }
              ]
            }
          },
          "block_type_slug": "aws-credentials",
          "secret_fields": [
            "aws_secret_access_key"
          ],
          "block_schema_references": {},
          "definitions": {
            "AwsClientParameters": {
              "title": "AwsClientParameters",
              "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
              "type": "object",
              "properties": {
                "api_version": {
                  "title": "API Version",
                  "description": "The API version to use.",
                  "type": "string"
                },
                "use_ssl": {
                  "title": "Use SSL",
                  "description": "Whether or not to use SSL.",
                  "default": true,
                  "type": "boolean"
                },
                "verify": {
                  "title": "Verify",
                  "description": "Whether or not to verify SSL certificates.",
                  "default": true,
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "string",
                      "format": "file-path"
                    }
                  ]
                },
                "verify_cert_path": {
                  "title": "Certificate Authority Bundle File Path",
                  "description": "Path to the CA cert bundle to use.",
                  "format": "file-path",
                  "type": "string"
                },
                "endpoint_url": {
                  "title": "Endpoint URL",
                  "description": "The complete URL to use for the constructed client.",
                  "type": "string"
                },
                "config": {
                  "title": "Botocore Config",
                  "description": "Advanced configuration for Botocore clients.",
                  "type": "object"
                }
              }
            }
          }
        },
        "capabilities": [],
        "version": "0.2.4"
      }
    },
    "ecs-task": {
      "name": "ECS Task",
      "slug": "ecs-task",
      "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
      "documentation_url": null,
      "description": "Run a command as an ECS task.",
      "code_example": "```python\nfrom prefect_aws.ecs import ECSTask\n\necs_task_block = ECSTask.load(\"BLOCK_NAME\")\n```",
      "block_schema": {
        "checksum": "sha256:c86b71920b0e9522c2dd310e6b9da9ff323f49e9a324799502c66f2808efc8cb",
        "fields": {
          "title": "ECSTask",
          "description": "Run a command as an ECS task.",
          "type": "object",
          "properties": {
            "type": {
              "title": "Type",
              "description": "The slug for this task type.",
              "default": "ecs-task",
              "enum": [
                "ecs-task"
              ],
              "type": "string"
            },
            "env": {
              "title": "Environment Variables",
              "description": "Environment variables to provide to the task run. These variables are set on the Prefect container at task runtime. These will not be set on the task definition.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "title": "Labels",
              "description": "Labels applied to the infrastructure for metadata purposes.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "name": {
              "title": "Name",
              "description": "Name applied to the infrastructure for identification.",
              "type": "string"
            },
            "command": {
              "title": "Command",
              "description": "The command to run in the infrastructure.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "aws_credentials": {
              "title": "AWS Credentials",
              "description": "The AWS credentials to use to connect to ECS.",
              "allOf": [
                {
                  "$ref": "#/definitions/AwsCredentials"
                }
              ]
            },
            "task_definition_arn": {
              "title": "Task Definition Arn",
              "description": "An identifier for an existing task definition to use. If fields are set on the `ECSTask` that conflict with the task definition, a new copy will be registered with the required values. Cannot be used with `task_definition`. If not provided, Prefect will generate and register a minimal task definition.",
              "type": "string"
            },
            "task_definition": {
              "title": "Task Definition",
              "description": "An ECS task definition to use. Prefect may set defaults or override fields on this task definition to match other `ECSTask` fields. Cannot be used with `task_definition_arn`. If not provided, Prefect will generate and register a minimal task definition.",
              "type": "object"
            },
            "family": {
              "title": "Family",
              "description": "A family for the task definition. If not provided, it will be inferred from the task definition. If the task definition does not have a family, the name will be generated. When flow and deployment metadata is available, the generated name will include their names. Values for this field will be slugified to match AWS character requirements.",
              "type": "string"
            },
            "image": {
              "title": "Image",
              "description": "The image to use for the Prefect container in the task. If this value is not null, it will override the value in the task definition. This value defaults to a Prefect base image matching your local versions.",
              "type": "string"
            },
            "auto_deregister_task_definition": {
              "title": "Auto Deregister Task Definition",
              "description": "If set, any task definitions that are created by this block will be deregistered. Existing task definitions linked by ARN will never be deregistered. Deregistering a task definition does not remove it from your AWS account, instead it will be marked as INACTIVE.",
              "default": true,
              "type": "boolean"
            },
            "cpu": {
              "title": "CPU",
              "description": "The amount of CPU to provide to the ECS task. Valid amounts are specified in the AWS documentation. If not provided, a default value of 1024 will be used unless present on the task definition.",
              "type": "integer"
            },
            "memory": {
              "title": "Memory",
              "description": "The amount of memory to provide to the ECS task. Valid amounts are specified in the AWS documentation. If not provided, a default value of 2048 will be used unless present on the task definition.",
              "type": "integer"
            },
            "execution_role_arn": {
              "title": "Execution Role ARN",
              "description": "An execution role to use for the task. This controls the permissions of the task when it is launching. If this value is not null, it will override the value in the task definition. An execution role must be provided to capture logs from the container.",
              "type": "string"
            },
            "configure_cloudwatch_logs": {
              "title": "Configure Cloudwatch Logs",
              "description": "If `True`, the Prefect container will be configured to send its output to the AWS CloudWatch logs service. This functionality requires an execution role with logs:CreateLogStream, logs:CreateLogGroup, and logs:PutLogEvents permissions. The default for this field is `False` unless `stream_output` is set.",
              "type": "boolean"
            },
            "cloudwatch_logs_options": {
              "title": "Cloudwatch Logs Options",
              "description": "When `configure_cloudwatch_logs` is enabled, this setting may be used to pass additional options to the CloudWatch logs configuration or override the default options. See the AWS documentation for available options. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html#create_awslogs_logdriver_options.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "stream_output": {
              "title": "Stream Output",
              "description": "If `True`, logs will be streamed from the Prefect container to the local console. Unless you have configured AWS CloudWatch logs manually on your task definition, this requires the same prerequisites outlined in `configure_cloudwatch_logs`.",
              "type": "boolean"
            },
            "launch_type": {
              "title": "Launch Type",
              "description": "The type of ECS task run infrastructure that should be used. Note that 'FARGATE_SPOT' is not a formal ECS launch type, but we will configure the proper capacity provider stategy if set here.",
              "default": "FARGATE",
              "enum": [
                "FARGATE",
                "EC2",
                "EXTERNAL",
                "FARGATE_SPOT"
              ],
              "type": "string"
            },
            "vpc_id": {
              "title": "VPC ID",
              "description": "The AWS VPC to link the task run to. This is only applicable when using the 'awsvpc' network mode for your task. FARGATE tasks require this network  mode, but for EC2 tasks the default network mode is 'bridge'. If using the 'awsvpc' network mode and this field is null, your default VPC will be used. If no default VPC can be found, the task run will fail.",
              "type": "string"
            },
            "cluster": {
              "title": "Cluster",
              "description": "The ECS cluster to run the task in. The ARN or name may be provided. If not provided, the default cluster will be used.",
              "type": "string"
            },
            "task_role_arn": {
              "title": "Task Role ARN",
              "description": "A role to attach to the task run. This controls the permissions of the task while it is running.",
              "type": "string"
            },
            "task_customizations": {
              "title": "Task Customizations",
              "description": "A list of JSON 6902 patches to apply to the task run request.",
              "type": "array",
              "format": "rfc6902",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "task_start_timeout_seconds": {
              "title": "Task Start Timeout Seconds",
              "description": "The amount of time to watch for the start of the ECS task before marking it as failed. The task must enter a RUNNING state to be considered started.",
              "default": 120,
              "type": "integer"
            },
            "task_watch_poll_interval": {
              "title": "Task Watch Poll Interval",
              "description": "The amount of time to wait between AWS API calls while monitoring the state of an ECS task.",
              "default": 5.0,
              "type": "number"
            }
          },
          "block_type_slug": "ecs-task",
          "secret_fields": [
            "aws_credentials.aws_secret_access_key"
          ],
          "block_schema_references": {
            "aws_credentials": {
              "block_type_slug": "aws-credentials",
              "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
            }
          },
          "definitions": {
            "AwsClientParameters": {
              "title": "AwsClientParameters",
              "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
              "type": "object",
              "properties": {
                "api_version": {
                  "title": "API Version",
                  "description": "The API version to use.",
                  "type": "string"
                },
                "use_ssl": {
                  "title": "Use SSL",
                  "description": "Whether or not to use SSL.",
                  "default": true,
                  "type": "boolean"
                },
                "verify": {
                  "title": "Verify",
                  "description": "Whether or not to verify SSL certificates.",
                  "default": true,
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "string",
                      "format": "file-path"
                    }
                  ]
                },
                "verify_cert_path": {
                  "title": "Certificate Authority Bundle File Path",
                  "description": "Path to the CA cert bundle to use.",
                  "format": "file-path",
                  "type": "string"
                },
                "endpoint_url": {
                  "title": "Endpoint URL",
                  "description": "The complete URL to use for the constructed client.",
                  "type": "string"
                },
                "config": {
                  "title": "Botocore Config",
                  "description": "Advanced configuration for Botocore clients.",
                  "type": "object"
                }
              }
            },
            "AwsCredentials": {
              "title": "AwsCredentials",
              "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
              "type": "object",
              "properties": {
                "aws_access_key_id": {
                  "title": "AWS Access Key ID",
                  "description": "A specific AWS access key ID.",
                  "type": "string"
                },
                "aws_secret_access_key": {
                  "title": "AWS Access Key Secret",
                  "description": "A specific AWS secret access key.",
                  "type": "string",
                  "writeOnly": true,
                  "format": "password"
                },
                "aws_session_token": {
                  "title": "AWS Session Token",
                  "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                  "type": "string"
                },
                "profile_name": {
                  "title": "Profile Name",
                  "description": "The profile to use when creating your session.",
                  "type": "string"
                },
                "region_name": {
                  "title": "Region Name",
                  "description": "The AWS Region where you want to create new connections.",
                  "type": "string"
                },
                "aws_client_parameters": {
                  "title": "AWS Client Parameters",
                  "description": "Extra parameters to initialize the Client.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AwsClientParameters"
                    }
                  ]
                }
              },
              "block_type_slug": "aws-credentials",
              "secret_fields": [
                "aws_secret_access_key"
              ],
              "block_schema_references": {}
            }
          }
        },
        "capabilities": [
          "run-infrastructure"
        ],
        "version": "0.2.4"
      }
    },
    "minio-credentials": {
      "name": "MinIO Credentials",
      "slug": "minio-credentials",
      "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/22vXcxsOrVeFrUwHfSoaeT/7607b876eb589a9028c8126e78f4c7b4/imageedit_7_2837870043.png?h=250",
      "documentation_url": null,
      "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
      "code_example": "Load stored MinIO credentials:\n```python\nfrom prefect_aws import MinIOCredentials\n\nminio_credentials_block = MinIOCredentials.load(\"BLOCK_NAME\")\n```",
      "block_schema": {
        "checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb",
        "fields": {
          "title": "MinIOCredentials",
          "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
          "type": "object",
          "properties": {
            "minio_root_user": {
              "title": "Minio Root User",
              "description": "Admin or root user.",
              "type": "string"
            },
            "minio_root_password": {
              "title": "Minio Root Password",
              "description": "Admin or root password.",
              "type": "string",
              "writeOnly": true,
              "format": "password"
            },
            "region_name": {
              "title": "Region Name",
              "description": "The AWS Region where you want to create new connections.",
              "type": "string"
            },
            "aws_client_parameters": {
              "title": "Aws Client Parameters",
              "description": "Extra parameters to initialize the Client.",
              "allOf": [
                {
                  "$ref": "#/definitions/AwsClientParameters"
                }
              ]
            }
          },
          "required": [
            "minio_root_user",
            "minio_root_password"
          ],
          "block_type_slug": "minio-credentials",
          "secret_fields": [
            "minio_root_password"
          ],
          "block_schema_references": {},
          "definitions": {
            "AwsClientParameters": {
              "title": "AwsClientParameters",
              "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
              "type": "object",
              "properties": {
                "api_version": {
                  "title": "API Version",
                  "description": "The API version to use.",
                  "type": "string"
                },
                "use_ssl": {
                  "title": "Use SSL",
                  "description": "Whether or not to use SSL.",
                  "default": true,
                  "type": "boolean"
                },
                "verify": {
                  "title": "Verify",
                  "description": "Whether or not to verify SSL certificates.",
                  "default": true,
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "string",
                      "format": "file-path"
                    }
                  ]
                },
                "verify_cert_path": {
                  "title": "Certificate Authority Bundle File Path",
                  "description": "Path to the CA cert bundle to use.",
                  "format": "file-path",
                  "type": "string"
                },
                "endpoint_url": {
                  "title": "Endpoint URL",
                  "description": "The complete URL to use for the constructed client.",
                  "type": "string"
                },
                "config": {
                  "title": "Botocore Config",
                  "description": "Advanced configuration for Botocore clients.",
                  "type": "object"
                }
              }
            }
          }
        },
        "capabilities": [],
        "version": "0.2.4"
      }
    },
    "s3-bucket": {
      "name": "S3 Bucket",
      "slug": "s3-bucket",
      "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
      "documentation_url": null,
      "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO.",
      "code_example": "```python\nfrom prefect_aws.s3 import S3Bucket\n\ns3_bucket_block = S3Bucket.load(\"BLOCK_NAME\")\n```",
      "block_schema": {
        "checksum": "sha256:6aaadd460a122fd8472dec40920803dbbfe4d408bb9a3716d40aafb1cde6bbb8",
        "fields": {
          "title": "S3Bucket",
          "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO.",
          "type": "object",
          "properties": {
            "bucket_name": {
              "title": "Bucket Name",
              "description": "Name of your bucket.",
              "type": "string"
            },
            "minio_credentials": {
              "title": "Minio Credentials",
              "description": "[DEPRECATED; use the credentials field instead] A block containing your credentials (choose this or AWS Credentials)",
              "allOf": [
                {
                  "$ref": "#/definitions/MinIOCredentials"
                }
              ]
            },
            "aws_credentials": {
              "title": "Aws Credentials",
              "description": "[DEPRECATED; use the credentials field instead] A block containing your credentials (choose this or MinIO Credentials).",
              "allOf": [
                {
                  "$ref": "#/definitions/AwsCredentials"
                }
              ]
            },
            "basepath": {
              "title": "Basepath",
              "description": "[DEPRECATED; use the bucket_folder field instead] A default location to write to and read from in the S3 bucket. Defaults to the root of the bucket.",
              "default": "",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "path"
                }
              ]
            },
            "endpoint_url": {
              "title": "Endpoint Url",
              "description": "[DEPRECATED; pass AwsClientParameters in AwsCredentials instead] URL endpoint to use for S3 compatible storage. Defaults to standard AWS S3 endpoint.",
              "type": "string"
            },
            "credentials": {
              "title": "Credentials",
              "description": "A block containing your credentials to AWS or MinIO.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AwsCredentials"
                },
                {
                  "$ref": "#/definitions/MinIOCredentials"
                }
              ]
            },
            "bucket_folder": {
              "title": "Bucket Folder",
              "description": "A default path to a folder within the S3 bucket to use for reading and writing objects.",
              "default": "",
              "type": "string"
            }
          },
          "required": [
            "bucket_name"
          ],
          "block_type_slug": "s3-bucket",
          "secret_fields": [
            "minio_credentials.minio_root_password",
            "aws_credentials.aws_secret_access_key",
            "credentials.aws_secret_access_key",
            "credentials.minio_root_password"
          ],
          "block_schema_references": {
            "minio_credentials": {
              "block_type_slug": "minio-credentials",
              "block_schema_checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb"
            },
            "aws_credentials": {
              "block_type_slug": "aws-credentials",
              "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
            },
            "credentials": [
              {
                "block_type_slug": "aws-credentials",
                "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
              },
              {
                "block_type_slug": "minio-credentials",
                "block_schema_checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb"
              }
            ]
          },
          "definitions": {
            "AwsClientParameters": {
              "title": "AwsClientParameters",
              "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
              "type": "object",
              "properties": {
                "api_version": {
                  "title": "API Version",
                  "description": "The API version to use.",
                  "type": "string"
                },
                "use_ssl": {
                  "title": "Use SSL",
                  "description": "Whether or not to use SSL.",
                  "default": true,
                  "type": "boolean"
                },
                "verify": {
                  "title": "Verify",
                  "description": "Whether or not to verify SSL certificates.",
                  "default": true,
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "string",
                      "format": "file-path"
                    }
                  ]
                },
                "verify_cert_path": {
                  "title": "Certificate Authority Bundle File Path",
                  "description": "Path to the CA cert bundle to use.",
                  "format": "file-path",
                  "type": "string"
                },
                "endpoint_url": {
                  "title": "Endpoint URL",
                  "description": "The complete URL to use for the constructed client.",
                  "type": "string"
                },
                "config": {
                  "title": "Botocore Config",
                  "description": "Advanced configuration for Botocore clients.",
                  "type": "object"
                }
              }
            },
            "MinIOCredentials": {
              "title": "MinIOCredentials",
              "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
              "type": "object",
              "properties": {
                "minio_root_user": {
                  "title": "Minio Root User",
                  "description": "Admin or root user.",
                  "type": "string"
                },
                "minio_root_password": {
                  "title": "Minio Root Password",
                  "description": "Admin or root password.",
                  "type": "string",
                  "writeOnly": true,
                  "format": "password"
                },
                "region_name": {
                  "title": "Region Name",
                  "description": "The AWS Region where you want to create new connections.",
                  "type": "string"
                },
                "aws_client_parameters": {
                  "title": "Aws Client Parameters",
                  "description": "Extra parameters to initialize the Client.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AwsClientParameters"
                    }
                  ]
                }
              },
              "required": [
                "minio_root_user",
                "minio_root_password"
              ],
              "block_type_slug": "minio-credentials",
              "secret_fields": [
                "minio_root_password"
              ],
              "block_schema_references": {}
            },
            "AwsCredentials": {
              "title": "AwsCredentials",
              "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
              "type": "object",
              "properties": {
                "aws_access_key_id": {
                  "title": "AWS Access Key ID",
                  "description": "A specific AWS access key ID.",
                  "type": "string"
                },
                "aws_secret_access_key": {
                  "title": "AWS Access Key Secret",
                  "description": "A specific AWS secret access key.",
                  "type": "string",
                  "writeOnly": true,
                  "format": "password"
                },
                "aws_session_token": {
                  "title": "AWS Session Token",
                  "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                  "type": "string"
                },
                "profile_name": {
                  "title": "Profile Name",
                  "description": "The profile to use when creating your session.",
                  "type": "string"
                },
                "region_name": {
                  "title": "Region Name",
                  "description": "The AWS Region where you want to create new connections.",
                  "type": "string"
                },
                "aws_client_parameters": {
                  "title": "AWS Client Parameters",
                  "description": "Extra parameters to initialize the Client.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AwsClientParameters"
                    }
                  ]
                }
              },
              "block_type_slug": "aws-credentials",
              "secret_fields": [
                "aws_secret_access_key"
              ],
              "block_schema_references": {}
            }
          }
        },
        "capabilities": [
          "get-directory",
          "put-directory",
          "read-path",
          "write-path"
        ],
        "version": "0.2.4"
      }
    }
  }
}