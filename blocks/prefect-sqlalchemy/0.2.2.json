{
  "block_types": {
    "database-credentials": {
      "name": "Database Credentials",
      "slug": "database-credentials",
      "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3xLant5G70S4vJpmdWCYmr/8fdb19f15b97c3a07c3af3efde4d28fb/download.svg.png?h=250",
      "documentation_url": null,
      "description": "Block used to manage authentication with a database.",
      "code_example": "Load stored database credentials:\n```python\nfrom prefect_sqlalchemy import DatabaseCredentials\ndatabase_block = DatabaseCredentials.load(\"BLOCK_NAME\")\n```",
      "block_schema": {
        "checksum": "sha256:a026c06b03d98a6f03031e888381de2144d6f1082850a09672f909cd5cb84d51",
        "fields": {
          "title": "DatabaseCredentials",
          "description": "Block used to manage authentication with a database.",
          "type": "object",
          "properties": {
            "driver": {
              "title": "Driver",
              "anyOf": [
                {
                  "$ref": "#/definitions/AsyncDriver"
                },
                {
                  "$ref": "#/definitions/SyncDriver"
                },
                {
                  "type": "string"
                }
              ]
            },
            "username": {
              "title": "Username",
              "type": "string"
            },
            "password": {
              "title": "Password",
              "type": "string",
              "writeOnly": true,
              "format": "password"
            },
            "database": {
              "title": "Database",
              "type": "string"
            },
            "host": {
              "title": "Host",
              "type": "string"
            },
            "port": {
              "title": "Port",
              "type": "string"
            },
            "query": {
              "title": "Query",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "url": {
              "title": "Url",
              "minLength": 1,
              "maxLength": 65536,
              "format": "uri",
              "type": "string"
            },
            "connect_args": {
              "title": "Connect Args",
              "type": "object"
            }
          },
          "block_type_slug": "database-credentials",
          "secret_fields": [
            "password"
          ],
          "block_schema_references": {},
          "definitions": {
            "AsyncDriver": {
              "title": "AsyncDriver",
              "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
              "enum": [
                "postgresql+asyncpg",
                "sqlite+aiosqlite",
                "mysql+asyncmy",
                "mysql+aiomysql"
              ]
            },
            "SyncDriver": {
              "title": "SyncDriver",
              "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
              "enum": [
                "postgresql+psycopg2",
                "postgresql+pg8000",
                "postgresql+psycopg2cffi",
                "postgresql+pypostgresql",
                "postgresql+pygresql",
                "mysql+mysqldb",
                "mysql+pymysql",
                "mysql+mysqlconnector",
                "mysql+cymysql",
                "mysql+oursql",
                "mysql+pyodbc",
                "sqlite+pysqlite",
                "sqlite+pysqlcipher",
                "oracle+cx_oracle",
                "mssql+pyodbc",
                "mssql+mxodbc",
                "mssql+pymssql"
              ]
            }
          }
        },
        "capabilities": [],
        "version": "0.2.2"
      }
    },
    "sqlalchemy-connector": {
      "name": "SQLAlchemy Connector",
      "slug": "sqlalchemy-connector",
      "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/37TOcxeP9kfXffpKVRAHiJ/0f359112e79d0bd3dfe38c73c4fc6363/sqlalchemy.png?h=250",
      "documentation_url": null,
      "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
      "code_example": "Load stored database credentials and use in context manager:\n```python\nfrom prefect_sqlalchemy import SqlAlchemyConnector\n\nwith SqlAlchemyConnector.load(\"BLOCK_NAME\") as database_block:\n    ...\n```\n\nCreate table named customers and insert values; then fetch the first 10 rows.\n```python\nfrom prefect_sqlalchemy import (\n    SqlAlchemyConnector, SyncDriver, ConnectionComponents\n)\n\nwith SqlAlchemyConnector(\n    connection_info=ConnectionComponents(\n        driver=SyncDriver.SQLITE_PYSQLITE,\n        database=\"prefect.db\"\n    )\n) as database:\n    database.execute(\n        \"CREATE TABLE IF NOT EXISTS customers (name varchar, address varchar);\",\n    )\n    for i in range(1, 42):\n        database.execute(\n            \"INSERT INTO customers (name, address) VALUES (:name, :address);\",\n            parameters={\"name\": \"Marvin\", \"address\": f\"Highway {i}\"},\n        )\n    results = database.fetch_many(\n        \"SELECT * FROM customers WHERE name = :name;\",\n        parameters={\"name\": \"Marvin\"},\n        size=10\n    )\nprint(results)\n```",
      "block_schema": {
        "checksum": "sha256:75f2e5759668c3d072006b6028e93d1e14ffba526d12368b4746e96a0c64c297",
        "fields": {
          "title": "SqlAlchemyConnector",
          "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
          "type": "object",
          "properties": {
            "connection_info": {
              "title": "Connection Info",
              "description": "SQLAlchemy URL to create the engine; either create from components or create from a string.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ConnectionComponents"
                },
                {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 65536,
                  "format": "uri"
                }
              ]
            },
            "connect_args": {
              "title": "Additional Connection Arguments",
              "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
              "type": "object"
            },
            "fetch_size": {
              "title": "Fetch Size",
              "description": "The number of rows to fetch at a time.",
              "default": 1,
              "type": "integer"
            }
          },
          "required": [
            "connection_info"
          ],
          "block_type_slug": "sqlalchemy-connector",
          "secret_fields": [
            "connection_info.password"
          ],
          "block_schema_references": {},
          "definitions": {
            "AsyncDriver": {
              "title": "AsyncDriver",
              "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
              "enum": [
                "postgresql+asyncpg",
                "sqlite+aiosqlite",
                "mysql+asyncmy",
                "mysql+aiomysql"
              ]
            },
            "SyncDriver": {
              "title": "SyncDriver",
              "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
              "enum": [
                "postgresql+psycopg2",
                "postgresql+pg8000",
                "postgresql+psycopg2cffi",
                "postgresql+pypostgresql",
                "postgresql+pygresql",
                "mysql+mysqldb",
                "mysql+pymysql",
                "mysql+mysqlconnector",
                "mysql+cymysql",
                "mysql+oursql",
                "mysql+pyodbc",
                "sqlite+pysqlite",
                "sqlite+pysqlcipher",
                "oracle+cx_oracle",
                "mssql+pyodbc",
                "mssql+mxodbc",
                "mssql+pymssql"
              ]
            },
            "ConnectionComponents": {
              "title": "ConnectionComponents",
              "description": "Parameters to use to create a SQLAlchemy engine URL.",
              "type": "object",
              "properties": {
                "driver": {
                  "title": "Driver",
                  "description": "The driver name to use.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AsyncDriver"
                    },
                    {
                      "$ref": "#/definitions/SyncDriver"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "database": {
                  "title": "Database",
                  "description": "The name of the database to use.",
                  "type": "string"
                },
                "username": {
                  "title": "Username",
                  "description": "The user name used to authenticate.",
                  "type": "string"
                },
                "password": {
                  "title": "Password",
                  "description": "The password used to authenticate.",
                  "type": "string",
                  "writeOnly": true,
                  "format": "password"
                },
                "host": {
                  "title": "Host",
                  "description": "The host address of the database.",
                  "type": "string"
                },
                "port": {
                  "title": "Port",
                  "description": "The port to connect to the database.",
                  "type": "string"
                },
                "query": {
                  "title": "Query",
                  "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "driver",
                "database"
              ]
            }
          }
        },
        "capabilities": [],
        "version": "0.2.2"
      }
    }
  }
}