{
    "prefect-airbyte": {
        "run-connection-sync": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-airbyte",
            "description": {
                "summary": "A flow that triggers a sync of an Airbyte connection and waits for it to complete.",
                "returns": "`AirbyteSyncResult`: Model containing metadata for the `AirbyteSync`.",
                "examples": [
                    "Define a flow that runs an Airbyte connection sync:\n```python\nfrom prefect import flow\nfrom prefect_airbyte.server import AirbyteServer\nfrom prefect_airbyte.connections import AirbyteConnection\nfrom prefect_airbyte.flows import run_connection_sync\n\nairbyte_server = AirbyteServer(\n    server_host=\"localhost\",\n    server_port=8000\n)\n\nconnection = AirbyteConnection(\n    airbyte_server=airbyte_server,\n    connection_id=\"<YOUR-AIRBYTE-CONNECTION-UUID>\"\n)\n\n@flow\ndef airbyte_sync_flow():\n    # do some things\n\n    airbyte_sync_result = run_connection_sync(\n        airbyte_connection=connection\n    )\n    print(airbyte_sync_result.records_synced)\n\n    # do some other things, like trigger DBT based on number of new raw records\n```"
                ]
            },
            "documentation_url": "https://prefecthq.github.io/prefect-airbyte/flows/#prefect_airbyte.flows.run_connection_sync",
            "entrypoint": "prefect_airbyte/flows.py:run_connection_sync",
            "install_command": "pip install prefect-airbyte",
            "logo_url": "https://images.ctfassets.net/zscdif0zqppk/6gm7wsC7ANnKYQsm7oiSYz/aac1ad5e054d35d9e24af8d6ed3aed5f/59758427?h=250",
            "name": "run-connection-sync",
            "path_containing_flow": "prefect_airbyte/flows.py"
        }
    },
    "prefect-aws": {},
    "prefect-azure": {},
    "prefect-bitbucket": {},
    "prefect-census": {
        "run-census-sync": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-census",
            "description": {
                "summary": "A flow for triggering a Census sync run and waiting for completion.",
                "returns": "The result of the sync run."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-census/flows/#prefect_census.flows.run_census_sync",
            "entrypoint": "prefect_census/flows.py:run_census_sync",
            "install_command": "pip install prefect-census",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250",
            "name": "run-census-sync",
            "path_containing_flow": "prefect_census/flows.py"
        },
        "Wait for Census sync run": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-census",
            "description": {
                "summary": "Waits for the Census sync run to finish running."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-census/syncs/#prefect_census.syncs.Wait for Census sync run",
            "entrypoint": "prefect_census/syncs.py:wait_census_sync_completion",
            "install_command": "pip install prefect-census",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250",
            "name": "Wait for Census sync run",
            "path_containing_flow": "prefect_census/syncs.py"
        },
        "Trigger Census sync run and wait for completion": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-census",
            "description": {
                "summary": "Triggers a Census sync run and waits for thetriggered run to complete."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-census/syncs/#prefect_census.syncs.Trigger Census sync run and wait for completion",
            "entrypoint": "prefect_census/syncs.py:trigger_census_sync_run_and_wait_for_completion",
            "install_command": "pip install prefect-census",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250",
            "name": "Trigger Census sync run and wait for completion",
            "path_containing_flow": "prefect_census/syncs.py"
        }
    },
    "prefect-dask": {},
    "prefect-databricks": {
        "Submit jobs runs and wait for completion": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-databricks",
            "description": {
                "summary": "Triggers a Databricks jobs runs and waits for the triggered runs to complete."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-databricks/flows/#prefect_databricks.flows.Submit jobs runs and wait for completion",
            "entrypoint": "prefect_databricks/flows.py:jobs_runs_submit_and_wait_for_completion",
            "install_command": "pip install prefect-databricks",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250",
            "name": "Submit jobs runs and wait for completion",
            "path_containing_flow": "prefect_databricks/flows.py"
        },
        "Wait for completion of jobs runs": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-databricks",
            "description": {
                "summary": "Waits for the jobs runs to finish running"
            },
            "documentation_url": "https://prefecthq.github.io/prefect-databricks/flows/#prefect_databricks.flows.Wait for completion of jobs runs",
            "entrypoint": "prefect_databricks/flows.py:jobs_runs_wait_for_completion",
            "install_command": "pip install prefect-databricks",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250",
            "name": "Wait for completion of jobs runs",
            "path_containing_flow": "prefect_databricks/flows.py"
        }
    },
    "prefect-dbt": {
        "Retry subset of dbt Cloud job run and wait for completion": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-dbt",
            "description": {
                "summary": "Retries a subset of dbt Cloud job run, filtered by select statuses, and waits for the triggered retry to complete."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-dbt/cloud/jobs/#prefect_dbt.cloud.jobs.Retry subset of dbt Cloud job run and wait for completion",
            "entrypoint": "prefect_dbt/cloud/jobs.py:retry_dbt_cloud_job_run_subset_and_wait_for_completion",
            "install_command": "pip install prefect-dbt",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
            "name": "Retry subset of dbt Cloud job run and wait for completion",
            "path_containing_flow": "prefect_dbt/cloud/jobs.py"
        },
        "Trigger dbt Cloud job run and wait for completion": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-dbt",
            "description": {
                "summary": "Triggers a dbt Cloud job run and waits for thetriggered run to complete."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-dbt/cloud/jobs/#prefect_dbt.cloud.jobs.Trigger dbt Cloud job run and wait for completion",
            "entrypoint": "prefect_dbt/cloud/jobs.py:trigger_dbt_cloud_job_run_and_wait_for_completion",
            "install_command": "pip install prefect-dbt",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
            "name": "Trigger dbt Cloud job run and wait for completion",
            "path_containing_flow": "prefect_dbt/cloud/jobs.py"
        },
        "Wait for dbt Cloud job run": {
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-dbt",
            "description": {
                "summary": "Waits for a dbt Cloud job run to finish running."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-dbt/cloud/runs/#prefect_dbt.cloud.runs.Wait for dbt Cloud job run",
            "entrypoint": "prefect_dbt/cloud/runs.py:wait_for_dbt_cloud_job_run",
            "install_command": "pip install prefect-dbt",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
            "name": "Wait for dbt Cloud job run",
            "path_containing_flow": "prefect_dbt/cloud/runs.py"
        }
    },
    "prefect-docker": {},
    "prefect-email": {},
    "prefect-firebolt": {},
    "prefect-gcp": {},
    "prefect-github": {},
    "prefect-gitlab": {},
    "prefect-great-expectations": {},
    "prefect-hex": {
        "trigger-project-run-and-wait-for-completion": {
            "name": "trigger-project-run-and-wait-for-completion",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "project_id": {
                        "title": "project_id",
                        "description": "\nProject ID to run.",
                        "position": 0,
                        "type": "string"
                    },
                    "hex_credentials": {
                        "title": "hex_credentials",
                        "description": "\nCredentials to use for authentication with Hex.",
                        "position": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/HexCredentials"
                            }
                        ]
                    },
                    "input_params": {
                        "title": "input_params",
                        "description": "\nOptional input parameter value map for this project run, e.g.\n```\n{\"text_input_1\": \"Hello World\", \"numeric_input_1\": 123}\n```",
                        "position": 2,
                        "type": "object"
                    },
                    "update_cache": {
                        "title": "update_cache",
                        "description": "\nWhen true, this run will update the cached state of the published app\nwith the latest run results. Additionally, any SQL cells\nthat have caching enabled will be re-executed as part of\nthis run. Note that this cannot be set to true if custom\ninput parameters are provided.",
                        "default": false,
                        "position": 3,
                        "type": "boolean"
                    },
                    "max_wait_seconds": {
                        "title": "max_wait_seconds",
                        "description": "Maximum number of seconds to wait for the entire\nflow to complete.",
                        "default": 900,
                        "position": 4,
                        "type": "integer"
                    },
                    "poll_frequency_seconds": {
                        "title": "poll_frequency_seconds",
                        "description": "Number of seconds to wait in between checks for\nrun completion.",
                        "default": 10,
                        "position": 5,
                        "type": "integer"
                    }
                },
                "required": [
                    "project_id",
                    "hex_credentials"
                ],
                "definitions": {
                    "HexCredentials": {
                        "title": "HexCredentials",
                        "description": "Block used to manage Hex authentication.",
                        "type": "object",
                        "properties": {
                            "domain": {
                                "title": "Domain",
                                "description": "Domain to make API requests against.",
                                "default": "app.hex.tech",
                                "type": "string"
                            },
                            "token": {
                                "title": "Token",
                                "description": "Token used for authentication.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "block_type_slug": "hex-credentials",
                        "secret_fields": [
                            "token"
                        ],
                        "block_schema_references": {}
                    }
                }
            },
            "description": {
                "summary": "Flow that triggers a project run and waits for the triggered run to complete.",
                "returns": "Information about the triggered project run."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-hex/project/#prefect_hex.project",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3biMverMLGiDA7y5fkqKZF/4b7747052b59fa8182a9686b88ea9541/Hex_Purple__for_light_backgrounds_.png?h=250",
            "install_command": "pip install prefect-hex",
            "location_in_collection": "prefect_hex.project",
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-hex"
        },
        "wait-for-project-run-completion": {
            "name": "wait-for-project-run-completion",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "project_id": {
                        "title": "project_id",
                        "description": "\nProject ID to watch.",
                        "position": 0,
                        "type": "string"
                    },
                    "run_id": {
                        "title": "run_id",
                        "description": "\nRun ID to wait for.",
                        "position": 1,
                        "type": "string"
                    },
                    "hex_credentials": {
                        "title": "hex_credentials",
                        "description": "\nCredentials to use for authentication with Hex.",
                        "position": 2,
                        "allOf": [
                            {
                                "$ref": "#/definitions/HexCredentials"
                            }
                        ]
                    },
                    "max_wait_seconds": {
                        "title": "max_wait_seconds",
                        "description": "Maximum number of seconds to wait for the entire\nflow to complete.",
                        "default": 900,
                        "position": 3,
                        "type": "integer"
                    },
                    "poll_frequency_seconds": {
                        "title": "poll_frequency_seconds",
                        "description": "Number of seconds to wait in between checks for\nrun completion.",
                        "default": 10,
                        "position": 4,
                        "type": "integer"
                    }
                },
                "required": [
                    "project_id",
                    "run_id",
                    "hex_credentials"
                ],
                "definitions": {
                    "HexCredentials": {
                        "title": "HexCredentials",
                        "description": "Block used to manage Hex authentication.",
                        "type": "object",
                        "properties": {
                            "domain": {
                                "title": "Domain",
                                "description": "Domain to make API requests against.",
                                "default": "app.hex.tech",
                                "type": "string"
                            },
                            "token": {
                                "title": "Token",
                                "description": "Token used for authentication.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "block_type_slug": "hex-credentials",
                        "secret_fields": [
                            "token"
                        ],
                        "block_schema_references": {}
                    }
                }
            },
            "description": {
                "summary": "Flow that waits for the triggered project run to complete.",
                "returns": "The status of the project run and the metadata associated with the run."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-hex/project/#prefect_hex.project",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3biMverMLGiDA7y5fkqKZF/4b7747052b59fa8182a9686b88ea9541/Hex_Purple__for_light_backgrounds_.png?h=250",
            "install_command": "pip install prefect-hex",
            "location_in_collection": "prefect_hex.project",
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-hex"
        }
    },
    "prefect-hightouch": {
        "trigger-sync-run-and-wait-for-completion": {
            "name": "trigger-sync-run-and-wait-for-completion",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "hightouch_credentials": {
                        "title": "hightouch_credentials",
                        "description": "Credentials to use for authentication with Hightouch.",
                        "position": 0,
                        "allOf": [
                            {
                                "$ref": "#/definitions/HightouchCredentials"
                            }
                        ]
                    },
                    "sync_id": {
                        "title": "sync_id",
                        "description": "Sync ID used in formatting the endpoint URL.",
                        "position": 1,
                        "type": "string"
                    },
                    "full_resync": {
                        "title": "full_resync",
                        "description": "Whether to resync all the rows in the query\n(i.e. ignoring previously synced rows).",
                        "default": false,
                        "position": 2,
                        "type": "boolean"
                    },
                    "max_wait_seconds": {
                        "title": "max_wait_seconds",
                        "description": "Maximum number of seconds to wait for the entire\nflow to complete.",
                        "default": 900,
                        "position": 3,
                        "type": "integer"
                    },
                    "poll_frequency_seconds": {
                        "title": "poll_frequency_seconds",
                        "description": "Number of seconds to wait in between checks for\nrun completion.",
                        "default": 10,
                        "position": 4,
                        "type": "integer"
                    }
                },
                "required": [
                    "hightouch_credentials",
                    "sync_id"
                ],
                "definitions": {
                    "HightouchCredentials": {
                        "title": "HightouchCredentials",
                        "description": "Block used to manage Hightouch authentication.",
                        "type": "object",
                        "properties": {
                            "token": {
                                "title": "Token",
                                "description": "Token used for authentication.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "timeout": {
                                "title": "Timeout",
                                "description": "Number of seconds before the request times out.",
                                "default": 5.0,
                                "type": "number"
                            },
                            "client_kwargs": {
                                "title": "Additional configuration",
                                "description": "Additional keyword arguments to pass to `prefect_hightouch.api_client.client.AuthenticatedClient`.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "block_type_slug": "hightouch-credentials",
                        "secret_fields": [
                            "token"
                        ],
                        "block_schema_references": {}
                    }
                }
            },
            "description": {
                "summary": "Flow that triggers a sync run and waits for the triggered run to complete.",
                "returns": "- `id`: `str`<br>\n- `slug`: `str`<br>\n- `workspace_id`: `str`<br>\n- `created_at`: `str`<br>\n- `updated_at`: `str`<br>\n- `destination_id`: `str`<br>\n- `model_id`: `str`<br>\n- `configuration`: `Dict`<br>\n- `schedule`: `Dict`<br>\n- `status`: `\"models.SyncStatus\"`<br>\n- `disabled`: `bool`<br>\n- `last_run_at`: `str`<br>\n- `referenced_columns`: `List[str]`<br>\n- `primary_key`: `str`<br>"
            },
            "documentation_url": "https://prefecthq.github.io/prefect-hightouch/syncs/flows/#prefect_hightouch.syncs.flows",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6WT9DIXFrqQy0nA9VRZfuL/40a7039742fca9d053677f58a79aacd5/hightouch.png?h=250",
            "install_command": "pip install prefect-hightouch",
            "location_in_collection": "prefect_hightouch.syncs.flows",
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-hightouch"
        },
        "wait-for-sync-run-completion": {
            "name": "wait-for-sync-run-completion",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "hightouch_credentials": {
                        "title": "hightouch_credentials",
                        "description": "Credentials to use for authentication with Hightouch.",
                        "position": 0,
                        "allOf": [
                            {
                                "$ref": "#/definitions/HightouchCredentials"
                            }
                        ]
                    },
                    "sync_id": {
                        "title": "sync_id",
                        "description": "Sync ID used in formatting the endpoint URL.",
                        "position": 1,
                        "type": "string"
                    },
                    "max_wait_seconds": {
                        "title": "max_wait_seconds",
                        "description": "Maximum number of seconds to wait for the\nentire flow to complete.",
                        "default": 900,
                        "position": 2,
                        "type": "integer"
                    },
                    "poll_frequency_seconds": {
                        "title": "poll_frequency_seconds",
                        "description": "Number of seconds to wait in between checks for\nrun completion.",
                        "default": 10,
                        "position": 3,
                        "type": "integer"
                    }
                },
                "required": [
                    "hightouch_credentials",
                    "sync_id"
                ],
                "definitions": {
                    "HightouchCredentials": {
                        "title": "HightouchCredentials",
                        "description": "Block used to manage Hightouch authentication.",
                        "type": "object",
                        "properties": {
                            "token": {
                                "title": "Token",
                                "description": "Token used for authentication.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "timeout": {
                                "title": "Timeout",
                                "description": "Number of seconds before the request times out.",
                                "default": 5.0,
                                "type": "number"
                            },
                            "client_kwargs": {
                                "title": "Additional configuration",
                                "description": "Additional keyword arguments to pass to `prefect_hightouch.api_client.client.AuthenticatedClient`.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "token"
                        ],
                        "block_type_slug": "hightouch-credentials",
                        "secret_fields": [
                            "token"
                        ],
                        "block_schema_references": {}
                    }
                }
            },
            "description": {
                "summary": "Flow that waits for the triggered sync run to complete.",
                "returns": "- `value`\n- `id`: `str`<br>\n- `slug`: `str`<br>\n- `workspace_id`: `str`<br>\n- `created_at`: `str`<br>\n- `updated_at`: `str`<br>\n- `destination_id`: `str`<br>\n- `model_id`: `str`<br>\n- `configuration`: `Dict`<br>\n- `schedule`: `Dict`<br>\n- `status`: `\"api_models.SyncStatus\"`<br>\n- `disabled`: `bool`<br>\n- `last_run_at`: `str`<br>\n- `referenced_columns`: `List[str]`<br>\n- `primary_key`: `str`<br>"
            },
            "documentation_url": "https://prefecthq.github.io/prefect-hightouch/syncs/flows/#prefect_hightouch.syncs.flows",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6WT9DIXFrqQy0nA9VRZfuL/40a7039742fca9d053677f58a79aacd5/hightouch.png?h=250",
            "install_command": "pip install prefect-hightouch",
            "location_in_collection": "prefect_hightouch.syncs.flows",
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-hightouch"
        }
    },
    "prefect-jupyter": {},
    "prefect-kubernetes": {
        "run-namespaced-job": {
            "name": "run-namespaced-job",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "kubernetes_job": {
                        "title": "kubernetes_job",
                        "description": "The `KubernetesJob` block that specifies the job to run.",
                        "position": 0,
                        "allOf": [
                            {
                                "$ref": "#/definitions/KubernetesJob"
                            }
                        ]
                    }
                },
                "required": [
                    "kubernetes_job"
                ],
                "definitions": {
                    "KubernetesClusterConfig": {
                        "title": "KubernetesClusterConfig",
                        "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                        "type": "object",
                        "properties": {
                            "config": {
                                "title": "Config",
                                "description": "The entire contents of a kubectl config file.",
                                "type": "object"
                            },
                            "context_name": {
                                "title": "Context Name",
                                "description": "The name of the kubectl context to use.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "context_name"
                        ],
                        "block_type_slug": "kubernetes-cluster-config",
                        "secret_fields": [],
                        "block_schema_references": {}
                    },
                    "KubernetesCredentials": {
                        "title": "KubernetesCredentials",
                        "description": "Credentials block for generating configured Kubernetes API clients.",
                        "type": "object",
                        "properties": {
                            "cluster_config": {
                                "$ref": "#/definitions/KubernetesClusterConfig"
                            }
                        },
                        "block_type_slug": "kubernetes-credentials",
                        "secret_fields": [],
                        "block_schema_references": {
                            "cluster_config": {
                                "block_type_slug": "kubernetes-cluster-config",
                                "block_schema_checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b"
                            }
                        }
                    },
                    "KubernetesJob": {
                        "title": "KubernetesJob",
                        "description": "A block representing a Kubernetes job configuration.",
                        "type": "object",
                        "properties": {
                            "v1_job": {
                                "title": "Job Manifest",
                                "description": "The Kubernetes job manifest to run. This dictionary can be produced using `yaml.safe_load`.",
                                "type": "object"
                            },
                            "api_kwargs": {
                                "title": "Additional API Arguments",
                                "description": "Additional arguments to include in Kubernetes API calls.",
                                "example": {
                                    "pretty": "true"
                                },
                                "type": "object"
                            },
                            "credentials": {
                                "title": "Credentials",
                                "description": "The credentials to configure a client from.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/KubernetesCredentials"
                                    }
                                ]
                            },
                            "delete_after_completion": {
                                "title": "Delete After Completion",
                                "description": "Whether to delete the job after it has completed.",
                                "default": true,
                                "type": "boolean"
                            },
                            "interval_seconds": {
                                "title": "Interval Seconds",
                                "description": "The number of seconds to wait between job status checks.",
                                "default": 5,
                                "type": "integer"
                            },
                            "namespace": {
                                "title": "Namespace",
                                "description": "The namespace to create and run the job in.",
                                "default": "default",
                                "type": "string"
                            },
                            "timeout_seconds": {
                                "title": "Timeout Seconds",
                                "description": "The number of seconds to wait for the job run before timing out.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "v1_job",
                            "credentials"
                        ],
                        "block_type_slug": "k8s-job",
                        "secret_fields": [],
                        "block_schema_references": {
                            "credentials": {
                                "block_type_slug": "kubernetes-credentials",
                                "block_schema_checksum": "sha256:957fa8dca90bd1b5fb9c575ee09e80b454116c0b134287fbc2eff47a72564c3b"
                            }
                        }
                    }
                }
            },
            "description": {
                "summary": "Flow for running a namespaced Kubernetes job.",
                "returns": "The a dict of logs from each pod in the job, e.g. {'pod_name': 'pod_log_str'}.",
                "examples": [
                    "```python\nfrom prefect_kubernetes import KubernetesJob, run_namespaced_job\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\nrun_namespaced_job(\n    kubernetes_job=KubernetesJob.from_yaml_file(\n        credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        manifest_path=\"path/to/job.yaml\",\n    )\n)\n```"
                ]
            },
            "documentation_url": "https://prefecthq.github.io/prefect-kubernetes/flows/#prefect_kubernetes.flows",
            "logo_url": "https://images.ctfassets.net/zscdif0zqppk/oYuHjIbc26oilfQSEMjRv/a61f5f6ef406eead2df5231835b4c4c2/logo.png?h=250",
            "install_command": "pip install prefect-kubernetes",
            "location_in_collection": "prefect_kubernetes.flows",
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-kubernetes"
        }
    },
    "prefect-monday": {},
    "prefect-monte-carlo": {
        "create-or-update-lineage": {
            "name": "create-or-update-lineage",
            "parameters": {
                "title": "Parameters",
                "type": "object",
                "properties": {
                    "monte_carlo_credentials": {
                        "title": "monte_carlo_credentials",
                        "description": "The Monte Carlo credentials block used to generate\nan authenticated GraphQL API client via pycarlo.",
                        "position": 0,
                        "allOf": [
                            {
                                "$ref": "#/definitions/MonteCarloCredentials"
                            }
                        ]
                    },
                    "source": {
                        "title": "source",
                        "description": "A source node configuration - expected to include the following\nkeys: `node_name`, `object_id`, `object_type`, `resource_name`, `tags`.",
                        "position": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/MonteCarloLineageNode"
                            }
                        ]
                    },
                    "destination": {
                        "title": "destination",
                        "description": "A destination node configuration - expected to include the\nfollowing keys: `node_name`, `object_id`, `object_type`, `resource_name`,\n`tags`.",
                        "position": 2,
                        "allOf": [
                            {
                                "$ref": "#/definitions/MonteCarloLineageNode"
                            }
                        ]
                    },
                    "expire_at": {
                        "title": "expire_at",
                        "description": "Date and time indicating when to expire\na source-destination edge.",
                        "position": 3,
                        "type": "string",
                        "format": "date-time"
                    },
                    "extra_tags": {
                        "title": "extra_tags",
                        "description": "Optional list of tags to attach to the source\nand destination node.",
                        "position": 4,
                        "type": "array",
                        "items": {}
                    }
                },
                "required": [
                    "monte_carlo_credentials",
                    "source",
                    "destination"
                ],
                "definitions": {
                    "MonteCarloCredentials": {
                        "title": "MonteCarloCredentials",
                        "description": "Block used to manage Monte Carlo authentication.",
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "title": "API Key",
                                "description": "The token to authenticate with Monte Carlo's GraphQL API.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "api_key_id": {
                                "title": "API Key ID",
                                "description": "The ID associated with the Monte Carlo API token.",
                                "type": "string"
                            },
                            "catalog_url": {
                                "title": "Monte Carlo catalog URL",
                                "description": "The URL of the Monte Carlo catalog.",
                                "default": "https://getmontecarlo.com/catalog",
                                "type": "string"
                            }
                        },
                        "required": [
                            "api_key",
                            "api_key_id"
                        ],
                        "block_type_slug": "monte-carlo-credentials",
                        "secret_fields": [
                            "api_key"
                        ],
                        "block_schema_references": {}
                    },
                    "MonteCarloLineageNode": {
                        "title": "MonteCarloLineageNode",
                        "description": "Pydantic Model of a Monte Carlo lineage lineage node.",
                        "type": "object",
                        "properties": {
                            "node_name": {
                                "title": "Node Name",
                                "type": "string"
                            },
                            "object_id": {
                                "title": "Object Id",
                                "type": "string"
                            },
                            "resource_name": {
                                "title": "Resource Name",
                                "type": "string"
                            },
                            "object_type": {
                                "title": "Object Type",
                                "default": "table",
                                "type": "string"
                            },
                            "tags": {
                                "title": "Tags",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "required": [
                            "node_name",
                            "object_id",
                            "resource_name"
                        ]
                    }
                }
            },
            "description": {
                "summary": "Create or update a `source` node, `destination` node, and the edge that connects them."
            },
            "documentation_url": "https://prefecthq.github.io/prefect-monte-carlo/lineage/#prefect_monte_carlo.lineage",
            "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5OqrPNRdLMvqZzxo9f6Z25/f920dff0f1201fc014b0b083a6d2fdb1/image.png?h=250",
            "install_command": "pip install prefect-monte-carlo",
            "location_in_collection": "prefect_monte_carlo.lineage",
            "collection_repo_url": "https://github.com/PrefectHQ/prefect-monte-carlo"
        }
    },
    "prefect-openai": {},
    "prefect-openmetadata": {},
    "prefect-shell": {},
    "prefect-slack": {},
    "prefect-snowflake": {},
    "prefect-sqlalchemy": {},
    "prefect-twitter": {}
}