{
  "prefect": {
    "block_types": {
      "azure": {
        "name": "Azure",
        "slug": "azure",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#azure",
        "description": "Store data as a file on Azure Datalake and Azure Blob Storage.",
        "code_example": "Load stored Azure config:\n```python\nfrom prefect.filesystems import Azure\n\naz_block = Azure.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:d7b8e34b219812de879cee283580c94480178a578d6c7b0715cd18a551c335fa",
          "fields": {
            "title": "Azure",
            "description": "Store data as a file on Azure Datalake and Azure Blob Storage.",
            "type": "object",
            "properties": {
              "bucket_path": {
                "title": "Bucket Path",
                "description": "An Azure storage bucket path.",
                "example": "my-bucket/a-directory-within",
                "type": "string"
              },
              "azure_storage_connection_string": {
                "title": "Azure storage connection string",
                "description": "Equivalent to the AZURE_STORAGE_CONNECTION_STRING environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_account_name": {
                "title": "Azure storage account name",
                "description": "Equivalent to the AZURE_STORAGE_ACCOUNT_NAME environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_account_key": {
                "title": "Azure storage account key",
                "description": "Equivalent to the AZURE_STORAGE_ACCOUNT_KEY environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_tenant_id": {
                "title": "Azure storage tenant ID",
                "description": "Equivalent to the AZURE_TENANT_ID environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_client_id": {
                "title": "Azure storage client ID",
                "description": "Equivalent to the AZURE_CLIENT_ID environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_client_secret": {
                "title": "Azure storage client secret",
                "description": "Equivalent to the AZURE_CLIENT_SECRET environment variable.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "azure_storage_anon": {
                "title": "Azure storage anonymous connection",
                "description": "Set the 'anon' flag for ADLFS. This should be False for systems that require ADLFS to use DefaultAzureCredentials.",
                "default": true,
                "type": "boolean"
              }
            },
            "required": [
              "bucket_path"
            ],
            "block_type_slug": "azure",
            "secret_fields": [
              "azure_storage_connection_string",
              "azure_storage_account_name",
              "azure_storage_account_key",
              "azure_storage_tenant_id",
              "azure_storage_client_id",
              "azure_storage_client_secret"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.10.5"
        }
      },
      "date-time": {
        "name": "Date Time",
        "slug": "date-time",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1gmljt5UBcAwEXHPnIofcE/0f3cf1da45b8b2df846e142ab52b1778/image21.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.DateTime",
        "description": "A block that represents a datetime",
        "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import DateTime\n\ndata_time_block = DateTime.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:7943c88ca6ab22804082b595b9847d035a1364bdb23474c927317bcab9cb5d9c",
          "fields": {
            "title": "DateTime",
            "description": "A block that represents a datetime",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "An ISO 8601-compatible datetime value.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "date-time",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.10.5"
        }
      },
      "docker-container": {
        "name": "Docker Container",
        "slug": "docker-container",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.DockerContainer",
        "description": "Runs a command in a container.\n\nRequires a Docker Engine to be connectable. Docker settings will be retrieved from\nthe environment.\n\nClick [here](https://docs.prefect.io/tutorials/docker/) to see a tutorial.",
        "code_example": "```python\nfrom prefect.infrastructure.docker import DockerContainer\n\ndocker_container_block = DockerContainer.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:78f682fc53eeb9a7c4917f621b9afccc039842c432701f07abaef3ba5f1ff752",
          "fields": {
            "title": "DockerContainer",
            "description": "Runs a command in a container.\n\nRequires a Docker Engine to be connectable. Docker settings will be retrieved from\nthe environment.\n\nClick [here](https://docs.prefect.io/tutorials/docker/) to see a tutorial.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The type of infrastructure.",
                "default": "docker-container",
                "enum": [
                  "docker-container"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment",
                "description": "Environment variables to set in the configured infrastructure.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "title": "Image",
                "description": "Tag of a Docker image to use. Defaults to the Prefect image.",
                "type": "string"
              },
              "image_pull_policy": {
                "description": "Specifies if the image should be pulled.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ImagePullPolicy"
                  }
                ]
              },
              "image_registry": {
                "$ref": "#/definitions/DockerRegistry"
              },
              "networks": {
                "title": "Networks",
                "description": "A list of strings specifying Docker networks to connect the container to.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "network_mode": {
                "title": "Network Mode",
                "description": "The network mode for the created container (e.g. host, bridge). If 'networks' is set, this cannot be set.",
                "type": "string"
              },
              "auto_remove": {
                "title": "Auto Remove",
                "description": "If set, the container will be removed on completion.",
                "default": false,
                "type": "boolean"
              },
              "volumes": {
                "title": "Volumes",
                "description": "A list of volume mount strings in the format of \"local_path:container_path\".",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If set, the output will be streamed from the container to local standard output.",
                "default": true,
                "type": "boolean"
              },
              "memswap_limit": {
                "title": "Memswap Limit",
                "description": "Total memory (memory + swap), -1 to disable swap. Should only be set if `mem_limit` is also set. If `mem_limit` is set, this defaults toallowing the container to use as much swap as memory. For example, if `mem_limit` is 300m and `memswap_limit` is not set, the container can use 600m in total of memory and swap.",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "mem_limit": {
                "title": "Mem Limit",
                "description": "Memory limit of the created container. Accepts float values to enforce a limit in bytes or a string with a unit e.g. 100000b, 1000k, 128m, 1g. If a string is given without a unit, bytes are assumed.",
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "privileged": {
                "title": "Privileged",
                "description": "Give extended privileges to this container.",
                "default": false,
                "type": "boolean"
              }
            },
            "block_type_slug": "docker-container",
            "secret_fields": [
              "image_registry.password"
            ],
            "block_schema_references": {
              "image_registry": {
                "block_type_slug": "docker-registry",
                "block_schema_checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9"
              }
            },
            "definitions": {
              "ImagePullPolicy": {
                "title": "ImagePullPolicy",
                "description": "An enumeration.",
                "enum": [
                  "IF_NOT_PRESENT",
                  "ALWAYS",
                  "NEVER"
                ],
                "type": "string"
              },
              "DockerRegistry": {
                "title": "DockerRegistry",
                "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
                "type": "object",
                "properties": {
                  "username": {
                    "title": "Username",
                    "description": "The username to log into the registry with.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password to log into the registry with.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "registry_url": {
                    "title": "Registry Url",
                    "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                    "type": "string"
                  },
                  "reauth": {
                    "title": "Reauth",
                    "description": "Whether or not to reauthenticate on each interaction.",
                    "default": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "registry_url"
                ],
                "block_type_slug": "docker-registry",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "2.10.5"
        }
      },
      "docker-registry": {
        "name": "Docker Registry",
        "slug": "docker-registry",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.docker.DockerRegistry",
        "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
        "code_example": "```python\nfrom prefect.infrastructure.docker import DockerRegistry\n\ndocker_registry_block = DockerRegistry.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9",
          "fields": {
            "title": "DockerRegistry",
            "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
            "type": "object",
            "properties": {
              "username": {
                "title": "Username",
                "description": "The username to log into the registry with.",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "The password to log into the registry with.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "registry_url": {
                "title": "Registry Url",
                "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                "type": "string"
              },
              "reauth": {
                "title": "Reauth",
                "description": "Whether or not to reauthenticate on each interaction.",
                "default": true,
                "type": "boolean"
              }
            },
            "required": [
              "username",
              "password",
              "registry_url"
            ],
            "block_type_slug": "docker-registry",
            "secret_fields": [
              "password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "docker-login"
          ],
          "version": "2.10.5"
        }
      },
      "gcs": {
        "name": "GCS",
        "slug": "gcs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#gcs",
        "description": "Store data as a file on Google Cloud Storage.",
        "code_example": "Load stored GCS config:\n```python\nfrom prefect.filesystems import GCS\n\ngcs_block = GCS.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:1daf535b60cf9304103bcb4015280a30fd6bdd9686aa0c059eb9715082b5b3ec",
          "fields": {
            "title": "GCS",
            "description": "Store data as a file on Google Cloud Storage.",
            "type": "object",
            "properties": {
              "bucket_path": {
                "title": "Bucket Path",
                "description": "A GCS bucket path.",
                "example": "my-bucket/a-directory-within",
                "type": "string"
              },
              "service_account_info": {
                "title": "Service Account Info",
                "description": "The contents of a service account keyfile as a JSON string.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "project": {
                "title": "Project",
                "description": "The project the GCS bucket resides in. If not provided, the project will be inferred from the credentials or environment.",
                "type": "string"
              }
            },
            "required": [
              "bucket_path"
            ],
            "block_type_slug": "gcs",
            "secret_fields": [
              "service_account_info"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.10.5"
        }
      },
      "github": {
        "name": "GitHub",
        "slug": "github",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#github",
        "description": "Interact with files stored on GitHub repositories.",
        "code_example": "```python\nfrom prefect.filesystems import GitHub\n\ngithub_block = GitHub.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:2ef39d2f6324c4fd0fc1be8c4203e16b4c4f7479cb90c8babadfdcb7116b0155",
          "fields": {
            "title": "GitHub",
            "description": "Interact with files stored on GitHub repositories.",
            "type": "object",
            "properties": {
              "repository": {
                "title": "Repository",
                "description": "The URL of a GitHub repository to read from, in either HTTPS or SSH format.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "An optional reference to pin to; can be a branch name or tag.",
                "type": "string"
              },
              "access_token": {
                "title": "Access Token",
                "description": "A GitHub Personal Access Token (PAT) with repo scope. To use a fine-grained PAT, provide '{username}:{PAT}' as the value.",
                "name": "Personal Access Token",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "include_git_objects": {
                "title": "Include Git Objects",
                "description": "Whether to include git objects when copying the repo contents to a directory.",
                "default": true,
                "type": "boolean"
              }
            },
            "required": [
              "repository"
            ],
            "block_type_slug": "github",
            "secret_fields": [
              "access_token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "2.10.5"
        }
      },
      "json": {
        "name": "JSON",
        "slug": "json",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/19W3Di10hhb4oma2Qer0x6/764d1e7b4b9974cd268c775a488b9d26/image16.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.JSON",
        "description": "A block that represents JSON",
        "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import JSON\n\njson_block = JSON.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:ef9b76010e0545bd7f2212029460731f66ccfce289affe4b504cbeb702fc8ea3",
          "fields": {
            "title": "JSON",
            "description": "A block that represents JSON",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "A JSON-compatible value."
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "json",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.10.5"
        }
      },
      "kubernetes-cluster-config": {
        "name": "Kubernetes Cluster Config",
        "slug": "kubernetes-cluster-config",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1zrSeY8DZ1MJZs2BAyyyGk/20445025358491b8b72600b8f996125b/Kubernetes_logo_without_workmark.svg.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/kubernetes/#prefect.blocks.kubernetes.KubernetesClusterConfig",
        "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
        "code_example": "Load a saved Kubernetes cluster config:\n```python\nfrom prefect.blocks.kubernetes import KubernetesClusterConfig\n\ncluster_config_block = KubernetesClusterConfig.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b",
          "fields": {
            "title": "KubernetesClusterConfig",
            "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
            "type": "object",
            "properties": {
              "config": {
                "title": "Config",
                "description": "The entire contents of a kubectl config file.",
                "type": "object"
              },
              "context_name": {
                "title": "Context Name",
                "description": "The name of the kubectl context to use.",
                "type": "string"
              }
            },
            "required": [
              "config",
              "context_name"
            ],
            "block_type_slug": "kubernetes-cluster-config",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.10.5"
        }
      },
      "kubernetes-job": {
        "name": "Kubernetes Job",
        "slug": "kubernetes-job",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1zrSeY8DZ1MJZs2BAyyyGk/20445025358491b8b72600b8f996125b/Kubernetes_logo_without_workmark.svg.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.KubernetesJob",
        "description": "Runs a command as a Kubernetes Job.\n\nFor a guided tutorial, see [How to use Kubernetes with Prefect](https://medium.com/the-prefect-blog/how-to-use-kubernetes-with-prefect-419b2e8b8cb2/).\nFor more information, including examples for customizing the resulting manifest, see [`KubernetesJob` infrastructure concepts](https://docs.prefect.io/concepts/infrastructure/#kubernetesjob).",
        "code_example": "```python\nfrom prefect.infrastructure.kubernetes import KubernetesJob\n\nkubernetes_job_block = KubernetesJob.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6323febcd3533e86e1a062793f3ce17d40a132388e1ddc16d3bb1a30d3ea0a6b",
          "fields": {
            "title": "KubernetesJob",
            "description": "Runs a command as a Kubernetes Job.\n\nFor a guided tutorial, see [How to use Kubernetes with Prefect](https://medium.com/the-prefect-blog/how-to-use-kubernetes-with-prefect-419b2e8b8cb2/).\nFor more information, including examples for customizing the resulting manifest, see [`KubernetesJob` infrastructure concepts](https://docs.prefect.io/concepts/infrastructure/#kubernetesjob).",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The type of infrastructure.",
                "default": "kubernetes-job",
                "enum": [
                  "kubernetes-job"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment",
                "description": "Environment variables to set in the configured infrastructure.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "title": "Image",
                "description": "The image reference of a container image to use for the job, for example, `docker.io/prefecthq/prefect:2-latest`.The behavior is as described in the Kubernetes documentation and uses the latest version of Prefect by default, unless an image is already present in a provided job manifest.",
                "type": "string"
              },
              "namespace": {
                "title": "Namespace",
                "description": "The Kubernetes namespace to use for this job. Defaults to 'default' unless a namespace is already present in a provided job manifest.",
                "type": "string"
              },
              "service_account_name": {
                "title": "Service Account Name",
                "description": "The Kubernetes service account to use for this job.",
                "type": "string"
              },
              "image_pull_policy": {
                "description": "The Kubernetes image pull policy to use for job containers.",
                "allOf": [
                  {
                    "$ref": "#/definitions/KubernetesImagePullPolicy"
                  }
                ]
              },
              "cluster_config": {
                "title": "Cluster Config",
                "description": "The Kubernetes cluster config to use for this job.",
                "allOf": [
                  {
                    "$ref": "#/definitions/KubernetesClusterConfig"
                  }
                ]
              },
              "job": {
                "title": "Base Job Manifest",
                "description": "The base manifest for the Kubernetes Job.",
                "type": "object"
              },
              "customizations": {
                "title": "Customizations",
                "description": "A list of JSON 6902 patches to apply to the base Job manifest.",
                "type": "array",
                "format": "rfc6902",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "job_watch_timeout_seconds": {
                "title": "Job Watch Timeout Seconds",
                "description": "Number of seconds to wait for the job to complete before marking it as crashed. Defaults to `None`, which means no timeout will be enforced.",
                "type": "integer"
              },
              "pod_watch_timeout_seconds": {
                "title": "Pod Watch Timeout Seconds",
                "description": "Number of seconds to watch for pod creation before timing out.",
                "default": 60,
                "type": "integer"
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If set, output will be streamed from the job to local standard output.",
                "default": true,
                "type": "boolean"
              },
              "finished_job_ttl": {
                "title": "Finished Job Ttl",
                "description": "The number of seconds to retain jobs after completion. If set, finished jobs will be cleaned up by Kubernetes after the given delay. If None (default), jobs will need to be manually removed.",
                "type": "integer"
              }
            },
            "block_type_slug": "kubernetes-job",
            "secret_fields": [],
            "block_schema_references": {
              "cluster_config": {
                "block_type_slug": "kubernetes-cluster-config",
                "block_schema_checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b"
              }
            },
            "definitions": {
              "KubernetesImagePullPolicy": {
                "title": "KubernetesImagePullPolicy",
                "description": "An enumeration.",
                "enum": [
                  "IfNotPresent",
                  "Always",
                  "Never"
                ]
              },
              "KubernetesClusterConfig": {
                "title": "KubernetesClusterConfig",
                "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                "type": "object",
                "properties": {
                  "config": {
                    "title": "Config",
                    "description": "The entire contents of a kubectl config file.",
                    "type": "object"
                  },
                  "context_name": {
                    "title": "Context Name",
                    "description": "The name of the kubectl context to use.",
                    "type": "string"
                  }
                },
                "required": [
                  "config",
                  "context_name"
                ],
                "block_type_slug": "kubernetes-cluster-config",
                "secret_fields": [],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "2.10.5"
        }
      },
      "local-file-system": {
        "name": "Local File System",
        "slug": "local-file-system",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/EVKjxM7fNyi4NGUSkeTEE/95c958c5dd5a56c59ea5033e919c1a63/image1.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#local-filesystem",
        "description": "Store data as a file on a local file system.",
        "code_example": "Load stored local file system config:\n```python\nfrom prefect.filesystems import LocalFileSystem\n\nlocal_file_system_block = LocalFileSystem.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6db1ab242e7b2b88a52dc137a7da3a373af63e0a103b9a91e060ed54a26f395a",
          "fields": {
            "title": "LocalFileSystem",
            "description": "Store data as a file on a local file system.",
            "type": "object",
            "properties": {
              "basepath": {
                "title": "Basepath",
                "description": "Default local path for this block to write to.",
                "type": "string"
              }
            },
            "block_type_slug": "local-file-system",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.10.5"
        }
      },
      "mattermost-webhook": {
        "name": "Mattermost Webhook",
        "slug": "mattermost-webhook",
        "logo_url": "https://images.ctfassets.net/zscdif0zqppk/3mlbsJDAmK402ER1sf0zUF/a48ac43fa38f395dd5f56c6ed29f22bb/mattermost-logo-png-transparent.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.MattermostWebhook",
        "description": "Enables sending notifications via a provided Mattermost webhook.",
        "code_example": "Load a saved Mattermost webhook and send a message:\n```python\nfrom prefect.blocks.notifications import MattermostWebhook\n\nmattermost_webhook_block = MattermostWebhook.load(\"BLOCK_NAME\")\n\nmattermost_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:26d8cbaab33eb653eca72e8c403405d738ed3f1095aba4b64d06c6426253d6cb",
          "fields": {
            "title": "MattermostWebhook",
            "description": "Enables sending notifications via a provided Mattermost webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "hostname": {
                "title": "Hostname",
                "description": "The hostname of your Mattermost server.",
                "example": "Mattermost.example.com",
                "type": "string"
              },
              "token": {
                "title": "Token",
                "description": "The token associated with your Mattermost webhook.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "botname": {
                "title": "Bot name",
                "description": "The name of the bot that will send the message.",
                "type": "string"
              },
              "channels": {
                "title": "Channels",
                "description": "The channel(s) you wish to notify.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "include_image": {
                "title": "Include Image",
                "description": "Whether to include the Apprise status image in the message.",
                "default": false,
                "type": "boolean"
              },
              "path": {
                "title": "Path",
                "description": "An optional sub-path specification to append to the hostname.",
                "type": "string"
              },
              "port": {
                "title": "Port",
                "description": "The port of your Mattermost server.",
                "default": 8065,
                "type": "integer"
              }
            },
            "required": [
              "hostname",
              "token"
            ],
            "block_type_slug": "mattermost-webhook",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.10.5"
        }
      },
      "ms-teams-webhook": {
        "name": "Microsoft Teams Webhook",
        "slug": "ms-teams-webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6n0dSTBzwoVPhX8Vgg37i7/9040e07a62def4f48242be3eae6d3719/teams_logo.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.MicrosoftTeamsWebhook",
        "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
        "code_example": "Load a saved Teams webhook and send a message:\n```python\nfrom prefect.blocks.notifications import MicrosoftTeamsWebhook\nteams_webhook_block = MicrosoftTeamsWebhook.load(\"BLOCK_NAME\")\nteams_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:0a5c2b435930bf8553391878475c5b976592526d2f801e8e559c0119aa393032",
          "fields": {
            "title": "MicrosoftTeamsWebhook",
            "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "url": {
                "title": "Webhook URL",
                "description": "The Teams incoming webhook URL used to send notifications.",
                "example": "https://your-org.webhook.office.com/webhookb2/XXX/IncomingWebhook/YYY/ZZZ",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "url"
            ],
            "block_type_slug": "ms-teams-webhook",
            "secret_fields": [
              "url"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.10.5"
        }
      },
      "opsgenie-webhook": {
        "name": "Opsgenie Webhook",
        "slug": "opsgenie-webhook",
        "logo_url": "https://images.ctfassets.net/sahxz1jinscj/3habq8fTzmplh7Ctkppk4/590cecb73f766361fcea9223cd47bad8/opsgenie.png",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.OpsgenieWebhook",
        "description": "Enables sending notifications via a provided Opsgenie webhook.",
        "code_example": "Load a saved Opsgenie webhook and send a message:\n```python\nfrom prefect.blocks.notifications import OpsgenieWebhook\nopsgenie_webhook_block = OpsgenieWebhook.load(\"BLOCK_NAME\")\nopsgenie_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:df4b3a253e6c2d2a0e6ef4831e7bd77ee920a75201f9c132a5516b42fcd80112",
          "fields": {
            "title": "OpsgenieWebhook",
            "description": "Enables sending notifications via a provided Opsgenie webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "apikey": {
                "title": "API Key",
                "description": "The API Key associated with your Opsgenie account.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "target_user": {
                "title": "Target User",
                "description": "The user(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "target_team": {
                "title": "Target Team",
                "description": "The team(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "target_schedule": {
                "title": "Target Schedule",
                "description": "The schedule(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "target_escalation": {
                "title": "Target Escalation",
                "description": "The escalation(s) you wish to notify.",
                "type": "array",
                "items": {}
              },
              "region_name": {
                "title": "Region Name",
                "description": "The 2-character region code.",
                "default": "us",
                "enum": [
                  "us",
                  "eu"
                ],
                "type": "string"
              },
              "batch": {
                "title": "Batch",
                "description": "Notify all targets in batches (instead of individually).",
                "default": false,
                "type": "boolean"
              },
              "tags": {
                "title": "Tags",
                "description": "A comma-separated list of tags you can associate with your Opsgenie message.",
                "example": "[\"tag1\", \"tag2\"]",
                "type": "array",
                "items": {}
              },
              "priority": {
                "title": "Priority",
                "description": "The priority to associate with the message. It is on a scale between 1 (LOW) and 5 (EMERGENCY).",
                "default": 3,
                "type": "string"
              },
              "alias": {
                "title": "Alias",
                "description": "The alias to associate with the message.",
                "type": "string"
              },
              "entity": {
                "title": "Entity",
                "description": "The entity to associate with the message.",
                "type": "string"
              },
              "details": {
                "title": "Details",
                "description": "Additional details composed of key/values pairs.",
                "example": "{\"key1\": \"value1\", \"key2\": \"value2\"}",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "apikey"
            ],
            "block_type_slug": "opsgenie-webhook",
            "secret_fields": [
              "apikey"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.10.5"
        }
      },
      "pager-duty-webhook": {
        "name": "Pager Duty Webhook",
        "slug": "pager-duty-webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6FHJ4Lcozjfl1yDPxCvQDT/c2f6bdf47327271c068284897527f3da/PagerDuty-Logo.wine.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.PagerDutyWebHook",
        "description": "Enables sending notifications via a provided PagerDuty webhook.",
        "code_example": "Load a saved PagerDuty webhook and send a message:\n```python\nfrom prefect.blocks.notifications import PagerDutyWebHook\npagerduty_webhook_block = PagerDutyWebHook.load(\"BLOCK_NAME\")\npagerduty_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:4dd2ac9d4e446f3d2717414cf34bd6a62a40f5da4437f99dd61473ac117b1438",
          "fields": {
            "title": "PagerDutyWebHook",
            "description": "Enables sending notifications via a provided PagerDuty webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The severity of the notification.",
                "default": "info",
                "enum": [
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "integration_key": {
                "title": "Integration Key",
                "description": "This can be found on the Events API V2 integration's detail page, and is also referred to as a Routing Key. This must be provided alongside `api_key`, but will error if provided alongside `url`.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "api_key": {
                "title": "API Key",
                "description": "This can be found under Integrations. This must be provided alongside `integration_key`, but will error if provided alongside `url`.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "source": {
                "title": "Source",
                "description": "The source string as part of the payload.",
                "default": "Prefect",
                "type": "string"
              },
              "component": {
                "title": "Component",
                "description": "The component string as part of the payload.",
                "default": "Notification",
                "type": "string"
              },
              "group": {
                "title": "Group",
                "description": "The group string as part of the payload.",
                "type": "string"
              },
              "class_id": {
                "title": "Class ID",
                "description": "The class string as part of the payload.",
                "type": "string"
              },
              "region_name": {
                "title": "Region Name",
                "description": "The region name.",
                "default": "us",
                "enum": [
                  "us",
                  "eu"
                ],
                "type": "string"
              },
              "clickable_url": {
                "title": "Clickable URL",
                "description": "A clickable URL to associate with the notice.",
                "minLength": 1,
                "maxLength": 65536,
                "format": "uri",
                "type": "string"
              },
              "include_image": {
                "title": "Include Image",
                "description": "Associate the notification status via a represented icon.",
                "default": true,
                "type": "boolean"
              },
              "custom_details": {
                "title": "Custom Details",
                "description": "Additional details to include as part of the payload.",
                "example": "{\"disk_space_left\": \"145GB\"}",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "integration_key",
              "api_key"
            ],
            "block_type_slug": "pager-duty-webhook",
            "secret_fields": [
              "integration_key",
              "api_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.10.5"
        }
      },
      "process": {
        "name": "Process",
        "slug": "process",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/39WQhVu4JK40rZWltGqhuC/d15be6189a0cb95949a6b43df00dcb9b/image5.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/infrastructure/#process",
        "description": "Run a command in a new process.\n\nCurrent environment variables and Prefect settings will be included in the created\nprocess. Configured environment variables will override any current environment\nvariables.",
        "code_example": "```python\nfrom prefect.infrastructure.process import Process\n\nprocess_block = Process.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:47c4ac364708f4a6f27fb10b18086ad92c0a53fbbdd9ba07c030467067979f84",
          "fields": {
            "title": "Process",
            "description": "Run a command in a new process.\n\nCurrent environment variables and Prefect settings will be included in the created\nprocess. Configured environment variables will override any current environment\nvariables.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The type of infrastructure.",
                "default": "process",
                "enum": [
                  "process"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment",
                "description": "Environment variables to set in the configured infrastructure.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If set, output will be streamed from the process to local standard output.",
                "default": true,
                "type": "boolean"
              },
              "working_dir": {
                "title": "Working Dir",
                "description": "If set, the process will open within the specified path as the working directory. Otherwise, a temporary directory will be created.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "format": "path"
                  }
                ]
              }
            },
            "block_type_slug": "process",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "2.10.5"
        }
      },
      "remote-file-system": {
        "name": "Remote File System",
        "slug": "remote-file-system",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CxjycqILlT9S9YchI7o1q/ee62e2089dfceb19072245c62f0c69d2/image12.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#remote-file-system",
        "description": "Store data as a file on a remote file system.\n\nSupports any remote file system supported by `fsspec`. The file system is specified\nusing a protocol. For example, \"s3://my-bucket/my-folder/\" will use S3.",
        "code_example": "Load stored remote file system config:\n```python\nfrom prefect.filesystems import RemoteFileSystem\n\nremote_file_system_block = RemoteFileSystem.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f6998c8723a78207471938f5f74d6d4815ff14c2900caf8e9c3b3ece47bfeb40",
          "fields": {
            "title": "RemoteFileSystem",
            "description": "Store data as a file on a remote file system.\n\nSupports any remote file system supported by `fsspec`. The file system is specified\nusing a protocol. For example, \"s3://my-bucket/my-folder/\" will use S3.",
            "type": "object",
            "properties": {
              "basepath": {
                "title": "Basepath",
                "description": "Default path for this block to write to.",
                "example": "s3://my-bucket/my-folder/",
                "type": "string"
              },
              "settings": {
                "title": "Settings",
                "description": "Additional settings to pass through to fsspec.",
                "type": "object"
              }
            },
            "required": [
              "basepath"
            ],
            "block_type_slug": "remote-file-system",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.10.5"
        }
      },
      "s3": {
        "name": "S3",
        "slug": "s3",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#s3",
        "description": "Store data as a file on AWS S3.",
        "code_example": "Load stored S3 config:\n```python\nfrom prefect.filesystems import S3\n\ns3_block = S3.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:77690b4ef54ef3edc93fca6ac54bc540a32ca07169e91aecd36e49b2e1eeebc5",
          "fields": {
            "title": "S3",
            "description": "Store data as a file on AWS S3.",
            "type": "object",
            "properties": {
              "bucket_path": {
                "title": "Bucket Path",
                "description": "An S3 bucket path.",
                "example": "my-bucket/a-directory-within",
                "type": "string"
              },
              "aws_access_key_id": {
                "title": "AWS Access Key ID",
                "description": "Equivalent to the AWS_ACCESS_KEY_ID environment variable.",
                "example": "AKIAIOSFODNN7EXAMPLE",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "aws_secret_access_key": {
                "title": "AWS Secret Access Key",
                "description": "Equivalent to the AWS_SECRET_ACCESS_KEY environment variable.",
                "example": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "bucket_path"
            ],
            "block_type_slug": "s3",
            "secret_fields": [
              "aws_access_key_id",
              "aws_secret_access_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.10.5"
        }
      },
      "secret": {
        "name": "Secret",
        "slug": "secret",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5uUmyGBjRejYuGTWbTxz6E/3003e1829293718b3a5d2e909643a331/image8.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.Secret",
        "description": "A block that represents a secret value. The value stored in this block will be obfuscated when\nthis block is logged or shown in the UI.",
        "code_example": "```python\nfrom prefect.blocks.system import Secret\n\nsecret_block = Secret.load(\"BLOCK_NAME\")\n\n# Access the stored secret\nsecret_block.get()\n```",
        "block_schema": {
          "checksum": "sha256:e6b26e0a0240eb112e604608338f863e5ca2f137936e310014bfa2139d0a9b6c",
          "fields": {
            "title": "Secret",
            "description": "A block that represents a secret value. The value stored in this block will be obfuscated when\nthis block is logged or shown in the UI.",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "A string value that should be kept secret.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "secret",
            "secret_fields": [
              "value"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.10.5"
        }
      },
      "slack-webhook": {
        "name": "Slack Webhook",
        "slug": "slack-webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.SlackWebhook",
        "description": "Enables sending notifications via a provided Slack webhook.",
        "code_example": "Load a saved Slack webhook and send a message:\n```python\nfrom prefect.blocks.notifications import SlackWebhook\n\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nslack_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:273dfe712133cba3cdb092d88741da37e33cee892bfcf4fcf2895bdcee49a965",
          "fields": {
            "title": "SlackWebhook",
            "description": "Enables sending notifications via a provided Slack webhook.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "url": {
                "title": "Webhook URL",
                "description": "Slack incoming webhook URL used to send notifications.",
                "example": "https://hooks.slack.com/XXX",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "url"
            ],
            "block_type_slug": "slack-webhook",
            "secret_fields": [
              "url"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.10.5"
        }
      },
      "smb": {
        "name": "SMB",
        "slug": "smb",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6J444m3vW6ukgBOCinSxLk/025f5562d3c165feb7a5df599578a6a8/samba_2010_logo_transparent_151x27.png?h=250",
        "documentation_url": "https://docs.prefect.io/concepts/filesystems/#smb",
        "description": "Store data as a file on a SMB share.",
        "code_example": "Load stored SMB config:\n\n```python\nfrom prefect.filesystems import SMB\nsmb_block = SMB.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:d5746a564cf05bec13770a882f76ca8e8f562c8bdc7a6d2d45732b079bf72045",
          "fields": {
            "title": "SMB",
            "description": "Store data as a file on a SMB share.",
            "type": "object",
            "properties": {
              "share_path": {
                "title": "Share Path",
                "description": "SMB target (requires <SHARE>, followed by <PATH>).",
                "example": "/SHARE/dir/subdir",
                "type": "string"
              },
              "smb_username": {
                "title": "SMB Username",
                "description": "Username with access to the target SMB SHARE.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "smb_password": {
                "title": "SMB Password",
                "description": "Password for SMB access.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "smb_host": {
                "title": "Smb Host",
                "description": "SMB server/hostname.",
                "tile": "SMB server/hostname",
                "type": "string"
              },
              "smb_port": {
                "title": "SMB port",
                "description": "SMB port (default: 445).",
                "type": "integer"
              }
            },
            "required": [
              "share_path",
              "smb_host"
            ],
            "block_type_slug": "smb",
            "secret_fields": [
              "smb_username",
              "smb_password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "2.10.5"
        }
      },
      "string": {
        "name": "String",
        "slug": "string",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4zjrZmh9tBrFiikeB44G4O/2ce1dbbac1c8e356f7c429e0f8bbb58d/image10.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.String",
        "description": "A block that represents a string",
        "code_example": "Load a stored string value:\n```python\nfrom prefect.blocks.system import String\n\nstring_block = String.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:e9f3f43e55b73bc94ee2a355f1e4ef7064645268cba22571c2a95d90a2af8dd0",
          "fields": {
            "title": "String",
            "description": "A block that represents a string",
            "type": "object",
            "properties": {
              "value": {
                "title": "Value",
                "description": "A string value.",
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "block_type_slug": "string",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.10.5"
        }
      },
      "twilio-sms": {
        "name": "Twilio SMS",
        "slug": "twilio-sms",
        "logo_url": "https://images.ctfassets.net/zscdif0zqppk/YTCgPL6bnK3BczP2gV9md/609283105a7006c57dbfe44ee1a8f313/58482bb9cef1014c0b5e4a31.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.TwilioSMS",
        "description": "Enables sending notifications via Twilio SMS.",
        "code_example": "Load a saved `TwilioSMS` block and send a message:\n```python\nfrom prefect.blocks.notifications import TwilioSMS\ntwilio_webhook_block = TwilioSMS.load(\"BLOCK_NAME\")\ntwilio_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:46c6934a4ea723f515caf9e7b0f8ce313c5deca4050d31d32adf5abdf1de05c2",
          "fields": {
            "title": "TwilioSMS",
            "description": "Enables sending notifications via Twilio SMS.",
            "type": "object",
            "properties": {
              "notify_type": {
                "title": "Notify Type",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "default": "prefect_default",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "type": "string"
              },
              "account_sid": {
                "title": "Account Sid",
                "description": "The Twilio Account SID - it can be found on the homepage of the Twilio console.",
                "type": "string"
              },
              "auth_token": {
                "title": "Auth Token",
                "description": "The Twilio Authentication Token - it can be found on the homepage of the Twilio console.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "from_phone_number": {
                "title": "From Phone Number",
                "description": "The valid Twilio phone number to send the message from.",
                "example": "18001234567",
                "type": "string"
              },
              "to_phone_numbers": {
                "title": "To Phone Numbers",
                "description": "A list of valid Twilio phone number(s) to send the message to.",
                "example": "18004242424",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "account_sid",
              "auth_token",
              "from_phone_number",
              "to_phone_numbers"
            ],
            "block_type_slug": "twilio-sms",
            "secret_fields": [
              "auth_token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "2.10.5"
        }
      },
      "webhook": {
        "name": "Webhook",
        "slug": "webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6ciCsTFsvUAiiIvTllMfOU/627e9513376ca457785118fbba6a858d/webhook_icon_138018.png?h=250",
        "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/webhook/#prefect.blocks.webhook.Webhook",
        "description": "Block that enables calling webhooks.",
        "code_example": "```python\nfrom prefect.blocks.webhook import Webhook\n\nwebhook_block = Webhook.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:0207cea0ff5b9d2b39e52007c3ba1d797f1aca7906fb3bf26dd409abae953a85",
          "fields": {
            "title": "Webhook",
            "description": "Block that enables calling webhooks.",
            "type": "object",
            "properties": {
              "method": {
                "title": "Method",
                "description": "The webhook request method. Defaults to `POST`.",
                "default": "POST",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ],
                "type": "string"
              },
              "url": {
                "title": "Webhook URL",
                "description": "The webhook URL.",
                "example": "https://hooks.slack.com/XXX",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "headers": {
                "title": "Webhook Headers",
                "description": "A dictionary of headers to send with the webhook request.",
                "type": "object"
              }
            },
            "required": [
              "url"
            ],
            "block_type_slug": "webhook",
            "secret_fields": [
              "url",
              "headers.*"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "2.10.5"
        }
      }
    }
  },
  "prefect-airbyte": {
    "block_types": {
      "airbyte-connection": {
        "name": "Airbyte Connection",
        "slug": "airbyte-connection",
        "logo_url": "https://images.ctfassets.net/zscdif0zqppk/6gm7wsC7ANnKYQsm7oiSYz/aac1ad5e054d35d9e24af8d6ed3aed5f/59758427?h=250",
        "documentation_url": null,
        "description": "A block representing an existing Airbyte connection. This block is part of the prefect-airbyte collection. Install prefect-airbyte with `pip install prefect-airbyte` to use this block.",
        "code_example": "Load an existing `AirbyteConnection` block:\n```python\nfrom prefect_airbyte import AirbyteConnection\n\nairbyte_connection = AirbyteConnection.load(\"BLOCK_NAME\")\n```\n\nRun an Airbyte connection sync as a flow:\n```python\nfrom prefect import flow\nfrom prefect_airbyte import AirbyteConnection\nfrom prefect_airbyte.flows import run_connection_sync # this is a flow\n\nairbyte_connection = AirbyteConnection.load(\"BLOCK_NAME\")\n\n@flow\ndef airbyte_orchestrator():\n    run_connection_sync(airbyte_connection) # now it's a subflow\n```",
        "block_schema": {
          "checksum": "sha256:b0d1479644a23659067536d89a7254ec7ab05101e225db74de165b90cd3a1d73",
          "fields": {
            "title": "AirbyteConnection",
            "description": "A block representing an existing Airbyte connection.",
            "type": "object",
            "properties": {
              "airbyte_server": {
                "title": "Airbyte Server",
                "description": "AirbyteServer block representing the Airbyte instance where the Airbyte connection is defined.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AirbyteServer"
                  }
                ]
              },
              "connection_id": {
                "title": "Connection Id",
                "description": "UUID of the Airbyte Connection to trigger.",
                "type": "string",
                "format": "uuid"
              },
              "poll_interval_s": {
                "title": "Poll Interval S",
                "description": "Time in seconds between status checks of the Airbyte sync job.",
                "default": 15,
                "type": "integer"
              },
              "status_updates": {
                "title": "Status Updates",
                "description": "Whether to log job status on each poll of the Airbyte sync job.",
                "default": false,
                "type": "boolean"
              },
              "timeout": {
                "title": "Timeout",
                "description": "Timeout in seconds for requests made by httpx.AsyncClient.",
                "default": 5,
                "type": "integer"
              }
            },
            "required": [
              "airbyte_server",
              "connection_id"
            ],
            "block_type_slug": "airbyte-connection",
            "secret_fields": [
              "airbyte_server.password"
            ],
            "block_schema_references": {
              "airbyte_server": {
                "block_type_slug": "airbyte-server",
                "block_schema_checksum": "sha256:f0bc49c549405ef3e753b3cc0a81e0e13b1b036acfab571c76f4d198c4bb842a"
              }
            },
            "definitions": {
              "AirbyteServer": {
                "title": "AirbyteServer",
                "description": "A block representing an Airbyte server for generating `AirbyteClient` instances.",
                "type": "object",
                "properties": {
                  "username": {
                    "title": "Username",
                    "description": "Username to authenticate with Airbyte API.",
                    "default": "airbyte",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "Password to authenticate with Airbyte API.",
                    "default": "**********",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "server_host": {
                    "title": "Server Host",
                    "description": "Host address of Airbyte server.",
                    "default": "localhost",
                    "example": "127.0.0.1",
                    "type": "string"
                  },
                  "server_port": {
                    "title": "Server Port",
                    "description": "Port number of Airbyte server.",
                    "default": 8000,
                    "type": "integer"
                  },
                  "api_version": {
                    "title": "API Version",
                    "description": "Airbyte API version to use.",
                    "default": "v1",
                    "type": "string"
                  },
                  "use_ssl": {
                    "title": "Use SSL",
                    "description": "Whether to use SSL when connecting to Airbyte server.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "block_type_slug": "airbyte-server",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.2.0"
        }
      },
      "airbyte-server": {
        "name": "Airbyte Server",
        "slug": "airbyte-server",
        "logo_url": "https://images.ctfassets.net/zscdif0zqppk/6gm7wsC7ANnKYQsm7oiSYz/aac1ad5e054d35d9e24af8d6ed3aed5f/59758427?h=250",
        "documentation_url": null,
        "description": "A block representing an Airbyte server for generating `AirbyteClient` instances. This block is part of the prefect-airbyte collection. Install prefect-airbyte with `pip install prefect-airbyte` to use this block.",
        "code_example": "```python\nfrom prefect_airbyte.server import AirbyteServer\n\nserver = AirbyteServer.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f0bc49c549405ef3e753b3cc0a81e0e13b1b036acfab571c76f4d198c4bb842a",
          "fields": {
            "title": "AirbyteServer",
            "description": "A block representing an Airbyte server for generating `AirbyteClient` instances.",
            "type": "object",
            "properties": {
              "username": {
                "title": "Username",
                "description": "Username to authenticate with Airbyte API.",
                "default": "airbyte",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "Password to authenticate with Airbyte API.",
                "default": "**********",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "server_host": {
                "title": "Server Host",
                "description": "Host address of Airbyte server.",
                "default": "localhost",
                "example": "127.0.0.1",
                "type": "string"
              },
              "server_port": {
                "title": "Server Port",
                "description": "Port number of Airbyte server.",
                "default": 8000,
                "type": "integer"
              },
              "api_version": {
                "title": "API Version",
                "description": "Airbyte API version to use.",
                "default": "v1",
                "type": "string"
              },
              "use_ssl": {
                "title": "Use SSL",
                "description": "Whether to use SSL when connecting to Airbyte server.",
                "default": false,
                "type": "boolean"
              }
            },
            "block_type_slug": "airbyte-server",
            "secret_fields": [
              "password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.0"
        }
      }
    }
  },
  "prefect-aws": {
    "block_types": {
      "aws-credentials": {
        "name": "AWS Credentials",
        "slug": "aws-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-aws/credentials/#prefect_aws.credentials.AwsCredentials",
        "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "Load stored AWS credentials:\n```python\nfrom prefect_aws import AwsCredentials\n\naws_credentials_block = AwsCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe",
          "fields": {
            "title": "AwsCredentials",
            "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
            "type": "object",
            "properties": {
              "aws_access_key_id": {
                "title": "AWS Access Key ID",
                "description": "A specific AWS access key ID.",
                "type": "string"
              },
              "aws_secret_access_key": {
                "title": "AWS Access Key Secret",
                "description": "A specific AWS secret access key.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "aws_session_token": {
                "title": "AWS Session Token",
                "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                "type": "string"
              },
              "profile_name": {
                "title": "Profile Name",
                "description": "The profile to use when creating your session.",
                "type": "string"
              },
              "region_name": {
                "title": "Region Name",
                "description": "The AWS Region where you want to create new connections.",
                "type": "string"
              },
              "aws_client_parameters": {
                "title": "AWS Client Parameters",
                "description": "Extra parameters to initialize the Client.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AwsClientParameters"
                  }
                ]
              }
            },
            "block_type_slug": "aws-credentials",
            "secret_fields": [
              "aws_secret_access_key"
            ],
            "block_schema_references": {},
            "definitions": {
              "AwsClientParameters": {
                "title": "AwsClientParameters",
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "type": "object",
                "properties": {
                  "api_version": {
                    "title": "API Version",
                    "description": "The API version to use.",
                    "type": "string"
                  },
                  "use_ssl": {
                    "title": "Use SSL",
                    "description": "Whether or not to use SSL.",
                    "default": true,
                    "type": "boolean"
                  },
                  "verify": {
                    "title": "Verify",
                    "description": "Whether or not to verify SSL certificates.",
                    "default": true,
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "format": "file-path"
                      }
                    ]
                  },
                  "verify_cert_path": {
                    "title": "Certificate Authority Bundle File Path",
                    "description": "Path to the CA cert bundle to use.",
                    "format": "file-path",
                    "type": "string"
                  },
                  "endpoint_url": {
                    "title": "Endpoint URL",
                    "description": "The complete URL to use for the constructed client.",
                    "type": "string"
                  },
                  "config": {
                    "title": "Botocore Config",
                    "description": "Advanced configuration for Botocore clients.",
                    "type": "object"
                  }
                }
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "aws-secret": {
        "name": "AWS Secret",
        "slug": "aws-secret",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-aws/secrets_manager/#prefect_aws.secrets_manager.AwsSecret",
        "description": "Manages a secret in AWS's Secrets Manager. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "```python\nfrom prefect_aws.secrets_manager import AwsSecret\n\naws_secret_block = AwsSecret.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:d10fde5ac25b10edca4859c4d0bf61b4a9106215cd79ab80997f29859b190b7d",
          "fields": {
            "title": "AwsSecret",
            "description": "Manages a secret in AWS's Secrets Manager.",
            "type": "object",
            "properties": {
              "aws_credentials": {
                "$ref": "#/definitions/AwsCredentials"
              },
              "secret_name": {
                "title": "Secret Name",
                "description": "The name of the secret.",
                "type": "string"
              }
            },
            "required": [
              "aws_credentials",
              "secret_name"
            ],
            "block_type_slug": "aws-secret",
            "secret_fields": [
              "aws_credentials.aws_secret_access_key"
            ],
            "block_schema_references": {
              "aws_credentials": {
                "block_type_slug": "aws-credentials",
                "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
              }
            },
            "definitions": {
              "AwsClientParameters": {
                "title": "AwsClientParameters",
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "type": "object",
                "properties": {
                  "api_version": {
                    "title": "API Version",
                    "description": "The API version to use.",
                    "type": "string"
                  },
                  "use_ssl": {
                    "title": "Use SSL",
                    "description": "Whether or not to use SSL.",
                    "default": true,
                    "type": "boolean"
                  },
                  "verify": {
                    "title": "Verify",
                    "description": "Whether or not to verify SSL certificates.",
                    "default": true,
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "format": "file-path"
                      }
                    ]
                  },
                  "verify_cert_path": {
                    "title": "Certificate Authority Bundle File Path",
                    "description": "Path to the CA cert bundle to use.",
                    "format": "file-path",
                    "type": "string"
                  },
                  "endpoint_url": {
                    "title": "Endpoint URL",
                    "description": "The complete URL to use for the constructed client.",
                    "type": "string"
                  },
                  "config": {
                    "title": "Botocore Config",
                    "description": "Advanced configuration for Botocore clients.",
                    "type": "object"
                  }
                }
              },
              "AwsCredentials": {
                "title": "AwsCredentials",
                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                "type": "object",
                "properties": {
                  "aws_access_key_id": {
                    "title": "AWS Access Key ID",
                    "description": "A specific AWS access key ID.",
                    "type": "string"
                  },
                  "aws_secret_access_key": {
                    "title": "AWS Access Key Secret",
                    "description": "A specific AWS secret access key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "aws_session_token": {
                    "title": "AWS Session Token",
                    "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                    "type": "string"
                  },
                  "profile_name": {
                    "title": "Profile Name",
                    "description": "The profile to use when creating your session.",
                    "type": "string"
                  },
                  "region_name": {
                    "title": "Region Name",
                    "description": "The AWS Region where you want to create new connections.",
                    "type": "string"
                  },
                  "aws_client_parameters": {
                    "title": "AWS Client Parameters",
                    "description": "Extra parameters to initialize the Client.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/AwsClientParameters"
                      }
                    ]
                  }
                },
                "block_type_slug": "aws-credentials",
                "secret_fields": [
                  "aws_secret_access_key"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "ecs-task": {
        "name": "ECS Task",
        "slug": "ecs-task",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-aws/ecs/#prefect_aws.ecs.ECSTask",
        "description": "Run a command as an ECS task. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "```python\nfrom prefect_aws.ecs import ECSTask\n\necs_task_block = ECSTask.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:19d0187ed1eb07b8473fb2d8a5aa7dbfff5995df37775c2e1eea891e24c46b93",
          "fields": {
            "title": "ECSTask",
            "description": "Run a command as an ECS task.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The slug for this task type.",
                "default": "ecs-task",
                "enum": [
                  "ecs-task"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment Variables",
                "description": "Environment variables to provide to the task run. These variables are set on the Prefect container at task runtime. These will not be set on the task definition.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "aws_credentials": {
                "title": "AWS Credentials",
                "description": "The AWS credentials to use to connect to ECS.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AwsCredentials"
                  }
                ]
              },
              "task_definition_arn": {
                "title": "Task Definition Arn",
                "description": "An identifier for an existing task definition to use. If fields are set on the `ECSTask` that conflict with the task definition, a new copy will be registered with the required values. Cannot be used with `task_definition`. If not provided, Prefect will generate and register a minimal task definition.",
                "type": "string"
              },
              "task_definition": {
                "title": "Task Definition",
                "description": "An ECS task definition to use. Prefect may set defaults or override fields on this task definition to match other `ECSTask` fields. Cannot be used with `task_definition_arn`. If not provided, Prefect will generate and register a minimal task definition.",
                "type": "object"
              },
              "family": {
                "title": "Family",
                "description": "A family for the task definition. If not provided, it will be inferred from the task definition. If the task definition does not have a family, the name will be generated. When flow and deployment metadata is available, the generated name will include their names. Values for this field will be slugified to match AWS character requirements.",
                "type": "string"
              },
              "image": {
                "title": "Image",
                "description": "The image to use for the Prefect container in the task. If this value is not null, it will override the value in the task definition. This value defaults to a Prefect base image matching your local versions.",
                "type": "string"
              },
              "auto_deregister_task_definition": {
                "title": "Auto Deregister Task Definition",
                "description": "If set, any task definitions that are created by this block will be deregistered. Existing task definitions linked by ARN will never be deregistered. Deregistering a task definition does not remove it from your AWS account, instead it will be marked as INACTIVE.",
                "default": true,
                "type": "boolean"
              },
              "cpu": {
                "title": "CPU",
                "description": "The amount of CPU to provide to the ECS task. Valid amounts are specified in the AWS documentation. If not provided, a default value of 1024 will be used unless present on the task definition.",
                "type": "integer"
              },
              "memory": {
                "title": "Memory",
                "description": "The amount of memory to provide to the ECS task. Valid amounts are specified in the AWS documentation. If not provided, a default value of 2048 will be used unless present on the task definition.",
                "type": "integer"
              },
              "execution_role_arn": {
                "title": "Execution Role ARN",
                "description": "An execution role to use for the task. This controls the permissions of the task when it is launching. If this value is not null, it will override the value in the task definition. An execution role must be provided to capture logs from the container.",
                "type": "string"
              },
              "configure_cloudwatch_logs": {
                "title": "Configure Cloudwatch Logs",
                "description": "If `True`, the Prefect container will be configured to send its output to the AWS CloudWatch logs service. This functionality requires an execution role with logs:CreateLogStream, logs:CreateLogGroup, and logs:PutLogEvents permissions. The default for this field is `False` unless `stream_output` is set.",
                "type": "boolean"
              },
              "cloudwatch_logs_options": {
                "title": "Cloudwatch Logs Options",
                "description": "When `configure_cloudwatch_logs` is enabled, this setting may be used to pass additional options to the CloudWatch logs configuration or override the default options. See the AWS documentation for available options. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html#create_awslogs_logdriver_options.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If `True`, logs will be streamed from the Prefect container to the local console. Unless you have configured AWS CloudWatch logs manually on your task definition, this requires the same prerequisites outlined in `configure_cloudwatch_logs`.",
                "type": "boolean"
              },
              "launch_type": {
                "title": "Launch Type",
                "description": "The type of ECS task run infrastructure that should be used. Note that 'FARGATE_SPOT' is not a formal ECS launch type, but we will configure the proper capacity provider stategy if set here.",
                "default": "FARGATE",
                "enum": [
                  "FARGATE",
                  "EC2",
                  "EXTERNAL",
                  "FARGATE_SPOT"
                ],
                "type": "string"
              },
              "vpc_id": {
                "title": "VPC ID",
                "description": "The AWS VPC to link the task run to. This is only applicable when using the 'awsvpc' network mode for your task. FARGATE tasks require this network  mode, but for EC2 tasks the default network mode is 'bridge'. If using the 'awsvpc' network mode and this field is null, your default VPC will be used. If no default VPC can be found, the task run will fail.",
                "type": "string"
              },
              "cluster": {
                "title": "Cluster",
                "description": "The ECS cluster to run the task in. The ARN or name may be provided. If not provided, the default cluster will be used.",
                "type": "string"
              },
              "task_role_arn": {
                "title": "Task Role ARN",
                "description": "A role to attach to the task run. This controls the permissions of the task while it is running.",
                "type": "string"
              },
              "task_customizations": {
                "title": "Task Customizations",
                "description": "A list of JSON 6902 patches to apply to the task run request. If a string is given, it will parsed as a JSON expression.",
                "type": "array",
                "format": "rfc6902",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "task_start_timeout_seconds": {
                "title": "Task Start Timeout Seconds",
                "description": "The amount of time to watch for the start of the ECS task before marking it as failed. The task must enter a RUNNING state to be considered started.",
                "default": 120,
                "type": "integer"
              },
              "task_watch_poll_interval": {
                "title": "Task Watch Poll Interval",
                "description": "The amount of time to wait between AWS API calls while monitoring the state of an ECS task.",
                "default": 5.0,
                "type": "number"
              }
            },
            "block_type_slug": "ecs-task",
            "secret_fields": [
              "aws_credentials.aws_secret_access_key"
            ],
            "block_schema_references": {
              "aws_credentials": {
                "block_type_slug": "aws-credentials",
                "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
              }
            },
            "definitions": {
              "AwsClientParameters": {
                "title": "AwsClientParameters",
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "type": "object",
                "properties": {
                  "api_version": {
                    "title": "API Version",
                    "description": "The API version to use.",
                    "type": "string"
                  },
                  "use_ssl": {
                    "title": "Use SSL",
                    "description": "Whether or not to use SSL.",
                    "default": true,
                    "type": "boolean"
                  },
                  "verify": {
                    "title": "Verify",
                    "description": "Whether or not to verify SSL certificates.",
                    "default": true,
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "format": "file-path"
                      }
                    ]
                  },
                  "verify_cert_path": {
                    "title": "Certificate Authority Bundle File Path",
                    "description": "Path to the CA cert bundle to use.",
                    "format": "file-path",
                    "type": "string"
                  },
                  "endpoint_url": {
                    "title": "Endpoint URL",
                    "description": "The complete URL to use for the constructed client.",
                    "type": "string"
                  },
                  "config": {
                    "title": "Botocore Config",
                    "description": "Advanced configuration for Botocore clients.",
                    "type": "object"
                  }
                }
              },
              "AwsCredentials": {
                "title": "AwsCredentials",
                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                "type": "object",
                "properties": {
                  "aws_access_key_id": {
                    "title": "AWS Access Key ID",
                    "description": "A specific AWS access key ID.",
                    "type": "string"
                  },
                  "aws_secret_access_key": {
                    "title": "AWS Access Key Secret",
                    "description": "A specific AWS secret access key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "aws_session_token": {
                    "title": "AWS Session Token",
                    "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                    "type": "string"
                  },
                  "profile_name": {
                    "title": "Profile Name",
                    "description": "The profile to use when creating your session.",
                    "type": "string"
                  },
                  "region_name": {
                    "title": "Region Name",
                    "description": "The AWS Region where you want to create new connections.",
                    "type": "string"
                  },
                  "aws_client_parameters": {
                    "title": "AWS Client Parameters",
                    "description": "Extra parameters to initialize the Client.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/AwsClientParameters"
                      }
                    ]
                  }
                },
                "block_type_slug": "aws-credentials",
                "secret_fields": [
                  "aws_secret_access_key"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "0.3.1"
        }
      },
      "minio-credentials": {
        "name": "MinIO Credentials",
        "slug": "minio-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/22vXcxsOrVeFrUwHfSoaeT/7607b876eb589a9028c8126e78f4c7b4/imageedit_7_2837870043.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-aws/credentials/#prefect_aws.credentials.MinIOCredentials",
        "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "Load stored MinIO credentials:\n```python\nfrom prefect_aws import MinIOCredentials\n\nminio_credentials_block = MinIOCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb",
          "fields": {
            "title": "MinIOCredentials",
            "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
            "type": "object",
            "properties": {
              "minio_root_user": {
                "title": "Minio Root User",
                "description": "Admin or root user.",
                "type": "string"
              },
              "minio_root_password": {
                "title": "Minio Root Password",
                "description": "Admin or root password.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "region_name": {
                "title": "Region Name",
                "description": "The AWS Region where you want to create new connections.",
                "type": "string"
              },
              "aws_client_parameters": {
                "title": "Aws Client Parameters",
                "description": "Extra parameters to initialize the Client.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AwsClientParameters"
                  }
                ]
              }
            },
            "required": [
              "minio_root_user",
              "minio_root_password"
            ],
            "block_type_slug": "minio-credentials",
            "secret_fields": [
              "minio_root_password"
            ],
            "block_schema_references": {},
            "definitions": {
              "AwsClientParameters": {
                "title": "AwsClientParameters",
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "type": "object",
                "properties": {
                  "api_version": {
                    "title": "API Version",
                    "description": "The API version to use.",
                    "type": "string"
                  },
                  "use_ssl": {
                    "title": "Use SSL",
                    "description": "Whether or not to use SSL.",
                    "default": true,
                    "type": "boolean"
                  },
                  "verify": {
                    "title": "Verify",
                    "description": "Whether or not to verify SSL certificates.",
                    "default": true,
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "format": "file-path"
                      }
                    ]
                  },
                  "verify_cert_path": {
                    "title": "Certificate Authority Bundle File Path",
                    "description": "Path to the CA cert bundle to use.",
                    "format": "file-path",
                    "type": "string"
                  },
                  "endpoint_url": {
                    "title": "Endpoint URL",
                    "description": "The complete URL to use for the constructed client.",
                    "type": "string"
                  },
                  "config": {
                    "title": "Botocore Config",
                    "description": "Advanced configuration for Botocore clients.",
                    "type": "object"
                  }
                }
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "s3-bucket": {
        "name": "S3 Bucket",
        "slug": "s3-bucket",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-aws/s3/#prefect_aws.s3.S3Bucket",
        "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "```python\nfrom prefect_aws.s3 import S3Bucket\n\ns3_bucket_block = S3Bucket.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:673e66bfc61bd548f0868df89675e13686756fdca11d284331a2a8ae8f08c9d6",
          "fields": {
            "title": "S3Bucket",
            "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO.",
            "type": "object",
            "properties": {
              "bucket_name": {
                "title": "Bucket Name",
                "description": "Name of your bucket.",
                "type": "string"
              },
              "credentials": {
                "title": "Credentials",
                "description": "A block containing your credentials to AWS or MinIO.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/AwsCredentials"
                  },
                  {
                    "$ref": "#/definitions/MinIOCredentials"
                  }
                ]
              },
              "bucket_folder": {
                "title": "Bucket Folder",
                "description": "A default path to a folder within the S3 bucket to use for reading and writing objects.",
                "default": "",
                "type": "string"
              }
            },
            "required": [
              "bucket_name"
            ],
            "block_type_slug": "s3-bucket",
            "secret_fields": [
              "credentials.aws_secret_access_key",
              "credentials.minio_root_password"
            ],
            "block_schema_references": {
              "credentials": [
                {
                  "block_type_slug": "aws-credentials",
                  "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
                },
                {
                  "block_type_slug": "minio-credentials",
                  "block_schema_checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb"
                }
              ]
            },
            "definitions": {
              "AwsClientParameters": {
                "title": "AwsClientParameters",
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "type": "object",
                "properties": {
                  "api_version": {
                    "title": "API Version",
                    "description": "The API version to use.",
                    "type": "string"
                  },
                  "use_ssl": {
                    "title": "Use SSL",
                    "description": "Whether or not to use SSL.",
                    "default": true,
                    "type": "boolean"
                  },
                  "verify": {
                    "title": "Verify",
                    "description": "Whether or not to verify SSL certificates.",
                    "default": true,
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "format": "file-path"
                      }
                    ]
                  },
                  "verify_cert_path": {
                    "title": "Certificate Authority Bundle File Path",
                    "description": "Path to the CA cert bundle to use.",
                    "format": "file-path",
                    "type": "string"
                  },
                  "endpoint_url": {
                    "title": "Endpoint URL",
                    "description": "The complete URL to use for the constructed client.",
                    "type": "string"
                  },
                  "config": {
                    "title": "Botocore Config",
                    "description": "Advanced configuration for Botocore clients.",
                    "type": "object"
                  }
                }
              },
              "AwsCredentials": {
                "title": "AwsCredentials",
                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                "type": "object",
                "properties": {
                  "aws_access_key_id": {
                    "title": "AWS Access Key ID",
                    "description": "A specific AWS access key ID.",
                    "type": "string"
                  },
                  "aws_secret_access_key": {
                    "title": "AWS Access Key Secret",
                    "description": "A specific AWS secret access key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "aws_session_token": {
                    "title": "AWS Session Token",
                    "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                    "type": "string"
                  },
                  "profile_name": {
                    "title": "Profile Name",
                    "description": "The profile to use when creating your session.",
                    "type": "string"
                  },
                  "region_name": {
                    "title": "Region Name",
                    "description": "The AWS Region where you want to create new connections.",
                    "type": "string"
                  },
                  "aws_client_parameters": {
                    "title": "AWS Client Parameters",
                    "description": "Extra parameters to initialize the Client.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/AwsClientParameters"
                      }
                    ]
                  }
                },
                "block_type_slug": "aws-credentials",
                "secret_fields": [
                  "aws_secret_access_key"
                ],
                "block_schema_references": {}
              },
              "MinIOCredentials": {
                "title": "MinIOCredentials",
                "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
                "type": "object",
                "properties": {
                  "minio_root_user": {
                    "title": "Minio Root User",
                    "description": "Admin or root user.",
                    "type": "string"
                  },
                  "minio_root_password": {
                    "title": "Minio Root Password",
                    "description": "Admin or root password.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "region_name": {
                    "title": "Region Name",
                    "description": "The AWS Region where you want to create new connections.",
                    "type": "string"
                  },
                  "aws_client_parameters": {
                    "title": "Aws Client Parameters",
                    "description": "Extra parameters to initialize the Client.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/AwsClientParameters"
                      }
                    ]
                  }
                },
                "required": [
                  "minio_root_user",
                  "minio_root_password"
                ],
                "block_type_slug": "minio-credentials",
                "secret_fields": [
                  "minio_root_password"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "0.3.1"
        }
      }
    }
  },
  "prefect-azure": {
    "block_types": {
      "azure-blob-storage-credentials": {
        "name": "Azure Blob Storage Credentials",
        "slug": "azure-blob-storage-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureBlobStorageCredentials",
        "description": "Block used to manage Blob Storage authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "Load stored Azure Blob Storage credentials:\n```python\nfrom prefect_azure import AzureBlobStorageCredentials\nazure_credentials_block = AzureBlobStorageCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:9bf39d40868a19b338176231b83556e7273373293fa16862a970014525001242",
          "fields": {
            "title": "AzureBlobStorageCredentials",
            "description": "Block used to manage Blob Storage authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string.",
            "type": "object",
            "properties": {
              "connection_string": {
                "title": "Connection String",
                "description": "If account_url is not provided, the connection string to authenticate.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "account_url": {
                "title": "Account Url",
                "description": "If a connection string is not provided, the URL to the Blob Storage account; will use DefaultAzureCredential to authenticate.",
                "type": "string"
              }
            },
            "block_type_slug": "azure-blob-storage-credentials",
            "secret_fields": [
              "connection_string"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.6"
        }
      },
      "azure-container-instance-credentials": {
        "name": "Azure Container Instance Credentials",
        "slug": "azure-container-instance-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials",
        "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "```python\nfrom prefect_azure.credentials import AzureContainerInstanceCredentials\n\nazure_container_instance_credentials_block = AzureContainerInstanceCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:17a9122f9f345a4547128cc05f7ff7146da9a72c4bac2850004fcc6c8d9be2d1",
          "fields": {
            "title": "AzureContainerInstanceCredentials",
            "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data.",
            "type": "object",
            "properties": {
              "client_id": {
                "title": "Client ID",
                "description": "The service principal client ID. If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                "type": "string"
              },
              "tenant_id": {
                "title": "Tenant ID",
                "description": "The service principal tenant ID.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "The service principal client secret.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "credential_kwargs": {
                "title": "Additional Credential Keyword Arguments",
                "description": "Additional keyword arguments to pass to `ClientSecretCredential` or `DefaultAzureCredential`.",
                "type": "object"
              }
            },
            "block_type_slug": "azure-container-instance-credentials",
            "secret_fields": [
              "client_secret"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.6"
        }
      },
      "azure-container-instance-job": {
        "name": "Azure Container Instance Job",
        "slug": "azure-container-instance-job",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-azure/container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob",
        "description": "Run tasks using Azure Container Instances. Note this block is experimental. The interface may change without notice. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "```python\nfrom prefect_azure.container_instance import AzureContainerInstanceJob\n\nazure_container_instance_job_block = AzureContainerInstanceJob.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:367f8171cce7f4937a49fe19febd1752cb95a2eed83e91ec40dd6120d90eff2f",
          "fields": {
            "title": "AzureContainerInstanceJob",
            "description": "Run tasks using Azure Container Instances. Note this block is experimental. The interface may change without notice.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The slug for this task type.",
                "default": "container-instance-job",
                "enum": [
                  "container-instance-job"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment Variables",
                "description": "Environment variables to provide to the task run. These variables are set on the Prefect container at task runtime. These will not be set on the task definition.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "aci_credentials": {
                "title": "Aci Credentials",
                "description": "Credentials for Azure Container Instances; if not provided will attempt to use DefaultAzureCredentials.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AzureContainerInstanceCredentials"
                  }
                ]
              },
              "resource_group_name": {
                "title": "Azure Resource Group Name",
                "description": "The name of the Azure Resource Group in which to run Prefect ACI tasks.",
                "type": "string"
              },
              "subscription_id": {
                "title": "Azure Subscription ID",
                "description": "The ID of the Azure subscription to create containers under.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "identities": {
                "title": "Identities",
                "description": "A list of user-assigned identities to associate with the container group. The identities should be an ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "title": "Image",
                "description": "The image to use for the Prefect container in the task. This value defaults to a Prefect base image matching your local versions.",
                "type": "string"
              },
              "entrypoint": {
                "title": "Entrypoint",
                "description": "The entrypoint of the container you wish you run. This value defaults to the entrypoint used by Prefect images and should only be changed when using a custom image that is not based on an official Prefect image. Any commands set on deployments will be passed to the entrypoint as parameters.",
                "default": "/opt/prefect/entrypoint.sh",
                "type": "string"
              },
              "image_registry": {
                "title": "Image Registry (Optional)",
                "description": "To use any private container registry with a username and password, choose DockerRegistry. To use a private Azure Container Registry with a managed identity, choose ACRManagedIdentity.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/DockerRegistry"
                  },
                  {
                    "$ref": "#/definitions/ACRManagedIdentity"
                  }
                ]
              },
              "cpu": {
                "title": "CPU",
                "description": "The number of virtual CPUs to assign to the task container. If not provided, a default value of 1.0 will be used.",
                "default": 1.0,
                "type": "number"
              },
              "gpu_count": {
                "title": "GPU Count",
                "description": "The number of GPUs to assign to the task container. If not provided, no GPU will be used.",
                "type": "integer"
              },
              "gpu_sku": {
                "title": "GPU SKU",
                "description": "The Azure GPU SKU to use. See the ACI documentation for a list of GPU SKUs available in each Azure region.",
                "type": "string"
              },
              "memory": {
                "title": "Memory",
                "description": "The amount of memory in gigabytes to provide to the ACI task. Valid amounts are specified in the Azure documentation. If not provided, a default value of  1.0 will be used unless present on the task definition.",
                "default": 1.0,
                "type": "number"
              },
              "subnet_ids": {
                "title": "Subnet IDs",
                "description": "A list of Azure subnet IDs the container should be connected to.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "dns_servers": {
                "title": "DNS Servers",
                "description": "A list of custom DNS Servers the container should use.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "If `True`, logs will be streamed from the Prefect container to the local console.",
                "type": "boolean"
              },
              "task_start_timeout_seconds": {
                "title": "Task Start Timeout Seconds",
                "description": "The amount of time to watch for the start of the ACI container. before marking it as failed.",
                "default": 240,
                "type": "integer"
              },
              "task_watch_poll_interval": {
                "title": "Task Watch Poll Interval",
                "description": "The number of seconds to wait between Azure API calls while monitoring the state of an Azure Container Instances task.",
                "default": 5.0,
                "type": "number"
              }
            },
            "required": [
              "resource_group_name",
              "subscription_id"
            ],
            "block_type_slug": "azure-container-instance-job",
            "secret_fields": [
              "aci_credentials.client_secret",
              "subscription_id",
              "image_registry.password"
            ],
            "block_schema_references": {
              "aci_credentials": {
                "block_type_slug": "azure-container-instance-credentials",
                "block_schema_checksum": "sha256:17a9122f9f345a4547128cc05f7ff7146da9a72c4bac2850004fcc6c8d9be2d1"
              },
              "image_registry": {
                "block_type_slug": "docker-registry",
                "block_schema_checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9"
              }
            },
            "definitions": {
              "AzureContainerInstanceCredentials": {
                "title": "AzureContainerInstanceCredentials",
                "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data.",
                "type": "object",
                "properties": {
                  "client_id": {
                    "title": "Client ID",
                    "description": "The service principal client ID. If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                    "type": "string"
                  },
                  "tenant_id": {
                    "title": "Tenant ID",
                    "description": "The service principal tenant ID.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                    "type": "string"
                  },
                  "client_secret": {
                    "title": "Client Secret",
                    "description": "The service principal client secret.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "credential_kwargs": {
                    "title": "Additional Credential Keyword Arguments",
                    "description": "Additional keyword arguments to pass to `ClientSecretCredential` or `DefaultAzureCredential`.",
                    "type": "object"
                  }
                },
                "block_type_slug": "azure-container-instance-credentials",
                "secret_fields": [
                  "client_secret"
                ],
                "block_schema_references": {}
              },
              "DockerRegistry": {
                "title": "DockerRegistry",
                "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
                "type": "object",
                "properties": {
                  "username": {
                    "title": "Username",
                    "description": "The username to log into the registry with.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password to log into the registry with.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "registry_url": {
                    "title": "Registry Url",
                    "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                    "type": "string"
                  },
                  "reauth": {
                    "title": "Reauth",
                    "description": "Whether or not to reauthenticate on each interaction.",
                    "default": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "registry_url"
                ],
                "block_type_slug": "docker-registry",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              },
              "ACRManagedIdentity": {
                "title": "ACRManagedIdentity",
                "description": "Use a Managed Identity to access Azure Container registry. Requires the\nuser-assigned managed identity be available to the ACI container group.",
                "type": "object",
                "properties": {
                  "registry_url": {
                    "title": "Registry URL",
                    "description": "The URL to the registry, such as myregistry.azurecr.io. Generally, 'http' or 'https' can be omitted.",
                    "type": "string"
                  },
                  "identity": {
                    "title": "Identity",
                    "description": "The user-assigned Azure managed identity for the private registry.",
                    "type": "string"
                  }
                },
                "required": [
                  "registry_url",
                  "identity"
                ]
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "0.2.6"
        }
      },
      "azure-cosmos-db-credentials": {
        "name": "Azure Cosmos DB Credentials",
        "slug": "azure-cosmos-db-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureCosmosDbCredentials",
        "description": "Block used to manage Cosmos DB authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "Load stored Azure Cosmos DB credentials:\n```python\nfrom prefect_azure import AzureCosmosDbCredentials\nazure_credentials_block = AzureCosmosDbCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:2f9f6e6f6c2eb570a05113638e6237fe74f7684993a351018657211d4705a83a",
          "fields": {
            "title": "AzureCosmosDbCredentials",
            "description": "Block used to manage Cosmos DB authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string.",
            "type": "object",
            "properties": {
              "connection_string": {
                "title": "Connection String",
                "description": "Includes the authorization information required.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "connection_string"
            ],
            "block_type_slug": "azure-cosmos-db-credentials",
            "secret_fields": [
              "connection_string"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.6"
        }
      },
      "azureml-credentials": {
        "name": "AzureML Credentials",
        "slug": "azureml-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureMlCredentials",
        "description": "Block used to manage authentication with AzureML. Azure authentication is\nhandled via the `azure` module. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "Load stored AzureML credentials:\n```python\nfrom prefect_azure import AzureMlCredentials\nazure_ml_credentials_block = AzureMlCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:7ade832cf475fd1ea5d88faf0003fad80abc9049bcc2bd5fed52476ffc800c79",
          "fields": {
            "title": "AzureMlCredentials",
            "description": "Block used to manage authentication with AzureML. Azure authentication is\nhandled via the `azure` module.",
            "type": "object",
            "properties": {
              "tenant_id": {
                "title": "Tenant Id",
                "description": "The active directory tenant that the service identity belongs to.",
                "type": "string"
              },
              "service_principal_id": {
                "title": "Service Principal Id",
                "description": "The service principal ID.",
                "type": "string"
              },
              "service_principal_password": {
                "title": "Service Principal Password",
                "description": "The service principal password/key.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "subscription_id": {
                "title": "Subscription Id",
                "description": "The Azure subscription ID containing the workspace.",
                "type": "string"
              },
              "resource_group": {
                "title": "Resource Group",
                "description": "The resource group containing the workspace.",
                "type": "string"
              },
              "workspace_name": {
                "title": "Workspace Name",
                "description": "The existing workspace name.",
                "type": "string"
              }
            },
            "required": [
              "tenant_id",
              "service_principal_id",
              "service_principal_password",
              "subscription_id",
              "resource_group",
              "workspace_name"
            ],
            "block_type_slug": "azureml-credentials",
            "secret_fields": [
              "service_principal_password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.6"
        }
      }
    }
  },
  "prefect-bitbucket": {
    "block_types": {
      "bitbucket-credentials": {
        "name": "BitBucket Credentials",
        "slug": "bitbucket-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250",
        "documentation_url": null,
        "description": "Store BitBucket credentials to interact with private BitBucket repositories. This block is part of the prefect-bitbucket collection. Install prefect-bitbucket with `pip install prefect-bitbucket` to use this block.",
        "code_example": "Load stored BitBucket credentials:\n```python\nfrom prefect_bitbucket import BitBucketCredentials\nbitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:ac894e8f4bff58261c7072b7b2a6e4154622bf68aa38ebca2bce58fedfd54e06",
          "fields": {
            "title": "BitBucketCredentials",
            "description": "Store BitBucket credentials to interact with private BitBucket repositories.",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "A BitBucket Personal Access Token.",
                "name": "Personal Access Token",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "username": {
                "title": "Username",
                "description": "Identification name unique across entire BitBucket site.",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "The password to authenticate to BitBucket.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "url": {
                "title": "URL",
                "description": "The base URL of your BitBucket instance.",
                "default": "https://api.bitbucket.org/",
                "type": "string"
              }
            },
            "block_type_slug": "bitbucket-credentials",
            "secret_fields": [
              "token",
              "password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      },
      "bitbucket-repository": {
        "name": "BitBucket Repository",
        "slug": "bitbucket-repository",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250",
        "documentation_url": null,
        "description": "Interact with files stored in BitBucket repositories. This block is part of the prefect-bitbucket collection. Install prefect-bitbucket with `pip install prefect-bitbucket` to use this block.",
        "code_example": "```python\nfrom prefect_bitbucket.repository import BitBucketRepository\n\nbitbucket_repository_block = BitBucketRepository.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:5cb02c2fabf32f266105998c7261862992d7f912bc61fcc97d6e27fa7e588f26",
          "fields": {
            "title": "BitBucketRepository",
            "description": "Interact with files stored in BitBucket repositories.",
            "type": "object",
            "properties": {
              "repository": {
                "title": "Repository",
                "description": "The URL of a BitBucket repository to read from in HTTPS format",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "An optional reference to pin to; can be a branch or tag.",
                "type": "string"
              },
              "bitbucket_credentials": {
                "title": "Bitbucket Credentials",
                "description": "An optional BitBucketCredentials block for authenticating with private BitBucket repos.",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitBucketCredentials"
                  }
                ]
              }
            },
            "required": [
              "repository"
            ],
            "block_type_slug": "bitbucket-repository",
            "secret_fields": [
              "bitbucket_credentials.token",
              "bitbucket_credentials.password"
            ],
            "block_schema_references": {
              "bitbucket_credentials": {
                "block_type_slug": "bitbucket-credentials",
                "block_schema_checksum": "sha256:ac894e8f4bff58261c7072b7b2a6e4154622bf68aa38ebca2bce58fedfd54e06"
              }
            },
            "definitions": {
              "BitBucketCredentials": {
                "title": "BitBucketCredentials",
                "description": "Store BitBucket credentials to interact with private BitBucket repositories.",
                "type": "object",
                "properties": {
                  "token": {
                    "title": "Token",
                    "description": "A BitBucket Personal Access Token.",
                    "name": "Personal Access Token",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "username": {
                    "title": "Username",
                    "description": "Identification name unique across entire BitBucket site.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password to authenticate to BitBucket.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "url": {
                    "title": "URL",
                    "description": "The base URL of your BitBucket instance.",
                    "default": "https://api.bitbucket.org/",
                    "type": "string"
                  }
                },
                "block_type_slug": "bitbucket-credentials",
                "secret_fields": [
                  "token",
                  "password"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "0.1.1"
        }
      }
    }
  },
  "prefect-census": {
    "block_types": {
      "census-credentials": {
        "name": "Census Credentials",
        "slug": "census-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-census/credentials/",
        "description": "Credentials block for credential use across Census tasks and flows. This block is part of the prefect-census collection. Install prefect-census with `pip install prefect-census` to use this block.",
        "code_example": "Load stored Census credentials:\n```python\nfrom prefect_census import CensusCredentials\n\ncensus_creds = CensusCredentials.load(\"BLOCK_NAME\")\n```\n\nUse CensusCredentials instance to trigger a sync run:\n```python\nimport asyncio\nfrom prefect import flow\nfrom prefect_census import CensusCredentials\n\ncredentials = CensusCredentials(api_key=\"my_api_key\")\n\n@flow\nasync def trigger_sync_run_flow():\n    async with credentials.get_client() as client:\n        await client.trigger_sync_run(sync_id=42)\n\nasyncio.run(trigger_sync_run_flow())\n```\n\nLoad saved Census credentials within a flow:\n```python\nfrom prefect import flow\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.syncs import trigger_census_sync\n\n@flow\ndef trigger_census_sync_run_flow():\n    credentials = CensusCredentials.load(\"my-census-credentials\")\n    trigger_census_sync(credentials=credentials, sync_id=42)\n\ntrigger_census_sync_run_flow()\n```",
        "block_schema": {
          "checksum": "sha256:4101a4f4096dd3a5cf916692b7948959ea88e87bb08d91d6d5cc929224da5f4a",
          "fields": {
            "title": "CensusCredentials",
            "description": "Credentials block for credential use across Census tasks and flows.",
            "type": "object",
            "properties": {
              "api_key": {
                "title": "API Key",
                "description": "API key to authenticate with the Census API.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "api_key"
            ],
            "block_type_slug": "census-credentials",
            "secret_fields": [
              "api_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      },
      "census-sync": {
        "name": "Census Sync",
        "slug": "census-sync",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-census/syncs/",
        "description": "Runs a Census sync This block is part of the prefect-census collection. Install prefect-census with `pip install prefect-census` to use this block.",
        "code_example": "Trigger a Census sync and wait for completion as a subflow:\n```python\nfrom prefect import flow\nfrom prefect_census import CensusSync, run_census_sync\n\n@flow\ndef my_census_flow():\n    census_sync = CensusSync.load(\"BLOCK_NAME\")\n\n    # do some setup\n\n    run_census_sync(census_sync)\n\n    # do some cleanup\n```",
        "block_schema": {
          "checksum": "sha256:2234f595059b193c7b7d096b663dba3178f3bb1d84138bbefe83a6452419ac7e",
          "fields": {
            "title": "CensusSync",
            "description": "Runs a Census sync",
            "type": "object",
            "properties": {
              "credentials": {
                "title": "Credentials",
                "description": "Credentials for authenticating with Census.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CensusCredentials"
                  }
                ]
              },
              "sync_id": {
                "title": "Sync Id",
                "description": "The ID of the sync to trigger.",
                "type": "integer"
              },
              "force_full_sync": {
                "title": "Force Full Sync",
                "description": "If `True`, a full sync will be triggered.",
                "default": false,
                "type": "boolean"
              },
              "max_wait_seconds": {
                "title": "Max Wait Seconds",
                "description": "The maximum number of seconds to wait for the sync to complete.",
                "default": 3600,
                "type": "integer"
              },
              "poll_frequency_seconds": {
                "title": "Poll Frequency Seconds",
                "description": "Number of seconds to wait between sync status checks.",
                "default": 5,
                "type": "integer"
              }
            },
            "required": [
              "credentials",
              "sync_id"
            ],
            "block_type_slug": "census-sync",
            "secret_fields": [
              "credentials.api_key"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "census-credentials",
                "block_schema_checksum": "sha256:4101a4f4096dd3a5cf916692b7948959ea88e87bb08d91d6d5cc929224da5f4a"
              }
            },
            "definitions": {
              "CensusCredentials": {
                "title": "CensusCredentials",
                "description": "Credentials block for credential use across Census tasks and flows.",
                "type": "object",
                "properties": {
                  "api_key": {
                    "title": "API Key",
                    "description": "API key to authenticate with the Census API.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  }
                },
                "required": [
                  "api_key"
                ],
                "block_type_slug": "census-credentials",
                "secret_fields": [
                  "api_key"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      }
    }
  },
  "prefect-dask": {
    "block_types": {}
  },
  "prefect-databricks": {
    "block_types": {
      "databricks-credentials": {
        "name": "Databricks Credentials",
        "slug": "databricks-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage Databricks authentication. This block is part of the prefect-databricks collection. Install prefect-databricks with `pip install prefect-databricks` to use this block.",
        "code_example": "Load stored Databricks credentials:\n```python\nfrom prefect_databricks import DatabricksCredentials\ndatabricks_credentials_block = DatabricksCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:58bae1446ee7a01ec90d15cf756f8acc221329e3b3580b077b508ff0f2425e35",
          "fields": {
            "title": "DatabricksCredentials",
            "description": "Block used to manage Databricks authentication.",
            "type": "object",
            "properties": {
              "databricks_instance": {
                "title": "Databricks Instance",
                "description": "Databricks instance used in formatting the endpoint URL.",
                "type": "string"
              },
              "token": {
                "title": "Token",
                "description": "The token to authenticate with Databricks.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "client_kwargs": {
                "title": "Client Kwargs",
                "description": "Additional keyword arguments to pass to AsyncClient.",
                "type": "object"
              }
            },
            "required": [
              "databricks_instance",
              "token"
            ],
            "block_type_slug": "databricks-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.4"
        }
      }
    }
  },
  "prefect-dbt": {
    "block_types": {
      "dbt-cli-bigquery-target-configs": {
        "name": "dbt CLI BigQuery Target Configs",
        "slug": "dbt-cli-bigquery-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cli/configs/bigquery/#prefect_dbt.cli.configs.bigquery.BigQueryTargetConfigs",
        "description": "dbt CLI target configs containing credentials and settings, specific to BigQuery. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored BigQueryTargetConfigs.\n```python\nfrom prefect_dbt.cli.configs import BigQueryTargetConfigs\n\nbigquery_target_configs = BigQueryTargetConfigs.load(\"BLOCK_NAME\")\n```\n\nInstantiate BigQueryTargetConfigs.\n```python\nfrom prefect_dbt.cli.configs import BigQueryTargetConfigs\nfrom prefect_gcp.credentials import GcpCredentials\n\ncredentials = GcpCredentials.load(\"BLOCK-NAME-PLACEHOLDER\")\ntarget_configs = BigQueryTargetConfigs(\n    schema=\"schema\",  # also known as dataset\n    credentials=credentials,\n)\n```",
        "block_schema": {
          "checksum": "sha256:842c5dc7d4d1557eedff36982eafeda7b0803915942f72224a7f627efdbe5ff5",
          "fields": {
            "title": "BigQueryTargetConfigs",
            "description": "dbt CLI target configs containing credentials and settings, specific to BigQuery.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                "type": "object"
              },
              "allow_field_overrides": {
                "title": "Allow Field Overrides",
                "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                "default": false,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "description": "The type of target.",
                "default": "bigquery",
                "enum": [
                  "bigquery"
                ],
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                "default": 4,
                "type": "integer"
              },
              "project": {
                "title": "Project",
                "description": "The project to use.",
                "type": "string"
              },
              "credentials": {
                "title": "Credentials",
                "description": "The credentials to use to authenticate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GcpCredentials"
                  }
                ]
              }
            },
            "required": [
              "schema"
            ],
            "block_type_slug": "dbt-cli-bigquery-target-configs",
            "secret_fields": [
              "credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "dbt-cli-global-configs": {
        "name": "dbt CLI Global Configs",
        "slug": "dbt-cli-global-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cli/configs/base/#prefect_dbt.cli.configs.base.GlobalConfigs",
        "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs). This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored GlobalConfigs:\n```python\nfrom prefect_dbt.cli.configs import GlobalConfigs\n\ndbt_cli_global_configs = GlobalConfigs.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:63df9d18a1aafde1cc8330cd49f81f6600b4ce6db92955973bbf341cc86e916d",
          "fields": {
            "title": "GlobalConfigs",
            "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                "type": "object"
              },
              "allow_field_overrides": {
                "title": "Allow Field Overrides",
                "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                "default": false,
                "type": "boolean"
              },
              "send_anonymous_usage_stats": {
                "title": "Send Anonymous Usage Stats",
                "description": "Whether usage stats are sent to dbt.",
                "type": "boolean"
              },
              "use_colors": {
                "title": "Use Colors",
                "description": "Colorize the output it prints in your terminal.",
                "type": "boolean"
              },
              "partial_parse": {
                "title": "Partial Parse",
                "description": "When partial parsing is enabled, dbt will use an stored internal manifest to determine which files have been changed (if any) since it last parsed the project.",
                "type": "boolean"
              },
              "printer_width": {
                "title": "Printer Width",
                "description": "Length of characters before starting a new line.",
                "type": "integer"
              },
              "write_json": {
                "title": "Write Json",
                "description": "Determines whether dbt writes JSON artifacts to the target/ directory.",
                "type": "boolean"
              },
              "warn_error": {
                "title": "Warn Error",
                "description": "Whether to convert dbt warnings into errors.",
                "type": "boolean"
              },
              "log_format": {
                "title": "Log Format",
                "description": "The LOG_FORMAT config specifies how dbt's logs should be formatted. If the value of this config is json, dbt will output fully structured logs in JSON format.",
                "type": "string"
              },
              "debug": {
                "title": "Debug",
                "description": "Whether to redirect dbt's debug logs to standard out.",
                "type": "boolean"
              },
              "version_check": {
                "title": "Version Check",
                "description": "Whether to raise an error if a project's version is used with an incompatible dbt version.",
                "type": "boolean"
              },
              "fail_fast": {
                "title": "Fail Fast",
                "description": "Make dbt exit immediately if a single resource fails to build.",
                "type": "boolean"
              },
              "use_experimental_parser": {
                "title": "Use Experimental Parser",
                "description": "Opt into the latest experimental version of the static parser.",
                "type": "boolean"
              },
              "static_parser": {
                "title": "Static Parser",
                "description": "Whether to use the [static parser](https://docs.getdbt.com/reference/parsing#static-parser).",
                "type": "boolean"
              }
            },
            "block_type_slug": "dbt-cli-global-configs",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "dbt-cli-postgres-target-configs": {
        "name": "dbt CLI Postgres Target Configs",
        "slug": "dbt-cli-postgres-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cli/configs/postgres/#prefect_dbt.cli.configs.postgres.PostgresTargetConfigs",
        "description": "dbt CLI target configs containing credentials and settings specific to Postgres. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored PostgresTargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import PostgresTargetConfigs\n\npostgres_target_configs = PostgresTargetConfigs.load(\"BLOCK_NAME\")\n```\n\nInstantiate PostgresTargetConfigs with DatabaseCredentials.\n```python\nfrom prefect_dbt.cli.configs import PostgresTargetConfigs\nfrom prefect_sqlalchemy import DatabaseCredentials, SyncDriver\n\ncredentials = DatabaseCredentials(\n    driver=SyncDriver.POSTGRESQL_PSYCOPG2,\n    username=\"prefect\",\n    password=\"prefect_password\",\n    database=\"postgres\",\n    host=\"host\",\n    port=8080\n)\ntarget_configs = PostgresTargetConfigs(credentials=credentials, schema=\"schema\")\n```",
        "block_schema": {
          "checksum": "sha256:1552a2d5c102961df4082329f39c10b8a51e26ee687148efd6d71ce8be8850c0",
          "fields": {
            "title": "PostgresTargetConfigs",
            "description": "dbt CLI target configs containing credentials and settings specific to Postgres.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                "type": "object"
              },
              "allow_field_overrides": {
                "title": "Allow Field Overrides",
                "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                "default": false,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "description": "The type of the target.",
                "default": "postgres",
                "enum": [
                  "postgres"
                ],
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                "default": 4,
                "type": "integer"
              },
              "credentials": {
                "title": "Credentials",
                "description": "The credentials to use to authenticate; if there are duplicate keys between credentials and TargetConfigs, e.g. schema, an error will be raised.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/SqlAlchemyConnector"
                  },
                  {
                    "$ref": "#/definitions/DatabaseCredentials"
                  }
                ]
              }
            },
            "required": [
              "schema",
              "credentials"
            ],
            "block_type_slug": "dbt-cli-postgres-target-configs",
            "secret_fields": [
              "credentials.connection_info.password",
              "credentials.password"
            ],
            "block_schema_references": {
              "credentials": [
                {
                  "block_type_slug": "sqlalchemy-connector",
                  "block_schema_checksum": "sha256:01e6c0bdaac125860811b201f5a5e98ffefd5f8a49f1398b6996aec362643acc"
                },
                {
                  "block_type_slug": "database-credentials",
                  "block_schema_checksum": "sha256:76d1ccbf0ab2038fea77e9689b91a7c8b6398e080e95d9303f65a93a4c03162e"
                }
              ]
            },
            "definitions": {
              "AsyncDriver": {
                "title": "AsyncDriver",
                "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
                "enum": [
                  "postgresql+asyncpg",
                  "sqlite+aiosqlite",
                  "mysql+asyncmy",
                  "mysql+aiomysql"
                ]
              },
              "SyncDriver": {
                "title": "SyncDriver",
                "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
                "enum": [
                  "postgresql+psycopg2",
                  "postgresql+pg8000",
                  "postgresql+psycopg2cffi",
                  "postgresql+pypostgresql",
                  "postgresql+pygresql",
                  "mysql+mysqldb",
                  "mysql+pymysql",
                  "mysql+mysqlconnector",
                  "mysql+cymysql",
                  "mysql+oursql",
                  "mysql+pyodbc",
                  "sqlite+pysqlite",
                  "sqlite+pysqlcipher",
                  "oracle+cx_oracle",
                  "mssql+pyodbc",
                  "mssql+mxodbc",
                  "mssql+pymssql"
                ]
              },
              "ConnectionComponents": {
                "title": "ConnectionComponents",
                "description": "Parameters to use to create a SQLAlchemy engine URL.\n\nAttributes:\n    driver: The driver name to use.\n    database: The name of the database to use.\n    username: The user name used to authenticate.\n    password: The password used to authenticate.\n    host: The host address of the database.\n    port: The port to connect to the database.\n    query: A dictionary of string keys to string values to be passed to the dialect\n        and/or the DBAPI upon connect.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "description": "The driver name to use.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the database to use.",
                    "type": "string"
                  },
                  "username": {
                    "title": "Username",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "host": {
                    "title": "Host",
                    "description": "The host address of the database.",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "The port to connect to the database.",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "driver",
                  "database"
                ]
              },
              "SqlAlchemyConnector": {
                "title": "SqlAlchemyConnector",
                "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
                "type": "object",
                "properties": {
                  "connection_info": {
                    "title": "Connection Info",
                    "description": "SQLAlchemy URL to create the engine; either create from components or create from a string.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ConnectionComponents"
                      },
                      {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 65536,
                        "format": "uri"
                      }
                    ]
                  },
                  "connect_args": {
                    "title": "Additional Connection Arguments",
                    "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                    "type": "object"
                  },
                  "fetch_size": {
                    "title": "Fetch Size",
                    "description": "The number of rows to fetch at a time.",
                    "default": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "connection_info"
                ],
                "block_type_slug": "sqlalchemy-connector",
                "secret_fields": [
                  "connection_info.password"
                ],
                "block_schema_references": {}
              },
              "DatabaseCredentials": {
                "title": "DatabaseCredentials",
                "description": "Block used to manage authentication with a database.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "description": "The driver name to use.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "username": {
                    "title": "Username",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the database to use.",
                    "type": "string"
                  },
                  "host": {
                    "title": "Host",
                    "description": "The host address of the database.",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "The port to connect to the database.",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "title": "Url",
                    "description": "Manually create and provide a URL to create the engine, this is useful for external dialects, e.g. Snowflake, because some of the params, such as 'warehouse', is not directly supported in the vanilla `sqlalchemy.engine.URL.create` method; do not provide this alongside with other URL params as it will raise a `ValueError`.",
                    "minLength": 1,
                    "maxLength": 65536,
                    "format": "uri",
                    "type": "string"
                  },
                  "connect_args": {
                    "title": "Connect Args",
                    "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                    "type": "object"
                  }
                },
                "block_type_slug": "database-credentials",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "dbt-cli-profile": {
        "name": "dbt CLI Profile",
        "slug": "dbt-cli-profile",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cli/credentials/#prefect_dbt.cli.credentials.DbtCliProfile",
        "description": "Profile for use across dbt CLI tasks and flows. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored dbt CLI profile:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\ndbt_cli_profile = DbtCliProfile.load(\"BLOCK_NAME\").get_profile()\n```\n\nGet a dbt Snowflake profile from DbtCliProfile by using SnowflakeTargetConfigs:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\nfrom prefect_snowflake.credentials import SnowflakeCredentials\nfrom prefect_snowflake.database import SnowflakeConnector\n\ncredentials = SnowflakeCredentials(\n    user=\"user\",\n    password=\"password\",\n    account=\"account.region.aws\",\n    role=\"role\",\n)\nconnector = SnowflakeConnector(\n    schema=\"public\",\n    database=\"database\",\n    warehouse=\"warehouse\",\n    credentials=credentials,\n)\ntarget_configs = SnowflakeTargetConfigs(\n    connector=connector\n)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\nprofile = dbt_cli_profile.get_profile()\n```\n\nGet a dbt Redshift profile from DbtCliProfile by using generic TargetConfigs:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\nfrom prefect_dbt.cli.configs import GlobalConfigs, TargetConfigs\n\ntarget_configs_extras = dict(\n    host=\"hostname.region.redshift.amazonaws.com\",\n    user=\"username\",\n    password=\"password1\",\n    port=5439,\n    dbname=\"analytics\",\n)\ntarget_configs = TargetConfigs(\n    type=\"redshift\",\n    schema=\"schema\",\n    threads=4,\n    extras=target_configs_extras\n)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\nprofile = dbt_cli_profile.get_profile()\n```",
        "block_schema": {
          "checksum": "sha256:f55b0f96cb9e1cf2f508bb882b25d9246b351be8b0ad18140a73281674a40d6d",
          "fields": {
            "title": "DbtCliProfile",
            "description": "Profile for use across dbt CLI tasks and flows.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Profile name used for populating profiles.yml.",
                "type": "string"
              },
              "target": {
                "title": "Target",
                "description": "The default target your dbt project will use.",
                "type": "string"
              },
              "target_configs": {
                "title": "Target Configs",
                "description": "Target configs contain credentials and settings, specific to the warehouse you're connecting to.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/SnowflakeTargetConfigs"
                  },
                  {
                    "$ref": "#/definitions/BigQueryTargetConfigs"
                  },
                  {
                    "$ref": "#/definitions/PostgresTargetConfigs"
                  },
                  {
                    "$ref": "#/definitions/TargetConfigs"
                  }
                ]
              },
              "global_configs": {
                "title": "Global Configs",
                "description": "Global configs control things like the visual output of logs, the manner in which dbt parses your project, and what to do when dbt finds a version mismatch or a failing model.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GlobalConfigs"
                  }
                ]
              }
            },
            "required": [
              "name",
              "target",
              "target_configs"
            ],
            "block_type_slug": "dbt-cli-profile",
            "secret_fields": [
              "target_configs.connector.credentials.password",
              "target_configs.connector.credentials.private_key",
              "target_configs.connector.credentials.private_key_passphrase",
              "target_configs.connector.credentials.token",
              "target_configs.credentials.service_account_info.*",
              "target_configs.credentials.connection_info.password",
              "target_configs.credentials.password"
            ],
            "block_schema_references": {
              "target_configs": [
                {
                  "block_type_slug": "dbt-cli-snowflake-target-configs",
                  "block_schema_checksum": "sha256:1e5be296bb63d7e2b04f0e9b99543db12521af269399d10e2bc290da4244a575"
                },
                {
                  "block_type_slug": "dbt-cli-bigquery-target-configs",
                  "block_schema_checksum": "sha256:842c5dc7d4d1557eedff36982eafeda7b0803915942f72224a7f627efdbe5ff5"
                },
                {
                  "block_type_slug": "dbt-cli-postgres-target-configs",
                  "block_schema_checksum": "sha256:1552a2d5c102961df4082329f39c10b8a51e26ee687148efd6d71ce8be8850c0"
                },
                {
                  "block_type_slug": "dbt-cli-target-configs",
                  "block_schema_checksum": "sha256:85f7476977e725617af89930889b843147320b2df37df911e24806dd6dacc870"
                }
              ],
              "global_configs": {
                "block_type_slug": "dbt-cli-global-configs",
                "block_schema_checksum": "sha256:63df9d18a1aafde1cc8330cd49f81f6600b4ce6db92955973bbf341cc86e916d"
              }
            },
            "definitions": {
              "SnowflakeCredentials": {
                "title": "SnowflakeCredentials",
                "description": "Block used to manage authentication with Snowflake.",
                "type": "object",
                "properties": {
                  "account": {
                    "title": "Account",
                    "description": "The snowflake account name.",
                    "example": "nh12345.us-east-2.aws",
                    "type": "string"
                  },
                  "user": {
                    "title": "User",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key": {
                    "title": "Private Key",
                    "description": "The PEM used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key_path": {
                    "title": "Private Key Path",
                    "description": "The path to the private key.",
                    "type": "string",
                    "format": "path"
                  },
                  "private_key_passphrase": {
                    "title": "Private Key Passphrase",
                    "description": "The password to use for the private key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "authenticator": {
                    "title": "Authenticator",
                    "description": "The type of authenticator to use for initializing connection.",
                    "default": "snowflake",
                    "enum": [
                      "snowflake",
                      "snowflake_jwt",
                      "externalbrowser",
                      "okta_endpoint",
                      "oauth",
                      "username_password_mfa"
                    ],
                    "type": "string"
                  },
                  "token": {
                    "title": "Token",
                    "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "endpoint": {
                    "title": "Endpoint",
                    "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                    "type": "string"
                  },
                  "role": {
                    "title": "Role",
                    "description": "The name of the default role to use.",
                    "type": "string"
                  },
                  "autocommit": {
                    "title": "Autocommit",
                    "description": "Whether to automatically commit.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "account",
                  "user"
                ],
                "block_type_slug": "snowflake-credentials",
                "secret_fields": [
                  "password",
                  "private_key",
                  "private_key_passphrase",
                  "token"
                ],
                "block_schema_references": {}
              },
              "SnowflakeConnector": {
                "title": "SnowflakeConnector",
                "description": "Perform data operations against a Snowflake database.",
                "type": "object",
                "properties": {
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to authenticate with Snowflake.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/SnowflakeCredentials"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the default database to use.",
                    "type": "string"
                  },
                  "warehouse": {
                    "title": "Warehouse",
                    "description": "The name of the default warehouse to use.",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The name of the default schema to use.",
                    "type": "string"
                  },
                  "fetch_size": {
                    "title": "Fetch Size",
                    "description": "The default number of rows to fetch at a time.",
                    "default": 1,
                    "type": "integer"
                  },
                  "poll_frequency_s": {
                    "title": "Poll Frequency [seconds]",
                    "description": "The number of seconds between checking query status for long running queries.",
                    "default": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "credentials",
                  "database",
                  "warehouse",
                  "schema"
                ],
                "block_type_slug": "snowflake-connector",
                "secret_fields": [
                  "credentials.password",
                  "credentials.private_key",
                  "credentials.private_key_passphrase",
                  "credentials.token"
                ],
                "block_schema_references": {
                  "credentials": {
                    "block_type_slug": "snowflake-credentials",
                    "block_schema_checksum": "sha256:b24edfb413527c951cb2a8b4b4c16aec096523f871d941889e29ac2e6e92e036"
                  }
                }
              },
              "SnowflakeTargetConfigs": {
                "title": "SnowflakeTargetConfigs",
                "description": "Target configs contain credentials and\nsettings, specific to Snowflake.\nTo find valid keys, head to the [Snowflake Profile](\nhttps://docs.getdbt.com/reference/warehouse-profiles/snowflake-profile)\npage.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The type of the target configs.",
                    "default": "snowflake",
                    "enum": [
                      "snowflake"
                    ],
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema to use for the target configs.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  },
                  "connector": {
                    "title": "Connector",
                    "description": "The connector to use.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/SnowflakeConnector"
                      }
                    ]
                  }
                },
                "required": [
                  "connector"
                ],
                "block_type_slug": "dbt-cli-snowflake-target-configs",
                "secret_fields": [
                  "connector.credentials.password",
                  "connector.credentials.private_key",
                  "connector.credentials.private_key_passphrase",
                  "connector.credentials.token"
                ],
                "block_schema_references": {
                  "connector": {
                    "block_type_slug": "snowflake-connector",
                    "block_schema_checksum": "sha256:dd0d36d69bbe0d44870fd754f3c00754e37e3f52209590083eaee4c585ce0bd0"
                  }
                }
              },
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              },
              "BigQueryTargetConfigs": {
                "title": "BigQueryTargetConfigs",
                "description": "dbt CLI target configs containing credentials and settings, specific to BigQuery.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The type of target.",
                    "default": "bigquery",
                    "enum": [
                      "bigquery"
                    ],
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The project to use.",
                    "type": "string"
                  },
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to use to authenticate.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/GcpCredentials"
                      }
                    ]
                  }
                },
                "required": [
                  "schema"
                ],
                "block_type_slug": "dbt-cli-bigquery-target-configs",
                "secret_fields": [
                  "credentials.service_account_info.*"
                ],
                "block_schema_references": {
                  "credentials": {
                    "block_type_slug": "gcp-credentials",
                    "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
                  }
                }
              },
              "AsyncDriver": {
                "title": "AsyncDriver",
                "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
                "enum": [
                  "postgresql+asyncpg",
                  "sqlite+aiosqlite",
                  "mysql+asyncmy",
                  "mysql+aiomysql"
                ]
              },
              "SyncDriver": {
                "title": "SyncDriver",
                "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
                "enum": [
                  "postgresql+psycopg2",
                  "postgresql+pg8000",
                  "postgresql+psycopg2cffi",
                  "postgresql+pypostgresql",
                  "postgresql+pygresql",
                  "mysql+mysqldb",
                  "mysql+pymysql",
                  "mysql+mysqlconnector",
                  "mysql+cymysql",
                  "mysql+oursql",
                  "mysql+pyodbc",
                  "sqlite+pysqlite",
                  "sqlite+pysqlcipher",
                  "oracle+cx_oracle",
                  "mssql+pyodbc",
                  "mssql+mxodbc",
                  "mssql+pymssql"
                ]
              },
              "ConnectionComponents": {
                "title": "ConnectionComponents",
                "description": "Parameters to use to create a SQLAlchemy engine URL.\n\nAttributes:\n    driver: The driver name to use.\n    database: The name of the database to use.\n    username: The user name used to authenticate.\n    password: The password used to authenticate.\n    host: The host address of the database.\n    port: The port to connect to the database.\n    query: A dictionary of string keys to string values to be passed to the dialect\n        and/or the DBAPI upon connect.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "description": "The driver name to use.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the database to use.",
                    "type": "string"
                  },
                  "username": {
                    "title": "Username",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "host": {
                    "title": "Host",
                    "description": "The host address of the database.",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "The port to connect to the database.",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "driver",
                  "database"
                ]
              },
              "SqlAlchemyConnector": {
                "title": "SqlAlchemyConnector",
                "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
                "type": "object",
                "properties": {
                  "connection_info": {
                    "title": "Connection Info",
                    "description": "SQLAlchemy URL to create the engine; either create from components or create from a string.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ConnectionComponents"
                      },
                      {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 65536,
                        "format": "uri"
                      }
                    ]
                  },
                  "connect_args": {
                    "title": "Additional Connection Arguments",
                    "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                    "type": "object"
                  },
                  "fetch_size": {
                    "title": "Fetch Size",
                    "description": "The number of rows to fetch at a time.",
                    "default": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "connection_info"
                ],
                "block_type_slug": "sqlalchemy-connector",
                "secret_fields": [
                  "connection_info.password"
                ],
                "block_schema_references": {}
              },
              "DatabaseCredentials": {
                "title": "DatabaseCredentials",
                "description": "Block used to manage authentication with a database.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "description": "The driver name to use.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "username": {
                    "title": "Username",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the database to use.",
                    "type": "string"
                  },
                  "host": {
                    "title": "Host",
                    "description": "The host address of the database.",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "The port to connect to the database.",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "title": "Url",
                    "description": "Manually create and provide a URL to create the engine, this is useful for external dialects, e.g. Snowflake, because some of the params, such as 'warehouse', is not directly supported in the vanilla `sqlalchemy.engine.URL.create` method; do not provide this alongside with other URL params as it will raise a `ValueError`.",
                    "minLength": 1,
                    "maxLength": 65536,
                    "format": "uri",
                    "type": "string"
                  },
                  "connect_args": {
                    "title": "Connect Args",
                    "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                    "type": "object"
                  }
                },
                "block_type_slug": "database-credentials",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              },
              "PostgresTargetConfigs": {
                "title": "PostgresTargetConfigs",
                "description": "dbt CLI target configs containing credentials and settings specific to Postgres.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The type of the target.",
                    "default": "postgres",
                    "enum": [
                      "postgres"
                    ],
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  },
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to use to authenticate; if there are duplicate keys between credentials and TargetConfigs, e.g. schema, an error will be raised.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/SqlAlchemyConnector"
                      },
                      {
                        "$ref": "#/definitions/DatabaseCredentials"
                      }
                    ]
                  }
                },
                "required": [
                  "schema",
                  "credentials"
                ],
                "block_type_slug": "dbt-cli-postgres-target-configs",
                "secret_fields": [
                  "credentials.connection_info.password",
                  "credentials.password"
                ],
                "block_schema_references": {
                  "credentials": [
                    {
                      "block_type_slug": "sqlalchemy-connector",
                      "block_schema_checksum": "sha256:01e6c0bdaac125860811b201f5a5e98ffefd5f8a49f1398b6996aec362643acc"
                    },
                    {
                      "block_type_slug": "database-credentials",
                      "block_schema_checksum": "sha256:76d1ccbf0ab2038fea77e9689b91a7c8b6398e080e95d9303f65a93a4c03162e"
                    }
                  ]
                }
              },
              "TargetConfigs": {
                "title": "TargetConfigs",
                "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The name of the database warehouse.",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  }
                },
                "required": [
                  "type",
                  "schema"
                ],
                "block_type_slug": "dbt-cli-target-configs",
                "secret_fields": [],
                "block_schema_references": {}
              },
              "GlobalConfigs": {
                "title": "GlobalConfigs",
                "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "send_anonymous_usage_stats": {
                    "title": "Send Anonymous Usage Stats",
                    "description": "Whether usage stats are sent to dbt.",
                    "type": "boolean"
                  },
                  "use_colors": {
                    "title": "Use Colors",
                    "description": "Colorize the output it prints in your terminal.",
                    "type": "boolean"
                  },
                  "partial_parse": {
                    "title": "Partial Parse",
                    "description": "When partial parsing is enabled, dbt will use an stored internal manifest to determine which files have been changed (if any) since it last parsed the project.",
                    "type": "boolean"
                  },
                  "printer_width": {
                    "title": "Printer Width",
                    "description": "Length of characters before starting a new line.",
                    "type": "integer"
                  },
                  "write_json": {
                    "title": "Write Json",
                    "description": "Determines whether dbt writes JSON artifacts to the target/ directory.",
                    "type": "boolean"
                  },
                  "warn_error": {
                    "title": "Warn Error",
                    "description": "Whether to convert dbt warnings into errors.",
                    "type": "boolean"
                  },
                  "log_format": {
                    "title": "Log Format",
                    "description": "The LOG_FORMAT config specifies how dbt's logs should be formatted. If the value of this config is json, dbt will output fully structured logs in JSON format.",
                    "type": "string"
                  },
                  "debug": {
                    "title": "Debug",
                    "description": "Whether to redirect dbt's debug logs to standard out.",
                    "type": "boolean"
                  },
                  "version_check": {
                    "title": "Version Check",
                    "description": "Whether to raise an error if a project's version is used with an incompatible dbt version.",
                    "type": "boolean"
                  },
                  "fail_fast": {
                    "title": "Fail Fast",
                    "description": "Make dbt exit immediately if a single resource fails to build.",
                    "type": "boolean"
                  },
                  "use_experimental_parser": {
                    "title": "Use Experimental Parser",
                    "description": "Opt into the latest experimental version of the static parser.",
                    "type": "boolean"
                  },
                  "static_parser": {
                    "title": "Static Parser",
                    "description": "Whether to use the [static parser](https://docs.getdbt.com/reference/parsing#static-parser).",
                    "type": "boolean"
                  }
                },
                "block_type_slug": "dbt-cli-global-configs",
                "secret_fields": [],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "dbt-cli-snowflake-target-configs": {
        "name": "dbt CLI Snowflake Target Configs",
        "slug": "dbt-cli-snowflake-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cli/configs/snowflake/#prefect_dbt.cli.configs.snowflake.SnowflakeTargetConfigs",
        "description": "Target configs contain credentials and\nsettings, specific to Snowflake.\nTo find valid keys, head to the [Snowflake Profile](\nhttps://docs.getdbt.com/reference/warehouse-profiles/snowflake-profile)\npage. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored SnowflakeTargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\n\nsnowflake_target_configs = SnowflakeTargetConfigs.load(\"BLOCK_NAME\")\n```\n\nInstantiate SnowflakeTargetConfigs.\n```python\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\nfrom prefect_snowflake.credentials import SnowflakeCredentials\nfrom prefect_snowflake.database import SnowflakeConnector\n\ncredentials = SnowflakeCredentials(\n    user=\"user\",\n    password=\"password\",\n    account=\"account.region.aws\",\n    role=\"role\",\n)\nconnector = SnowflakeConnector(\n    schema=\"public\",\n    database=\"database\",\n    warehouse=\"warehouse\",\n    credentials=credentials,\n)\ntarget_configs = SnowflakeTargetConfigs(\n    connector=connector,\n    extras={\"retry_on_database_errors\": True},\n)\n```",
        "block_schema": {
          "checksum": "sha256:1e5be296bb63d7e2b04f0e9b99543db12521af269399d10e2bc290da4244a575",
          "fields": {
            "title": "SnowflakeTargetConfigs",
            "description": "Target configs contain credentials and\nsettings, specific to Snowflake.\nTo find valid keys, head to the [Snowflake Profile](\nhttps://docs.getdbt.com/reference/warehouse-profiles/snowflake-profile)\npage.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                "type": "object"
              },
              "allow_field_overrides": {
                "title": "Allow Field Overrides",
                "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                "default": false,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "description": "The type of the target configs.",
                "default": "snowflake",
                "enum": [
                  "snowflake"
                ],
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "description": "The schema to use for the target configs.",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                "default": 4,
                "type": "integer"
              },
              "connector": {
                "title": "Connector",
                "description": "The connector to use.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SnowflakeConnector"
                  }
                ]
              }
            },
            "required": [
              "connector"
            ],
            "block_type_slug": "dbt-cli-snowflake-target-configs",
            "secret_fields": [
              "connector.credentials.password",
              "connector.credentials.private_key",
              "connector.credentials.private_key_passphrase",
              "connector.credentials.token"
            ],
            "block_schema_references": {
              "connector": {
                "block_type_slug": "snowflake-connector",
                "block_schema_checksum": "sha256:dd0d36d69bbe0d44870fd754f3c00754e37e3f52209590083eaee4c585ce0bd0"
              }
            },
            "definitions": {
              "SnowflakeCredentials": {
                "title": "SnowflakeCredentials",
                "description": "Block used to manage authentication with Snowflake.",
                "type": "object",
                "properties": {
                  "account": {
                    "title": "Account",
                    "description": "The snowflake account name.",
                    "example": "nh12345.us-east-2.aws",
                    "type": "string"
                  },
                  "user": {
                    "title": "User",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key": {
                    "title": "Private Key",
                    "description": "The PEM used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key_path": {
                    "title": "Private Key Path",
                    "description": "The path to the private key.",
                    "type": "string",
                    "format": "path"
                  },
                  "private_key_passphrase": {
                    "title": "Private Key Passphrase",
                    "description": "The password to use for the private key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "authenticator": {
                    "title": "Authenticator",
                    "description": "The type of authenticator to use for initializing connection.",
                    "default": "snowflake",
                    "enum": [
                      "snowflake",
                      "snowflake_jwt",
                      "externalbrowser",
                      "okta_endpoint",
                      "oauth",
                      "username_password_mfa"
                    ],
                    "type": "string"
                  },
                  "token": {
                    "title": "Token",
                    "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "endpoint": {
                    "title": "Endpoint",
                    "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                    "type": "string"
                  },
                  "role": {
                    "title": "Role",
                    "description": "The name of the default role to use.",
                    "type": "string"
                  },
                  "autocommit": {
                    "title": "Autocommit",
                    "description": "Whether to automatically commit.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "account",
                  "user"
                ],
                "block_type_slug": "snowflake-credentials",
                "secret_fields": [
                  "password",
                  "private_key",
                  "private_key_passphrase",
                  "token"
                ],
                "block_schema_references": {}
              },
              "SnowflakeConnector": {
                "title": "SnowflakeConnector",
                "description": "Perform data operations against a Snowflake database.",
                "type": "object",
                "properties": {
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to authenticate with Snowflake.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/SnowflakeCredentials"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the default database to use.",
                    "type": "string"
                  },
                  "warehouse": {
                    "title": "Warehouse",
                    "description": "The name of the default warehouse to use.",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The name of the default schema to use.",
                    "type": "string"
                  },
                  "fetch_size": {
                    "title": "Fetch Size",
                    "description": "The default number of rows to fetch at a time.",
                    "default": 1,
                    "type": "integer"
                  },
                  "poll_frequency_s": {
                    "title": "Poll Frequency [seconds]",
                    "description": "The number of seconds between checking query status for long running queries.",
                    "default": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "credentials",
                  "database",
                  "warehouse",
                  "schema"
                ],
                "block_type_slug": "snowflake-connector",
                "secret_fields": [
                  "credentials.password",
                  "credentials.private_key",
                  "credentials.private_key_passphrase",
                  "credentials.token"
                ],
                "block_schema_references": {
                  "credentials": {
                    "block_type_slug": "snowflake-credentials",
                    "block_schema_checksum": "sha256:b24edfb413527c951cb2a8b4b4c16aec096523f871d941889e29ac2e6e92e036"
                  }
                }
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "dbt-cli-target-configs": {
        "name": "dbt CLI Target Configs",
        "slug": "dbt-cli-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cli/configs/base/#prefect_dbt.cli.configs.base.TargetConfigs",
        "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored TargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import TargetConfigs\n\ndbt_cli_target_configs = TargetConfigs.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:85f7476977e725617af89930889b843147320b2df37df911e24806dd6dacc870",
          "fields": {
            "title": "TargetConfigs",
            "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
            "type": "object",
            "properties": {
              "extras": {
                "title": "Extras",
                "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                "type": "object"
              },
              "allow_field_overrides": {
                "title": "Allow Field Overrides",
                "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                "default": false,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "description": "The name of the database warehouse.",
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                "type": "string"
              },
              "threads": {
                "title": "Threads",
                "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                "default": 4,
                "type": "integer"
              }
            },
            "required": [
              "type",
              "schema"
            ],
            "block_type_slug": "dbt-cli-target-configs",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "dbt-cloud-credentials": {
        "name": "dbt Cloud Credentials",
        "slug": "dbt-cloud-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cloud/credentials/#prefect_dbt.cloud.credentials.DbtCloudCredentials",
        "description": "Credentials block for credential use across dbt Cloud tasks and flows. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored dbt Cloud credentials:\n```python\nfrom prefect_dbt.cloud import DbtCloudCredentials\n\ndbt_cloud_credentials = DbtCloudCredentials.load(\"BLOCK_NAME\")\n```\n\nUse DbtCloudCredentials instance to trigger a job run:\n```python\nfrom prefect_dbt.cloud import DbtCloudCredentials\n\ncredentials = DbtCloudCredentials(api_key=\"my_api_key\", account_id=123456789)\n\nasync with dbt_cloud_credentials.get_administrative_client() as client:\n    client.trigger_job_run(job_id=1)\n```\n\nLoad saved dbt Cloud credentials within a flow:\n```python\nfrom prefect import flow\n\nfrom prefect_dbt.cloud import DbtCloudCredentials\nfrom prefect_dbt.cloud.jobs import trigger_dbt_cloud_job_run\n\n\n@flow\ndef trigger_dbt_cloud_job_run_flow():\n    credentials = DbtCloudCredentials.load(\"my-dbt-credentials\")\n    trigger_dbt_cloud_job_run(dbt_cloud_credentials=credentials, job_id=1)\n\ntrigger_dbt_cloud_job_run_flow()\n```",
        "block_schema": {
          "checksum": "sha256:0e1b2e94e09041e7d732822354503e87b99ddb31422d9d2c83c671be249aa231",
          "fields": {
            "title": "DbtCloudCredentials",
            "description": "Credentials block for credential use across dbt Cloud tasks and flows.",
            "type": "object",
            "properties": {
              "api_key": {
                "title": "API Key",
                "description": "A dbt Cloud API key to use for authentication.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "account_id": {
                "title": "Account ID",
                "description": "The ID of your dbt Cloud account.",
                "type": "integer"
              },
              "domain": {
                "title": "Domain",
                "description": "The base domain of your dbt Cloud instance.",
                "default": "cloud.getdbt.com",
                "type": "string"
              }
            },
            "required": [
              "api_key",
              "account_id"
            ],
            "block_type_slug": "dbt-cloud-credentials",
            "secret_fields": [
              "api_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "dbt-core-operation": {
        "name": "dbt Core Operation",
        "slug": "dbt-core-operation",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-dbt/cli/commands/#prefect_dbt.cli.commands.DbtCoreOperation",
        "description": "A block representing a dbt operation, containing multiple dbt and shell commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load a configured block.\n```python\nfrom prefect_dbt import DbtCoreOperation\n\ndbt_op = DbtCoreOperation.load(\"BLOCK_NAME\")\n```\n\nExecute short-lasting dbt debug and list with a custom DbtCliProfile.\n```python\nfrom prefect_dbt import DbtCoreOperation, DbtCliProfile\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\nfrom prefect_snowflake import SnowflakeConnector\n\nsnowflake_connector = await SnowflakeConnector.load(\"snowflake-connector\")\ntarget_configs = SnowflakeTargetConfigs(connector=snowflake_connector)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\nprofile = dbt_cli_profile.get_profile()\ndbt_init = DbtCoreOperation(\n    commands=[\"dbt debug\", \"dbt list\"],\n    dbt_cli_profile=dbt_cli_profile,\n    overwrite_profiles=True\n)\ndbt_init.run()\n```\n\nExecute a longer-lasting dbt run as a context manager.\n```python\nwith DbtCoreOperation(commands=[\"dbt run\"]) as dbt_run:\n    dbt_process = dbt_run.trigger()\n    # do other things\n    dbt_process.wait_for_completion()\n    dbt_output = dbt_process.fetch_result()\n```",
        "block_schema": {
          "checksum": "sha256:0f685bc693353f66d1fc83687c8af67511feba052b5343506033141c9a2441c7",
          "fields": {
            "title": "DbtCoreOperation",
            "description": "A block representing a dbt operation, containing multiple dbt and shell commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method.",
            "type": "object",
            "properties": {
              "commands": {
                "title": "Commands",
                "description": "A list of commands to execute sequentially.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "Whether to stream output.",
                "default": true,
                "type": "boolean"
              },
              "env": {
                "title": "Environment Variables",
                "description": "Environment variables to use for the subprocess.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "working_dir": {
                "title": "Working Directory",
                "description": "The absolute path to the working directory the command will be executed within.",
                "format": "directory-path",
                "type": "string"
              },
              "shell": {
                "title": "Shell",
                "description": "The shell to run the command with; if unset, defaults to `powershell` on Windows and `bash` on other platforms.",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "The extension to use for the temporary file; if unset, defaults to `.ps1` on Windows and `.sh` on other platforms.",
                "type": "string"
              },
              "profiles_dir": {
                "title": "Profiles Dir",
                "description": "The directory to search for the profiles.yml file. Setting this appends the `--profiles-dir` option to the dbt commands provided. If this is not set, will try using the DBT_PROFILES_DIR environment variable, but if that's also not set, will use the default directory `$HOME/.dbt/`.",
                "type": "string",
                "format": "path"
              },
              "project_dir": {
                "title": "Project Dir",
                "description": "The directory to search for the dbt_project.yml file. Default is the current working directory and its parents.",
                "type": "string",
                "format": "path"
              },
              "overwrite_profiles": {
                "title": "Overwrite Profiles",
                "description": "Whether the existing profiles.yml file under profiles_dir should be overwritten with a new profile.",
                "default": false,
                "type": "boolean"
              },
              "dbt_cli_profile": {
                "title": "Dbt Cli Profile",
                "description": "Profiles class containing the profile written to profiles.yml. Note! This is optional and will raise an error if profiles.yml already exists under profile_dir and overwrite_profiles is set to False.",
                "allOf": [
                  {
                    "$ref": "#/definitions/DbtCliProfile"
                  }
                ]
              }
            },
            "required": [
              "commands"
            ],
            "block_type_slug": "dbt-core-operation",
            "secret_fields": [
              "dbt_cli_profile.target_configs.connector.credentials.password",
              "dbt_cli_profile.target_configs.connector.credentials.private_key",
              "dbt_cli_profile.target_configs.connector.credentials.private_key_passphrase",
              "dbt_cli_profile.target_configs.connector.credentials.token",
              "dbt_cli_profile.target_configs.credentials.service_account_info.*",
              "dbt_cli_profile.target_configs.credentials.connection_info.password",
              "dbt_cli_profile.target_configs.credentials.password"
            ],
            "block_schema_references": {
              "dbt_cli_profile": {
                "block_type_slug": "dbt-cli-profile",
                "block_schema_checksum": "sha256:f55b0f96cb9e1cf2f508bb882b25d9246b351be8b0ad18140a73281674a40d6d"
              }
            },
            "definitions": {
              "SnowflakeCredentials": {
                "title": "SnowflakeCredentials",
                "description": "Block used to manage authentication with Snowflake.",
                "type": "object",
                "properties": {
                  "account": {
                    "title": "Account",
                    "description": "The snowflake account name.",
                    "example": "nh12345.us-east-2.aws",
                    "type": "string"
                  },
                  "user": {
                    "title": "User",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key": {
                    "title": "Private Key",
                    "description": "The PEM used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key_path": {
                    "title": "Private Key Path",
                    "description": "The path to the private key.",
                    "type": "string",
                    "format": "path"
                  },
                  "private_key_passphrase": {
                    "title": "Private Key Passphrase",
                    "description": "The password to use for the private key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "authenticator": {
                    "title": "Authenticator",
                    "description": "The type of authenticator to use for initializing connection.",
                    "default": "snowflake",
                    "enum": [
                      "snowflake",
                      "snowflake_jwt",
                      "externalbrowser",
                      "okta_endpoint",
                      "oauth",
                      "username_password_mfa"
                    ],
                    "type": "string"
                  },
                  "token": {
                    "title": "Token",
                    "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "endpoint": {
                    "title": "Endpoint",
                    "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                    "type": "string"
                  },
                  "role": {
                    "title": "Role",
                    "description": "The name of the default role to use.",
                    "type": "string"
                  },
                  "autocommit": {
                    "title": "Autocommit",
                    "description": "Whether to automatically commit.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "account",
                  "user"
                ],
                "block_type_slug": "snowflake-credentials",
                "secret_fields": [
                  "password",
                  "private_key",
                  "private_key_passphrase",
                  "token"
                ],
                "block_schema_references": {}
              },
              "SnowflakeConnector": {
                "title": "SnowflakeConnector",
                "description": "Perform data operations against a Snowflake database.",
                "type": "object",
                "properties": {
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to authenticate with Snowflake.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/SnowflakeCredentials"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the default database to use.",
                    "type": "string"
                  },
                  "warehouse": {
                    "title": "Warehouse",
                    "description": "The name of the default warehouse to use.",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The name of the default schema to use.",
                    "type": "string"
                  },
                  "fetch_size": {
                    "title": "Fetch Size",
                    "description": "The default number of rows to fetch at a time.",
                    "default": 1,
                    "type": "integer"
                  },
                  "poll_frequency_s": {
                    "title": "Poll Frequency [seconds]",
                    "description": "The number of seconds between checking query status for long running queries.",
                    "default": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "credentials",
                  "database",
                  "warehouse",
                  "schema"
                ],
                "block_type_slug": "snowflake-connector",
                "secret_fields": [
                  "credentials.password",
                  "credentials.private_key",
                  "credentials.private_key_passphrase",
                  "credentials.token"
                ],
                "block_schema_references": {
                  "credentials": {
                    "block_type_slug": "snowflake-credentials",
                    "block_schema_checksum": "sha256:b24edfb413527c951cb2a8b4b4c16aec096523f871d941889e29ac2e6e92e036"
                  }
                }
              },
              "SnowflakeTargetConfigs": {
                "title": "SnowflakeTargetConfigs",
                "description": "Target configs contain credentials and\nsettings, specific to Snowflake.\nTo find valid keys, head to the [Snowflake Profile](\nhttps://docs.getdbt.com/reference/warehouse-profiles/snowflake-profile)\npage.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The type of the target configs.",
                    "default": "snowflake",
                    "enum": [
                      "snowflake"
                    ],
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema to use for the target configs.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  },
                  "connector": {
                    "title": "Connector",
                    "description": "The connector to use.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/SnowflakeConnector"
                      }
                    ]
                  }
                },
                "required": [
                  "connector"
                ],
                "block_type_slug": "dbt-cli-snowflake-target-configs",
                "secret_fields": [
                  "connector.credentials.password",
                  "connector.credentials.private_key",
                  "connector.credentials.private_key_passphrase",
                  "connector.credentials.token"
                ],
                "block_schema_references": {
                  "connector": {
                    "block_type_slug": "snowflake-connector",
                    "block_schema_checksum": "sha256:dd0d36d69bbe0d44870fd754f3c00754e37e3f52209590083eaee4c585ce0bd0"
                  }
                }
              },
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              },
              "BigQueryTargetConfigs": {
                "title": "BigQueryTargetConfigs",
                "description": "dbt CLI target configs containing credentials and settings, specific to BigQuery.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The type of target.",
                    "default": "bigquery",
                    "enum": [
                      "bigquery"
                    ],
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The project to use.",
                    "type": "string"
                  },
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to use to authenticate.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/GcpCredentials"
                      }
                    ]
                  }
                },
                "required": [
                  "schema"
                ],
                "block_type_slug": "dbt-cli-bigquery-target-configs",
                "secret_fields": [
                  "credentials.service_account_info.*"
                ],
                "block_schema_references": {
                  "credentials": {
                    "block_type_slug": "gcp-credentials",
                    "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
                  }
                }
              },
              "AsyncDriver": {
                "title": "AsyncDriver",
                "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
                "enum": [
                  "postgresql+asyncpg",
                  "sqlite+aiosqlite",
                  "mysql+asyncmy",
                  "mysql+aiomysql"
                ]
              },
              "SyncDriver": {
                "title": "SyncDriver",
                "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
                "enum": [
                  "postgresql+psycopg2",
                  "postgresql+pg8000",
                  "postgresql+psycopg2cffi",
                  "postgresql+pypostgresql",
                  "postgresql+pygresql",
                  "mysql+mysqldb",
                  "mysql+pymysql",
                  "mysql+mysqlconnector",
                  "mysql+cymysql",
                  "mysql+oursql",
                  "mysql+pyodbc",
                  "sqlite+pysqlite",
                  "sqlite+pysqlcipher",
                  "oracle+cx_oracle",
                  "mssql+pyodbc",
                  "mssql+mxodbc",
                  "mssql+pymssql"
                ]
              },
              "ConnectionComponents": {
                "title": "ConnectionComponents",
                "description": "Parameters to use to create a SQLAlchemy engine URL.\n\nAttributes:\n    driver: The driver name to use.\n    database: The name of the database to use.\n    username: The user name used to authenticate.\n    password: The password used to authenticate.\n    host: The host address of the database.\n    port: The port to connect to the database.\n    query: A dictionary of string keys to string values to be passed to the dialect\n        and/or the DBAPI upon connect.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "description": "The driver name to use.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the database to use.",
                    "type": "string"
                  },
                  "username": {
                    "title": "Username",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "host": {
                    "title": "Host",
                    "description": "The host address of the database.",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "The port to connect to the database.",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "driver",
                  "database"
                ]
              },
              "SqlAlchemyConnector": {
                "title": "SqlAlchemyConnector",
                "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
                "type": "object",
                "properties": {
                  "connection_info": {
                    "title": "Connection Info",
                    "description": "SQLAlchemy URL to create the engine; either create from components or create from a string.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ConnectionComponents"
                      },
                      {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 65536,
                        "format": "uri"
                      }
                    ]
                  },
                  "connect_args": {
                    "title": "Additional Connection Arguments",
                    "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                    "type": "object"
                  },
                  "fetch_size": {
                    "title": "Fetch Size",
                    "description": "The number of rows to fetch at a time.",
                    "default": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "connection_info"
                ],
                "block_type_slug": "sqlalchemy-connector",
                "secret_fields": [
                  "connection_info.password"
                ],
                "block_schema_references": {}
              },
              "DatabaseCredentials": {
                "title": "DatabaseCredentials",
                "description": "Block used to manage authentication with a database.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "description": "The driver name to use.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "username": {
                    "title": "Username",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the database to use.",
                    "type": "string"
                  },
                  "host": {
                    "title": "Host",
                    "description": "The host address of the database.",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "The port to connect to the database.",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "title": "Url",
                    "description": "Manually create and provide a URL to create the engine, this is useful for external dialects, e.g. Snowflake, because some of the params, such as 'warehouse', is not directly supported in the vanilla `sqlalchemy.engine.URL.create` method; do not provide this alongside with other URL params as it will raise a `ValueError`.",
                    "minLength": 1,
                    "maxLength": 65536,
                    "format": "uri",
                    "type": "string"
                  },
                  "connect_args": {
                    "title": "Connect Args",
                    "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                    "type": "object"
                  }
                },
                "block_type_slug": "database-credentials",
                "secret_fields": [
                  "password"
                ],
                "block_schema_references": {}
              },
              "PostgresTargetConfigs": {
                "title": "PostgresTargetConfigs",
                "description": "dbt CLI target configs containing credentials and settings specific to Postgres.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The type of the target.",
                    "default": "postgres",
                    "enum": [
                      "postgres"
                    ],
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  },
                  "credentials": {
                    "title": "Credentials",
                    "description": "The credentials to use to authenticate; if there are duplicate keys between credentials and TargetConfigs, e.g. schema, an error will be raised.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/SqlAlchemyConnector"
                      },
                      {
                        "$ref": "#/definitions/DatabaseCredentials"
                      }
                    ]
                  }
                },
                "required": [
                  "schema",
                  "credentials"
                ],
                "block_type_slug": "dbt-cli-postgres-target-configs",
                "secret_fields": [
                  "credentials.connection_info.password",
                  "credentials.password"
                ],
                "block_schema_references": {
                  "credentials": [
                    {
                      "block_type_slug": "sqlalchemy-connector",
                      "block_schema_checksum": "sha256:01e6c0bdaac125860811b201f5a5e98ffefd5f8a49f1398b6996aec362643acc"
                    },
                    {
                      "block_type_slug": "database-credentials",
                      "block_schema_checksum": "sha256:76d1ccbf0ab2038fea77e9689b91a7c8b6398e080e95d9303f65a93a4c03162e"
                    }
                  ]
                }
              },
              "TargetConfigs": {
                "title": "TargetConfigs",
                "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "type": {
                    "title": "Type",
                    "description": "The name of the database warehouse.",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "type": "string"
                  },
                  "threads": {
                    "title": "Threads",
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "default": 4,
                    "type": "integer"
                  }
                },
                "required": [
                  "type",
                  "schema"
                ],
                "block_type_slug": "dbt-cli-target-configs",
                "secret_fields": [],
                "block_schema_references": {}
              },
              "GlobalConfigs": {
                "title": "GlobalConfigs",
                "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
                "type": "object",
                "properties": {
                  "extras": {
                    "title": "Extras",
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "type": "object"
                  },
                  "allow_field_overrides": {
                    "title": "Allow Field Overrides",
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "default": false,
                    "type": "boolean"
                  },
                  "send_anonymous_usage_stats": {
                    "title": "Send Anonymous Usage Stats",
                    "description": "Whether usage stats are sent to dbt.",
                    "type": "boolean"
                  },
                  "use_colors": {
                    "title": "Use Colors",
                    "description": "Colorize the output it prints in your terminal.",
                    "type": "boolean"
                  },
                  "partial_parse": {
                    "title": "Partial Parse",
                    "description": "When partial parsing is enabled, dbt will use an stored internal manifest to determine which files have been changed (if any) since it last parsed the project.",
                    "type": "boolean"
                  },
                  "printer_width": {
                    "title": "Printer Width",
                    "description": "Length of characters before starting a new line.",
                    "type": "integer"
                  },
                  "write_json": {
                    "title": "Write Json",
                    "description": "Determines whether dbt writes JSON artifacts to the target/ directory.",
                    "type": "boolean"
                  },
                  "warn_error": {
                    "title": "Warn Error",
                    "description": "Whether to convert dbt warnings into errors.",
                    "type": "boolean"
                  },
                  "log_format": {
                    "title": "Log Format",
                    "description": "The LOG_FORMAT config specifies how dbt's logs should be formatted. If the value of this config is json, dbt will output fully structured logs in JSON format.",
                    "type": "string"
                  },
                  "debug": {
                    "title": "Debug",
                    "description": "Whether to redirect dbt's debug logs to standard out.",
                    "type": "boolean"
                  },
                  "version_check": {
                    "title": "Version Check",
                    "description": "Whether to raise an error if a project's version is used with an incompatible dbt version.",
                    "type": "boolean"
                  },
                  "fail_fast": {
                    "title": "Fail Fast",
                    "description": "Make dbt exit immediately if a single resource fails to build.",
                    "type": "boolean"
                  },
                  "use_experimental_parser": {
                    "title": "Use Experimental Parser",
                    "description": "Opt into the latest experimental version of the static parser.",
                    "type": "boolean"
                  },
                  "static_parser": {
                    "title": "Static Parser",
                    "description": "Whether to use the [static parser](https://docs.getdbt.com/reference/parsing#static-parser).",
                    "type": "boolean"
                  }
                },
                "block_type_slug": "dbt-cli-global-configs",
                "secret_fields": [],
                "block_schema_references": {}
              },
              "DbtCliProfile": {
                "title": "DbtCliProfile",
                "description": "Profile for use across dbt CLI tasks and flows.",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Name",
                    "description": "Profile name used for populating profiles.yml.",
                    "type": "string"
                  },
                  "target": {
                    "title": "Target",
                    "description": "The default target your dbt project will use.",
                    "type": "string"
                  },
                  "target_configs": {
                    "title": "Target Configs",
                    "description": "Target configs contain credentials and settings, specific to the warehouse you're connecting to.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/SnowflakeTargetConfigs"
                      },
                      {
                        "$ref": "#/definitions/BigQueryTargetConfigs"
                      },
                      {
                        "$ref": "#/definitions/PostgresTargetConfigs"
                      },
                      {
                        "$ref": "#/definitions/TargetConfigs"
                      }
                    ]
                  },
                  "global_configs": {
                    "title": "Global Configs",
                    "description": "Global configs control things like the visual output of logs, the manner in which dbt parses your project, and what to do when dbt finds a version mismatch or a failing model.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/GlobalConfigs"
                      }
                    ]
                  }
                },
                "required": [
                  "name",
                  "target",
                  "target_configs"
                ],
                "block_type_slug": "dbt-cli-profile",
                "secret_fields": [
                  "target_configs.connector.credentials.password",
                  "target_configs.connector.credentials.private_key",
                  "target_configs.connector.credentials.private_key_passphrase",
                  "target_configs.connector.credentials.token",
                  "target_configs.credentials.service_account_info.*",
                  "target_configs.credentials.connection_info.password",
                  "target_configs.credentials.password"
                ],
                "block_schema_references": {
                  "target_configs": [
                    {
                      "block_type_slug": "dbt-cli-snowflake-target-configs",
                      "block_schema_checksum": "sha256:1e5be296bb63d7e2b04f0e9b99543db12521af269399d10e2bc290da4244a575"
                    },
                    {
                      "block_type_slug": "dbt-cli-bigquery-target-configs",
                      "block_schema_checksum": "sha256:842c5dc7d4d1557eedff36982eafeda7b0803915942f72224a7f627efdbe5ff5"
                    },
                    {
                      "block_type_slug": "dbt-cli-postgres-target-configs",
                      "block_schema_checksum": "sha256:1552a2d5c102961df4082329f39c10b8a51e26ee687148efd6d71ce8be8850c0"
                    },
                    {
                      "block_type_slug": "dbt-cli-target-configs",
                      "block_schema_checksum": "sha256:85f7476977e725617af89930889b843147320b2df37df911e24806dd6dacc870"
                    }
                  ],
                  "global_configs": {
                    "block_type_slug": "dbt-cli-global-configs",
                    "block_schema_checksum": "sha256:63df9d18a1aafde1cc8330cd49f81f6600b4ce6db92955973bbf341cc86e916d"
                  }
                }
              }
            }
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      }
    }
  },
  "prefect-docker": {
    "block_types": {
      "docker-host": {
        "name": "Docker Host",
        "slug": "docker-host",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
        "documentation_url": null,
        "description": "Store settings for interacting with a Docker host. This block is part of the prefect-docker collection. Install prefect-docker with `pip install prefect-docker` to use this block.",
        "code_example": "Get a Docker Host client.\n```python\nfrom prefect_docker import DockerHost\n\ndocker_host = DockerHost(\nbase_url=\"tcp://127.0.0.1:1234\",\n    max_pool_size=4\n)\nwith docker_host.get_client() as client:\n    ... # Use the client for Docker operations\n```",
        "block_schema": {
          "checksum": "sha256:bf0961e9f2d88fd81bca2c7b78c025bd289776ad84ae8ef22d8f3db8b9561478",
          "fields": {
            "title": "DockerHost",
            "description": "Store settings for interacting with a Docker host.",
            "type": "object",
            "properties": {
              "base_url": {
                "title": "Base URL",
                "description": "URL to the Docker host.",
                "example": "unix:///var/run/docker.sock",
                "type": "string"
              },
              "version": {
                "title": "Version",
                "description": "The version of the API to use",
                "default": "auto",
                "type": "string"
              },
              "timeout": {
                "title": "Timeout",
                "description": "Default timeout for API calls, in seconds.",
                "type": "integer"
              },
              "max_pool_size": {
                "title": "Max Pool Size",
                "description": "The maximum number of connections to save in the pool.",
                "type": "integer"
              },
              "client_kwargs": {
                "title": "Additional Configuration",
                "description": "Additional keyword arguments to pass to `docker.from_env()` or `DockerClient`.",
                "type": "object"
              }
            },
            "block_type_slug": "docker-host",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.2"
        }
      },
      "docker-registry-credentials": {
        "name": "Docker Registry Credentials",
        "slug": "docker-registry-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
        "documentation_url": null,
        "description": "Store credentials for interacting with a Docker Registry. This block is part of the prefect-docker collection. Install prefect-docker with `pip install prefect-docker` to use this block.",
        "code_example": "Log into Docker Registry.\n```python\nfrom prefect_docker import DockerHost, DockerRegistryCredentials\n\ndocker_host = DockerHost()\ndocker_registry_credentials = DockerRegistryCredentials(\n    username=\"my_username\",\n    password=\"my_password\",\n    registry_url=\"registry.hub.docker.com\",\n)\nwith docker_host.get_client() as client:\n    docker_registry_credentials.login(client)\n```",
        "block_schema": {
          "checksum": "sha256:79c2e94bef9297ccd49000f66e7919ee915c97495720b41fba8420786dbf2c58",
          "fields": {
            "title": "DockerRegistryCredentials",
            "description": "Store credentials for interacting with a Docker Registry.",
            "type": "object",
            "properties": {
              "username": {
                "title": "Username",
                "description": "The username to log into the registry with.",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "The password to log into the registry with.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "registry_url": {
                "title": "Registry Url",
                "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                "example": "registry.hub.docker.com",
                "type": "string"
              },
              "reauth": {
                "title": "Reauth",
                "description": "Whether or not to reauthenticate on each interaction.",
                "default": true,
                "type": "boolean"
              }
            },
            "required": [
              "username",
              "password",
              "registry_url"
            ],
            "block_type_slug": "docker-registry-credentials",
            "secret_fields": [
              "password"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.2"
        }
      }
    }
  },
  "prefect-email": {
    "block_types": {
      "email-server-credentials": {
        "name": "Email Server Credentials",
        "slug": "email-server-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3PcxFuO9XUqs7wU9MiUBMg/ca740e27815d15528373aced667f58b9/email__1_.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage generic email server authentication.\nIt is recommended you use a\n[Google App Password](https://support.google.com/accounts/answer/185833)\nif you use Gmail. This block is part of the prefect-email collection. Install prefect-email with `pip install prefect-email` to use this block.",
        "code_example": "Load stored email server credentials:\n```python\nfrom prefect_email import EmailServerCredentials\nemail_credentials_block = EmailServerCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6944137df7351ce55236c0b685c903460ed8f4609dafebf12f928ea166e1f1d2",
          "fields": {
            "title": "EmailServerCredentials",
            "description": "Block used to manage generic email server authentication.\nIt is recommended you use a\n[Google App Password](https://support.google.com/accounts/answer/185833)\nif you use Gmail.",
            "type": "object",
            "properties": {
              "username": {
                "title": "Username",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "default": "",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "smtp_server": {
                "title": "Smtp Server",
                "default": "smtp.gmail.com",
                "anyOf": [
                  {
                    "$ref": "#/definitions/SMTPServer"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "smtp_type": {
                "title": "Smtp Type",
                "default": 465,
                "anyOf": [
                  {
                    "$ref": "#/definitions/SMTPType"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "smtp_port": {
                "title": "Smtp Port",
                "type": "integer"
              }
            },
            "block_type_slug": "email-server-credentials",
            "secret_fields": [
              "password"
            ],
            "block_schema_references": {},
            "definitions": {
              "SMTPServer": {
                "title": "SMTPServer",
                "description": "Server used to send email.",
                "enum": [
                  "smtp.aol.com",
                  "smtp.mail.att.net",
                  "smtp.comcast.net",
                  "smtp.mail.me.com",
                  "smtp.gmail.com",
                  "smtp-mail.outlook.com",
                  "smtp.mail.yahoo.com"
                ]
              },
              "SMTPType": {
                "title": "SMTPType",
                "description": "Protocols used to secure email transmissions.",
                "enum": [
                  465,
                  587,
                  25
                ]
              }
            }
          },
          "capabilities": [],
          "version": "0.2.2"
        }
      }
    }
  },
  "prefect-firebolt": {
    "block_types": {
      "firebolt-credentials": {
        "name": "Firebolt Credentials",
        "slug": "firebolt-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250",
        "documentation_url": null,
        "description": "Store credentials for authenticating with Firebolt. This block is part of the prefect-firebolt collection. Install prefect-firebolt with `pip install prefect-firebolt` to use this block.",
        "code_example": "```python\nfrom prefect_firebolt.credentials import FireboltCredentials\n\nfirebolt_credentials_block = FireboltCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:53828a6f4a50581376d806d30db9f87e8fc210297997385e80405076cce24ba4",
          "fields": {
            "title": "FireboltCredentials",
            "description": "Store credentials for authenticating with Firebolt.",
            "type": "object",
            "properties": {
              "username": {
                "title": "Username",
                "description": "The email address associated with your Firebolt user.",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "The password used for connecting to Firebolt.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "token": {
                "title": "Token",
                "description": "Authentication token to use instead of username and password.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "api_endpoint": {
                "title": "API Endpoint",
                "description": "Firebolt API endpoint used for authentication.",
                "default": "api.app.firebolt.io",
                "type": "string"
              },
              "account_name": {
                "title": "Account Name",
                "description": "Name of the account to authenticate with. If not provided, the default account will be used.",
                "type": "string"
              }
            },
            "block_type_slug": "firebolt-credentials",
            "secret_fields": [
              "password",
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.0"
        }
      },
      "firebolt-database": {
        "name": "Firebolt Database",
        "slug": "firebolt-database",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3loU17IXqVIWl4aWQfqc78/3c7eefe5e8cf4eec870856f10d7fdcce/5e8a264ceaf4870c90478037_Favicon_128.svg.png?h=250",
        "documentation_url": null,
        "description": "Connects to a Firebolt database. This block is part of the prefect-firebolt collection. Install prefect-firebolt with `pip install prefect-firebolt` to use this block.",
        "code_example": "```python\nfrom prefect_firebolt.database import FireboltDatabase\n\nfirebolt_database_block = FireboltDatabase.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:1fa771ec7a975bd6e9625f86bf6177acfd8e626a04e0c046b109d78a898e93ad",
          "fields": {
            "title": "FireboltDatabase",
            "description": "Connects to a Firebolt database.",
            "type": "object",
            "properties": {
              "credentials": {
                "$ref": "#/definitions/FireboltCredentials"
              },
              "database": {
                "title": "Database Name",
                "description": "The name of the database to connect to.",
                "type": "string"
              },
              "engine_name": {
                "title": "Engine Name",
                "description": "Name of the engine to connect to. May not be used with engine_url. If neither engine_name nor engine_url is provided, the default engine for the configured database will be used.",
                "type": "string"
              },
              "engine_url": {
                "title": "Engine URL",
                "description": "The engine endpoint to use. May not be used with engine_name. If neither engine_name nor engine_url is provided, the default engine for the configured database will be used.",
                "type": "string"
              },
              "additional_parameters": {
                "title": "Additional Parameters",
                "description": "Additional configuration to pass to the Firebolt connection.",
                "type": "object"
              }
            },
            "required": [
              "credentials",
              "database"
            ],
            "block_type_slug": "firebolt-database",
            "secret_fields": [
              "credentials.password",
              "credentials.token"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "firebolt-credentials",
                "block_schema_checksum": "sha256:53828a6f4a50581376d806d30db9f87e8fc210297997385e80405076cce24ba4"
              }
            },
            "definitions": {
              "FireboltCredentials": {
                "title": "FireboltCredentials",
                "description": "Store credentials for authenticating with Firebolt.",
                "type": "object",
                "properties": {
                  "username": {
                    "title": "Username",
                    "description": "The email address associated with your Firebolt user.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used for connecting to Firebolt.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "token": {
                    "title": "Token",
                    "description": "Authentication token to use instead of username and password.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "api_endpoint": {
                    "title": "API Endpoint",
                    "description": "Firebolt API endpoint used for authentication.",
                    "default": "api.app.firebolt.io",
                    "type": "string"
                  },
                  "account_name": {
                    "title": "Account Name",
                    "description": "Name of the account to authenticate with. If not provided, the default account will be used.",
                    "type": "string"
                  }
                },
                "block_type_slug": "firebolt-credentials",
                "secret_fields": [
                  "password",
                  "token"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.1.0"
        }
      }
    }
  },
  "prefect-gcp": {
    "block_types": {
      "bigquery-warehouse": {
        "name": "BigQuery Warehouse",
        "slug": "bigquery-warehouse",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/bigquery/#prefect_gcp.bigquery.BigQueryWarehouse",
        "description": "A block for querying a database with BigQuery.\n\nUpon instantiating, a connection to BigQuery is established\nand maintained for the life of the object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the connection and its cursors when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.bigquery import BigQueryWarehouse\n\nbigquery_warehouse_block = BigQueryWarehouse.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:e8495199f3b490e3b15ba1bc67a97cf04b23aa8a7cba67161291d7cbc882d025",
          "fields": {
            "title": "BigQueryWarehouse",
            "description": "A block for querying a database with BigQuery.\n\nUpon instantiating, a connection to BigQuery is established\nand maintained for the life of the object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the connection and its cursors when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
            "type": "object",
            "properties": {
              "gcp_credentials": {
                "$ref": "#/definitions/GcpCredentials"
              },
              "fetch_size": {
                "title": "Fetch Size",
                "description": "The number of rows to fetch at a time.",
                "default": 1,
                "type": "integer"
              }
            },
            "required": [
              "gcp_credentials"
            ],
            "block_type_slug": "bigquery-warehouse",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.4.1"
        }
      },
      "cloud-run-job": {
        "name": "GCP Cloud Run Job",
        "slug": "cloud-run-job",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/cloud_run/#prefect_gcp.cloud_run.CloudRunJob",
        "description": "Infrastructure block used to run GCP Cloud Run Jobs. Note this block is experimental. The interface may change without notice. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.cloud_run import CloudRunJob\n\ncloud_run_job_block = CloudRunJob.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:c315aa5171af2b01fdc926efebe9b0fb8db9b133a0883a1dcc62197342a853c1",
          "fields": {
            "title": "CloudRunJob",
            "description": "Infrastructure block used to run GCP Cloud Run Jobs. Note this block is experimental. The interface may change without notice.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The slug for this task type.",
                "default": "cloud-run-job",
                "enum": [
                  "cloud-run-job"
                ],
                "type": "string"
              },
              "env": {
                "title": "Env",
                "description": "Environment variables to be passed to your Cloud Run Job.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "title": "Image Name",
                "description": "The image to use for a new Cloud Run Job. This value must refer to an image within either Google Container Registry or Google Artifact Registry, like `gcr.io/<project_name>/<repo>/`.",
                "type": "string"
              },
              "region": {
                "title": "Region",
                "description": "The region where the Cloud Run Job resides.",
                "type": "string"
              },
              "credentials": {
                "$ref": "#/definitions/GcpCredentials"
              },
              "cpu": {
                "title": "CPU",
                "description": "The amount of compute allocated to the Cloud Run Job. The int must be valid based on the rules specified at https://cloud.google.com/run/docs/configuring/cpu#setting-jobs .",
                "type": "integer"
              },
              "memory": {
                "title": "Memory",
                "description": "The amount of memory allocated to the Cloud Run Job.",
                "type": "integer"
              },
              "memory_unit": {
                "title": "Memory Units",
                "description": "The unit of memory. See https://cloud.google.com/run/docs/configuring/memory-limits#setting for additional details.",
                "enum": [
                  "G",
                  "Gi",
                  "M",
                  "Mi"
                ],
                "type": "string"
              },
              "vpc_connector_name": {
                "title": "VPC Connector Name",
                "description": "The name of the VPC connector to use for the Cloud Run Job.",
                "type": "string"
              },
              "args": {
                "title": "Args",
                "description": "Arguments to be passed to your Cloud Run Job's entrypoint command.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "keep_job": {
                "title": "Keep Job After Completion",
                "description": "Keep the completed Cloud Run Job on Google Cloud Platform.",
                "default": false,
                "type": "boolean"
              },
              "timeout": {
                "title": "Job Timeout",
                "description": "The length of time that Prefect will wait for a Cloud Run Job to complete before raising an exception.",
                "default": 600,
                "exclusiveMinimum": 0,
                "maximum": 3600,
                "type": "integer"
              }
            },
            "required": [
              "image",
              "region",
              "credentials"
            ],
            "block_type_slug": "cloud-run-job",
            "secret_fields": [
              "credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "0.4.1"
        }
      },
      "gcp-credentials": {
        "name": "GCP Credentials",
        "slug": "gcp-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/credentials/#prefect_gcp.credentials.GcpCredentials",
        "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "Load GCP credentials stored in a `GCP Credentials` Block:\n```python\nfrom prefect_gcp import GcpCredentials\ngcp_credentials_block = GcpCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624",
          "fields": {
            "title": "GcpCredentials",
            "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
            "type": "object",
            "properties": {
              "service_account_file": {
                "title": "Service Account File",
                "description": "Path to the service account JSON keyfile.",
                "type": "string",
                "format": "path"
              },
              "service_account_info": {
                "title": "Service Account Info",
                "description": "The contents of the keyfile as a dict.",
                "type": "object"
              },
              "project": {
                "title": "Project",
                "description": "The GCP project to use for the client.",
                "type": "string"
              }
            },
            "block_type_slug": "gcp-credentials",
            "secret_fields": [
              "service_account_info.*"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.4.1"
        }
      },
      "gcpsecret": {
        "name": "GcpSecret",
        "slug": "gcpsecret",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/secret_manager/#prefect_gcp.secret_manager.GcpSecret",
        "description": "Manages a secret in Google Cloud Platform's Secret Manager. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.secret_manager import GcpSecret\n\ngcpsecret_block = GcpSecret.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:0311dc4cd2480a4af70d3b30ecd14d296243e73e7245ba064b753e4c0b25acdf",
          "fields": {
            "title": "GcpSecret",
            "description": "Manages a secret in Google Cloud Platform's Secret Manager.",
            "type": "object",
            "properties": {
              "gcp_credentials": {
                "$ref": "#/definitions/GcpCredentials"
              },
              "secret_name": {
                "title": "Secret Name",
                "description": "Name of the secret to manage.",
                "type": "string"
              },
              "secret_version": {
                "title": "Secret Version",
                "description": "Version number of the secret to use.",
                "default": "latest",
                "type": "string"
              }
            },
            "required": [
              "gcp_credentials",
              "secret_name"
            ],
            "block_type_slug": "gcpsecret",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.4.1"
        }
      },
      "gcs-bucket": {
        "name": "GCS Bucket",
        "slug": "gcs-bucket",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/cloud_storage/#prefect_gcp.cloud_storage.GcsBucket",
        "description": "Block used to store data using GCP Cloud Storage Buckets.\n\nNote! `GcsBucket` in `prefect-gcp` is a unique block, separate from `GCS`\nin core Prefect. `GcsBucket` does not use `gcsfs` under the hood,\ninstead using the `google-cloud-storage` package, and offers more configuration\nand functionality. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "Load stored GCP Cloud Storage Bucket:\n```python\nfrom prefect_gcp.cloud_storage import GcsBucket\ngcp_cloud_storage_bucket_block = GcsBucket.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6f44cdbd523fb8d4029fbc504a89095d67d27439aec09d2c1871b03a1f4e14e9",
          "fields": {
            "title": "GcsBucket",
            "description": "Block used to store data using GCP Cloud Storage Buckets.\n\nNote! `GcsBucket` in `prefect-gcp` is a unique block, separate from `GCS`\nin core Prefect. `GcsBucket` does not use `gcsfs` under the hood,\ninstead using the `google-cloud-storage` package, and offers more configuration\nand functionality.",
            "type": "object",
            "properties": {
              "bucket": {
                "title": "Bucket",
                "description": "Name of the bucket.",
                "type": "string"
              },
              "gcp_credentials": {
                "title": "Gcp Credentials",
                "description": "The credentials to authenticate with GCP.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GcpCredentials"
                  }
                ]
              },
              "bucket_folder": {
                "title": "Bucket Folder",
                "description": "A default path to a folder within the GCS bucket to use for reading and writing objects.",
                "default": "",
                "type": "string"
              }
            },
            "required": [
              "bucket"
            ],
            "block_type_slug": "gcs-bucket",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "0.4.1"
        }
      },
      "vertex-ai-custom-training-job": {
        "name": "Vertex AI Custom Training Job",
        "slug": "vertex-ai-custom-training-job",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/aiplatform/#prefect_gcp.aiplatform.VertexAICustomTrainingJob",
        "description": "Infrastructure block used to run Vertex AI custom training jobs. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.aiplatform import VertexAICustomTrainingJob\n\nvertex_ai_custom_training_job_block = VertexAICustomTrainingJob.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f8f79ad13d7ac3c0eb5c02eb63db445bf458c9a5df79de71b7cf136c56b20760",
          "fields": {
            "title": "VertexAICustomTrainingJob",
            "description": "Infrastructure block used to run Vertex AI custom training jobs.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The slug for this task type.",
                "default": "vertex-ai-custom-training-job",
                "enum": [
                  "vertex-ai-custom-training-job"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment Variables",
                "description": "Environment variables to be passed to your Cloud Run Job.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "gcp_credentials": {
                "title": "Gcp Credentials",
                "description": "GCP credentials to use when running the configured Vertex AI custom training job. If not provided, credentials will be inferred from the environment. See `GcpCredentials` for details.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GcpCredentials"
                  }
                ]
              },
              "region": {
                "title": "Region",
                "description": "The region where the Vertex AI custom training job resides.",
                "type": "string"
              },
              "image": {
                "title": "Image Name",
                "description": "The image to use for a new Vertex AI custom training job. This value must refer to an image within either Google Container Registry or Google Artifact Registry, like `gcr.io/<project_name>/<repo>/`.",
                "type": "string"
              },
              "machine_type": {
                "title": "Machine Type",
                "description": "The machine type to use for the run, which controls the available CPU and memory.",
                "default": "n1-standard-4",
                "type": "string"
              },
              "accelerator_type": {
                "title": "Accelerator Type",
                "description": "The type of accelerator to attach to the machine.",
                "type": "string"
              },
              "maximum_run_time": {
                "title": "Maximum Run Time",
                "description": "The maximum job running time.",
                "default": 604800.0,
                "type": "number",
                "format": "time-delta"
              },
              "network": {
                "title": "Network",
                "description": "The full name of the Compute Engine networkto which the Job should be peered. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.",
                "type": "string"
              },
              "reserved_ip_ranges": {
                "title": "Reserved Ip Ranges",
                "description": "A list of names for the reserved ip ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "service_account": {
                "title": "Service Account",
                "description": "Specifies the service account to use as the run-as account in Vertex AI. The agent submitting jobs must have act-as permission on this run-as account. If unspecified, the AI Platform Custom Code Service Agent for the CustomJob's project is used. Takes precedence over the service account found in gcp_credentials, and required if a service account cannot be detected in gcp_credentials.",
                "type": "string"
              },
              "job_watch_poll_interval": {
                "title": "Job Watch Poll Interval",
                "description": "The amount of time to wait between GCP API calls while monitoring the state of a Vertex AI Job.",
                "default": 5.0,
                "type": "number"
              }
            },
            "required": [
              "region",
              "image"
            ],
            "block_type_slug": "vertex-ai-custom-training-job",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "0.4.1"
        }
      }
    }
  },
  "prefect-github": {
    "block_types": {
      "github-credentials": {
        "name": "GitHub Credentials",
        "slug": "github-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage GitHub authentication. This block is part of the prefect-github collection. Install prefect-github with `pip install prefect-github` to use this block.",
        "code_example": "Load stored GitHub credentials:\n```python\nfrom prefect_github import GitHubCredentials\ngithub_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:74a34b668838ba661d9160ab127053dd44a22dd04e89562839645791e70d046a",
          "fields": {
            "title": "GitHubCredentials",
            "description": "Block used to manage GitHub authentication.",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "A GitHub personal access token (PAT).",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "block_type_slug": "github-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.5"
        }
      },
      "github-repository": {
        "name": "GitHub Repository",
        "slug": "github-repository",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250",
        "documentation_url": null,
        "description": "Interact with files stored on GitHub repositories. This block is part of the prefect-github collection. Install prefect-github with `pip install prefect-github` to use this block.",
        "code_example": "```python\nfrom prefect_github.repository import GitHubRepository\n\ngithub_repository_block = GitHubRepository.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:3d2b2de1cd9336264ccc73f7078264d9053dc956941136516e18050c9953abf0",
          "fields": {
            "title": "GitHubRepository",
            "description": "Interact with files stored on GitHub repositories.",
            "type": "object",
            "properties": {
              "repository_url": {
                "title": "Repository URL",
                "description": "The URL of a GitHub repository to read from, in either HTTPS or SSH format. If you are using a private repo, it must be in the HTTPS format.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "An optional reference to pin to; can be a branch name or tag.",
                "type": "string"
              },
              "credentials": {
                "title": "Credentials",
                "description": "An optional GitHubCredentials block for using private GitHub repos.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GitHubCredentials"
                  }
                ]
              }
            },
            "required": [
              "repository_url"
            ],
            "block_type_slug": "github-repository",
            "secret_fields": [
              "credentials.token"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "github-credentials",
                "block_schema_checksum": "sha256:74a34b668838ba661d9160ab127053dd44a22dd04e89562839645791e70d046a"
              }
            },
            "definitions": {
              "GitHubCredentials": {
                "title": "GitHubCredentials",
                "description": "Block used to manage GitHub authentication.",
                "type": "object",
                "properties": {
                  "token": {
                    "title": "Token",
                    "description": "A GitHub personal access token (PAT).",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  }
                },
                "block_type_slug": "github-credentials",
                "secret_fields": [
                  "token"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "0.1.5"
        }
      }
    }
  },
  "prefect-gitlab": {
    "block_types": {
      "gitlab-credentials": {
        "name": "GitLab Credentials",
        "slug": "gitlab-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/55edIimT4g9gbjhkh5a3Sp/dfdb9391d8f45c2e93e72e3a4d350771/gitlab-logo-500.png?h=250",
        "documentation_url": null,
        "description": "Store a GitLab personal access token to interact with private GitLab\nrepositories. This block is part of the prefect-gitlab collection. Install prefect-gitlab with `pip install prefect-gitlab` to use this block.",
        "code_example": "Load stored GitLab credentials:\n```python\nfrom prefect_gitlab import GitLabCredentials\ngitlab_credentials_block = GitLabCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:7d8d6317127bc66afe9e97ae5658ee8e1decdc598350eb292fb62be379f0246c",
          "fields": {
            "title": "GitLabCredentials",
            "description": "Store a GitLab personal access token to interact with private GitLab\nrepositories.",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "A GitLab Personal Access Token with read_repository scope.",
                "name": "Personal Access Token",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "url": {
                "title": "URL",
                "description": "URL to self-hosted GitLab instances.",
                "type": "string"
              }
            },
            "block_type_slug": "gitlab-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      },
      "gitlab-repository": {
        "name": "GitLab Repository",
        "slug": "gitlab-repository",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/55edIimT4g9gbjhkh5a3Sp/dfdb9391d8f45c2e93e72e3a4d350771/gitlab-logo-500.png?h=250",
        "documentation_url": null,
        "description": "Interact with files stored in GitLab repositories. This block is part of the prefect-gitlab collection. Install prefect-gitlab with `pip install prefect-gitlab` to use this block.",
        "code_example": "```python\nfrom prefect_gitlab.repositories import GitLabRepository\n\ngitlab_repository_block = GitLabRepository.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:ac874a97e2ff2403a4b63181b6ae85dd51b4a0df0337d290d922627f5123af44",
          "fields": {
            "title": "GitLabRepository",
            "description": "Interact with files stored in GitLab repositories.",
            "type": "object",
            "properties": {
              "repository": {
                "title": "Repository",
                "description": "The URL of a GitLab repository to read from, in either HTTP/HTTPS or SSH format.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "An optional reference to pin to; can be a branch name or tag.",
                "type": "string"
              },
              "credentials": {
                "title": "Credentials",
                "description": "An optional GitLab Credentials block for authenticating with private GitLab repos.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GitLabCredentials"
                  }
                ]
              }
            },
            "required": [
              "repository"
            ],
            "block_type_slug": "gitlab-repository",
            "secret_fields": [
              "credentials.token"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "gitlab-credentials",
                "block_schema_checksum": "sha256:7d8d6317127bc66afe9e97ae5658ee8e1decdc598350eb292fb62be379f0246c"
              }
            },
            "definitions": {
              "GitLabCredentials": {
                "title": "GitLabCredentials",
                "description": "Store a GitLab personal access token to interact with private GitLab\nrepositories.",
                "type": "object",
                "properties": {
                  "token": {
                    "title": "Token",
                    "description": "A GitLab Personal Access Token with read_repository scope.",
                    "name": "Personal Access Token",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "url": {
                    "title": "URL",
                    "description": "URL to self-hosted GitLab instances.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gitlab-credentials",
                "secret_fields": [
                  "token"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "0.1.1"
        }
      }
    }
  },
  "prefect-hex": {
    "block_types": {
      "hex-credentials": {
        "name": "Hex Credentials",
        "slug": "hex-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3biMverMLGiDA7y5fkqKZF/4b7747052b59fa8182a9686b88ea9541/Hex_Purple__for_light_backgrounds_.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage Hex authentication. This block is part of the prefect-hex collection. Install prefect-hex with `pip install prefect-hex` to use this block.",
        "code_example": "Load stored Hex credentials:\n```python\nfrom prefect_hex import HexCredentials\n\nhex_credentials_block = HexCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:0a2dcb1e5b0b50978cda603890a81f44f5a8c9d1e37fbbff5e616d2b09f0932f",
          "fields": {
            "title": "HexCredentials",
            "description": "Block used to manage Hex authentication.",
            "type": "object",
            "properties": {
              "domain": {
                "title": "Domain",
                "description": "Domain to make API requests against.",
                "default": "app.hex.tech",
                "type": "string"
              },
              "token": {
                "title": "Token",
                "description": "Token used for authentication.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "token"
            ],
            "block_type_slug": "hex-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      }
    }
  },
  "prefect-hightouch": {
    "block_types": {
      "hightouch-credentials": {
        "name": "Hightouch Credentials",
        "slug": "hightouch-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6WT9DIXFrqQy0nA9VRZfuL/40a7039742fca9d053677f58a79aacd5/hightouch.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage Hightouch authentication. This block is part of the prefect-hightouch collection. Install prefect-hightouch with `pip install prefect-hightouch` to use this block.",
        "code_example": "Load stored Hightouch credentials:\n```python\nfrom prefect_hightouch import HightouchCredentials\nhightouch_credentials_block = HightouchCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:b6921c7a00a9f74cd9d29fc4819c79c6255397f022fffc163323c679f37616e2",
          "fields": {
            "title": "HightouchCredentials",
            "description": "Block used to manage Hightouch authentication.",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "Token used for authentication.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "timeout": {
                "title": "Timeout",
                "description": "Number of seconds before the request times out.",
                "default": 5.0,
                "type": "number"
              },
              "client_kwargs": {
                "title": "Additional configuration",
                "description": "Additional keyword arguments to pass to `prefect_hightouch.api_client.client.AuthenticatedClient`.",
                "type": "object"
              }
            },
            "required": [
              "token"
            ],
            "block_type_slug": "hightouch-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.0"
        }
      }
    }
  },
  "prefect-kubernetes": {
    "block_types": {
      "kubernetes-credentials": {
        "name": "Kubernetes Credentials",
        "slug": "kubernetes-credentials",
        "logo_url": "https://images.ctfassets.net/zscdif0zqppk/oYuHjIbc26oilfQSEMjRv/a61f5f6ef406eead2df5231835b4c4c2/logo.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-kubernetes/credentials/#prefect_kubernetes.credentials.KubernetesCredentials",
        "description": "Credentials block for generating configured Kubernetes API clients. This block is part of the prefect-kubernetes collection. Install prefect-kubernetes with `pip install prefect-kubernetes` to use this block.",
        "code_example": "Load stored Kubernetes credentials:\n```python\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\nkubernetes_credentials = KubernetesCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:957fa8dca90bd1b5fb9c575ee09e80b454116c0b134287fbc2eff47a72564c3b",
          "fields": {
            "title": "KubernetesCredentials",
            "description": "Credentials block for generating configured Kubernetes API clients.",
            "type": "object",
            "properties": {
              "cluster_config": {
                "$ref": "#/definitions/KubernetesClusterConfig"
              }
            },
            "block_type_slug": "kubernetes-credentials",
            "secret_fields": [],
            "block_schema_references": {
              "cluster_config": {
                "block_type_slug": "kubernetes-cluster-config",
                "block_schema_checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b"
              }
            },
            "definitions": {
              "KubernetesClusterConfig": {
                "title": "KubernetesClusterConfig",
                "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                "type": "object",
                "properties": {
                  "config": {
                    "title": "Config",
                    "description": "The entire contents of a kubectl config file.",
                    "type": "object"
                  },
                  "context_name": {
                    "title": "Context Name",
                    "description": "The name of the kubectl context to use.",
                    "type": "string"
                  }
                },
                "required": [
                  "config",
                  "context_name"
                ],
                "block_type_slug": "kubernetes-cluster-config",
                "secret_fields": [],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.2.5"
        }
      }
    }
  },
  "prefect-monday": {
    "block_types": {
      "monday-credentials": {
        "name": "Monday Credentials",
        "slug": "monday-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3ohoKiYTO3Kjt6sri58HXu/27b45e8641127b196008976dde856058/imageedit_5_6047243931.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage Monday authentication. This block is part of the prefect-monday collection. Install prefect-monday with `pip install prefect-monday` to use this block.",
        "code_example": "Load stored Monday credentials:\n```python\nfrom prefect_monday import MondayCredentials\nmonday_credentials_block = MondayCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:75cd6ebd47abb93e5e4c8d359ca2b02af97438df098c1565197b04db468d595c",
          "fields": {
            "title": "MondayCredentials",
            "description": "Block used to manage Monday authentication.",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "block_type_slug": "monday-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.0"
        }
      }
    }
  },
  "prefect-monte-carlo": {
    "block_types": {
      "monte-carlo-credentials": {
        "name": "Monte Carlo Credentials",
        "slug": "monte-carlo-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5OqrPNRdLMvqZzxo9f6Z25/f920dff0f1201fc014b0b083a6d2fdb1/image.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage Monte Carlo authentication. This block is part of the prefect-monte-carlo collection. Install prefect-monte-carlo with `pip install prefect-monte-carlo` to use this block.",
        "code_example": "Load stored Monte Carlo credentials:\n```python\nfrom prefect_monte_carlo.credentials import MonteCarloCredentials\nmontecarlo_credentials_block = MonteCarloCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f70c3146fd0e2dad64c8b2e89fa562c4e63d16268b61c4ba4917a88f14085df2",
          "fields": {
            "title": "MonteCarloCredentials",
            "description": "Block used to manage Monte Carlo authentication.",
            "type": "object",
            "properties": {
              "api_key": {
                "title": "API Key",
                "description": "The token to authenticate with Monte Carlo's GraphQL API.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "api_key_id": {
                "title": "API Key ID",
                "description": "The ID associated with the Monte Carlo API token.",
                "type": "string"
              },
              "catalog_url": {
                "title": "Monte Carlo catalog URL",
                "description": "The URL of the Monte Carlo catalog.",
                "default": "https://getmontecarlo.com/catalog",
                "type": "string"
              }
            },
            "required": [
              "api_key",
              "api_key_id"
            ],
            "block_type_slug": "monte-carlo-credentials",
            "secret_fields": [
              "api_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.0"
        }
      }
    }
  },
  "prefect-openai": {
    "block_types": {
      "openai-completion-model": {
        "name": "OpenAI Completion Model",
        "slug": "openai-completion-model",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/QE8JwcbZBmIfiognXDLcY/2bcd4c759f877d37159f576101218b49/open-ai-logo-8B9BFEDC26-seeklogo.com.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-openai/completion/#prefect_openai.completion.CompletionModel",
        "description": "A block that contains config for an OpenAI Completion Model.\nLearn more in the [OpenAPI Text Completion docs](\n    https://beta.openai.com/docs/guides/completion) This block is part of the prefect-openai collection. Install prefect-openai with `pip install prefect-openai` to use this block.",
        "code_example": "Load a configured block:\n```python\nfrom prefect_openai import CompletionModel\n\ncompletion_model = CompletionModel.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f82aab0d3735247d99fa72170e885b764a353d247e923e69348ae01b180f7597",
          "fields": {
            "title": "CompletionModel",
            "description": "A block that contains config for an OpenAI Completion Model.\nLearn more in the [OpenAPI Text Completion docs](\n    https://beta.openai.com/docs/guides/completion)",
            "type": "object",
            "properties": {
              "openai_credentials": {
                "title": "Openai Credentials",
                "description": "The credentials used to authenticate with OpenAI.",
                "allOf": [
                  {
                    "$ref": "#/definitions/OpenAICredentials"
                  }
                ]
              },
              "model": {
                "title": "Model",
                "description": "ID of the model to use.",
                "default": "text-curie-001",
                "anyOf": [
                  {
                    "enum": [
                      "text-davinci-003",
                      "text-curie-001",
                      "text-babbage-001",
                      "text-ada-001"
                    ],
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "temperature": {
                "title": "Temperature",
                "description": "What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.",
                "default": 0.5,
                "type": "number"
              },
              "max_tokens": {
                "title": "Max Tokens",
                "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).",
                "default": 16,
                "type": "integer"
              },
              "suffix": {
                "title": "Suffix",
                "description": "The suffix to append to the prompt.",
                "type": "string"
              },
              "echo": {
                "title": "Echo",
                "description": "Whether to echo the prompt.",
                "default": false,
                "type": "boolean"
              },
              "timeout": {
                "title": "Timeout",
                "description": "The maximum time to wait for the model to warm up.",
                "type": "number"
              }
            },
            "required": [
              "openai_credentials"
            ],
            "block_type_slug": "openai-completion-model",
            "secret_fields": [
              "openai_credentials.api_key"
            ],
            "block_schema_references": {
              "openai_credentials": {
                "block_type_slug": "openai-credentials",
                "block_schema_checksum": "sha256:acea8c195b0a3fd20d47b997fa4f070953b25c8b4a02619e7632ace075e4f882"
              }
            },
            "definitions": {
              "OpenAICredentials": {
                "title": "OpenAICredentials",
                "description": "Credentials used to authenticate with OpenAI.",
                "type": "object",
                "properties": {
                  "api_key": {
                    "title": "API Key",
                    "description": "The API key used to authenticate with OpenAI.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "organization": {
                    "title": "Organization",
                    "description": "Specify which organization is used for an API request.",
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ],
                "block_type_slug": "openai-credentials",
                "secret_fields": [
                  "api_key"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      },
      "openai-credentials": {
        "name": "OpenAI Credentials",
        "slug": "openai-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/QE8JwcbZBmIfiognXDLcY/2bcd4c759f877d37159f576101218b49/open-ai-logo-8B9BFEDC26-seeklogo.com.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-openai/credentials/#prefect_openai.credentials.OpenAICredentials",
        "description": "Credentials used to authenticate with OpenAI. This block is part of the prefect-openai collection. Install prefect-openai with `pip install prefect-openai` to use this block.",
        "code_example": "Load a configured block:\n```python\nfrom prefect_openai import OpenAICredentials\n\ncredentials = OpenAICredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:acea8c195b0a3fd20d47b997fa4f070953b25c8b4a02619e7632ace075e4f882",
          "fields": {
            "title": "OpenAICredentials",
            "description": "Credentials used to authenticate with OpenAI.",
            "type": "object",
            "properties": {
              "api_key": {
                "title": "API Key",
                "description": "The API key used to authenticate with OpenAI.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "organization": {
                "title": "Organization",
                "description": "Specify which organization is used for an API request.",
                "type": "string"
              }
            },
            "required": [
              "api_key"
            ],
            "block_type_slug": "openai-credentials",
            "secret_fields": [
              "api_key"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      },
      "openai-image-model": {
        "name": "OpenAI Image Model",
        "slug": "openai-image-model",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/QE8JwcbZBmIfiognXDLcY/2bcd4c759f877d37159f576101218b49/open-ai-logo-8B9BFEDC26-seeklogo.com.png?h=250",
        "documentation_url": null,
        "description": "A block that contains config for an OpenAI Image Model.\nLearn more in the [OpenAPI Image generation docs](\n    https://beta.openai.com/docs/guides/images) This block is part of the prefect-openai collection. Install prefect-openai with `pip install prefect-openai` to use this block.",
        "code_example": "Load a configured block:\n```python\nfrom prefect_openai import ImageModel\n\nimage_model = ImageModel.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f7dc669378cf87bf12b7a132b4728b583145bb6e094ce32240ae70c75e4ce1ea",
          "fields": {
            "title": "ImageModel",
            "description": "A block that contains config for an OpenAI Image Model.\nLearn more in the [OpenAPI Image generation docs](\n    https://beta.openai.com/docs/guides/images)",
            "type": "object",
            "properties": {
              "openai_credentials": {
                "title": "Openai Credentials",
                "description": "The credentials used to authenticate with OpenAI.",
                "allOf": [
                  {
                    "$ref": "#/definitions/OpenAICredentials"
                  }
                ]
              },
              "size": {
                "title": "Size",
                "description": "The size of the image to generate.",
                "default": "256x256",
                "enum": [
                  "256x256",
                  "512x512",
                  "1024x1024"
                ],
                "type": "string"
              },
              "n": {
                "title": "Number of images",
                "description": "The number of images to generate.",
                "default": 1,
                "type": "integer"
              },
              "response_format": {
                "title": "Response Format",
                "description": "The format of the image to generate.",
                "default": "url",
                "enum": [
                  "url",
                  "b64_json"
                ],
                "type": "string"
              }
            },
            "required": [
              "openai_credentials"
            ],
            "block_type_slug": "openai-image-model",
            "secret_fields": [
              "openai_credentials.api_key"
            ],
            "block_schema_references": {
              "openai_credentials": {
                "block_type_slug": "openai-credentials",
                "block_schema_checksum": "sha256:acea8c195b0a3fd20d47b997fa4f070953b25c8b4a02619e7632ace075e4f882"
              }
            },
            "definitions": {
              "OpenAICredentials": {
                "title": "OpenAICredentials",
                "description": "Credentials used to authenticate with OpenAI.",
                "type": "object",
                "properties": {
                  "api_key": {
                    "title": "API Key",
                    "description": "The API key used to authenticate with OpenAI.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "organization": {
                    "title": "Organization",
                    "description": "Specify which organization is used for an API request.",
                    "type": "string"
                  }
                },
                "required": [
                  "api_key"
                ],
                "block_type_slug": "openai-credentials",
                "secret_fields": [
                  "api_key"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      }
    }
  },
  "prefect-shell": {
    "block_types": {
      "shell-operation": {
        "name": "Shell Operation",
        "slug": "shell-operation",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3Nn6D7zVqrdIsGjufgpES4/abd12fa6427121f7363758aafc468d9a/Terminalicon2.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-shell/commands/#prefect_shell.commands.ShellOperation",
        "description": "A block representing a shell operation, containing multiple commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method. This block is part of the prefect-shell collection. Install prefect-shell with `pip install prefect-shell` to use this block.",
        "code_example": "Load a configured block:\n```python\nfrom prefect_shell import ShellOperation\n\nshell_operation = ShellOperation.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:9525e2fd40af302916ff7a4c33ec9c0e20d8970b09243ca010d729fac144811d",
          "fields": {
            "title": "ShellOperation",
            "description": "A block representing a shell operation, containing multiple commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method.",
            "type": "object",
            "properties": {
              "commands": {
                "title": "Commands",
                "description": "A list of commands to execute sequentially.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stream_output": {
                "title": "Stream Output",
                "description": "Whether to stream output.",
                "default": true,
                "type": "boolean"
              },
              "env": {
                "title": "Environment Variables",
                "description": "Environment variables to use for the subprocess.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "working_dir": {
                "title": "Working Directory",
                "description": "The absolute path to the working directory the command will be executed within.",
                "format": "directory-path",
                "type": "string"
              },
              "shell": {
                "title": "Shell",
                "description": "The shell to run the command with; if unset, defaults to `powershell` on Windows and `bash` on other platforms.",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "The extension to use for the temporary file; if unset, defaults to `.ps1` on Windows and `.sh` on other platforms.",
                "type": "string"
              }
            },
            "required": [
              "commands"
            ],
            "block_type_slug": "shell-operation",
            "secret_fields": [],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.5"
        }
      }
    }
  },
  "prefect-slack": {
    "block_types": {
      "slack-credentials": {
        "name": "Slack Credentials",
        "slug": "slack-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-slack/credentials/#prefect_slack.credentials.SlackCredentials",
        "description": "Block holding Slack credentials for use in tasks and flows. This block is part of the prefect-slack collection. Install prefect-slack with `pip install prefect-slack` to use this block.",
        "code_example": "Load stored Slack credentials:\n```python\nfrom prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f79058d8fcf22ed575f824b27daa68a52fedaa0e40f7a8a542d4ac9cf3ee8317",
          "fields": {
            "title": "SlackCredentials",
            "description": "Block holding Slack credentials for use in tasks and flows.",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "Bot user OAuth token for the Slack app used to perform actions.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "token"
            ],
            "block_type_slug": "slack-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.2"
        }
      },
      "slack-incoming-webhook": {
        "name": "Slack Incoming Webhook",
        "slug": "slack-incoming-webhook",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-slack/credentials/#prefect_slack.credentials.SlackWebhook",
        "description": "Block holding a Slack webhook for use in tasks and flows. This block is part of the prefect-slack collection. Install prefect-slack with `pip install prefect-slack` to use this block.",
        "code_example": "Load stored Slack webhook:\n```python\nfrom prefect_slack import SlackWebhook\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:7e03b5158eed175ba9ae53275933944c9f9161b7b45748878701716857656a4a",
          "fields": {
            "title": "SlackWebhook",
            "description": "Block holding a Slack webhook for use in tasks and flows.",
            "type": "object",
            "properties": {
              "url": {
                "title": "Webhook URL",
                "description": "Slack webhook URL which can be used to send messages.",
                "example": "https://hooks.slack.com/XXX",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "url"
            ],
            "block_type_slug": "slack-incoming-webhook",
            "secret_fields": [
              "url"
            ],
            "block_schema_references": {}
          },
          "capabilities": [
            "notify"
          ],
          "version": "0.1.2"
        }
      }
    }
  },
  "prefect-snowflake": {
    "block_types": {
      "snowflake-connector": {
        "name": "Snowflake Connector",
        "slug": "snowflake-connector",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2DxzAeTM9eHLDcRQx1FR34/f858a501cdff918d398b39365ec2150f/snowflake.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-snowflake/database/#prefect_snowflake.database.SnowflakeConnector",
        "description": "Perform data operations against a Snowflake database. This block is part of the prefect-snowflake collection. Install prefect-snowflake with `pip install prefect-snowflake` to use this block.",
        "code_example": "Load stored Snowflake connector as a context manager:\n```python\nfrom prefect_snowflake.database import SnowflakeConnector\n\nsnowflake_connector = SnowflakeConnector.load(\"BLOCK_NAME\"):\n```\n\nInsert data into database and fetch results.\n```python\nfrom prefect_snowflake.database import SnowflakeConnector\n\nwith SnowflakeConnector.load(\"BLOCK_NAME\") as conn:\n    conn.execute(\n        \"CREATE TABLE IF NOT EXISTS customers (name varchar, address varchar);\"\n    )\n    conn.execute_many(\n        \"INSERT INTO customers (name, address) VALUES (%(name)s, %(address)s);\",\n        seq_of_parameters=[\n            {\"name\": \"Ford\", \"address\": \"Highway 42\"},\n            {\"name\": \"Unknown\", \"address\": \"Space\"},\n            {\"name\": \"Me\", \"address\": \"Myway 88\"},\n        ],\n    )\n    results = conn.fetch_all(\n        \"SELECT * FROM customers WHERE address = %(address)s\",\n        parameters={\"address\": \"Space\"}\n    )\n    print(results)\n```",
        "block_schema": {
          "checksum": "sha256:dd0d36d69bbe0d44870fd754f3c00754e37e3f52209590083eaee4c585ce0bd0",
          "fields": {
            "title": "SnowflakeConnector",
            "description": "Perform data operations against a Snowflake database.",
            "type": "object",
            "properties": {
              "credentials": {
                "title": "Credentials",
                "description": "The credentials to authenticate with Snowflake.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SnowflakeCredentials"
                  }
                ]
              },
              "database": {
                "title": "Database",
                "description": "The name of the default database to use.",
                "type": "string"
              },
              "warehouse": {
                "title": "Warehouse",
                "description": "The name of the default warehouse to use.",
                "type": "string"
              },
              "schema": {
                "title": "Schema",
                "description": "The name of the default schema to use.",
                "type": "string"
              },
              "fetch_size": {
                "title": "Fetch Size",
                "description": "The default number of rows to fetch at a time.",
                "default": 1,
                "type": "integer"
              },
              "poll_frequency_s": {
                "title": "Poll Frequency [seconds]",
                "description": "The number of seconds between checking query status for long running queries.",
                "default": 1,
                "type": "integer"
              }
            },
            "required": [
              "credentials",
              "database",
              "warehouse",
              "schema"
            ],
            "block_type_slug": "snowflake-connector",
            "secret_fields": [
              "credentials.password",
              "credentials.private_key",
              "credentials.private_key_passphrase",
              "credentials.token"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "snowflake-credentials",
                "block_schema_checksum": "sha256:b24edfb413527c951cb2a8b4b4c16aec096523f871d941889e29ac2e6e92e036"
              }
            },
            "definitions": {
              "SnowflakeCredentials": {
                "title": "SnowflakeCredentials",
                "description": "Block used to manage authentication with Snowflake.",
                "type": "object",
                "properties": {
                  "account": {
                    "title": "Account",
                    "description": "The snowflake account name.",
                    "example": "nh12345.us-east-2.aws",
                    "type": "string"
                  },
                  "user": {
                    "title": "User",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key": {
                    "title": "Private Key",
                    "description": "The PEM used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "private_key_path": {
                    "title": "Private Key Path",
                    "description": "The path to the private key.",
                    "type": "string",
                    "format": "path"
                  },
                  "private_key_passphrase": {
                    "title": "Private Key Passphrase",
                    "description": "The password to use for the private key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "authenticator": {
                    "title": "Authenticator",
                    "description": "The type of authenticator to use for initializing connection.",
                    "default": "snowflake",
                    "enum": [
                      "snowflake",
                      "snowflake_jwt",
                      "externalbrowser",
                      "okta_endpoint",
                      "oauth",
                      "username_password_mfa"
                    ],
                    "type": "string"
                  },
                  "token": {
                    "title": "Token",
                    "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "endpoint": {
                    "title": "Endpoint",
                    "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                    "type": "string"
                  },
                  "role": {
                    "title": "Role",
                    "description": "The name of the default role to use.",
                    "type": "string"
                  },
                  "autocommit": {
                    "title": "Autocommit",
                    "description": "Whether to automatically commit.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "account",
                  "user"
                ],
                "block_type_slug": "snowflake-credentials",
                "secret_fields": [
                  "password",
                  "private_key",
                  "private_key_passphrase",
                  "token"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.26.1"
        }
      },
      "snowflake-credentials": {
        "name": "Snowflake Credentials",
        "slug": "snowflake-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2DxzAeTM9eHLDcRQx1FR34/f858a501cdff918d398b39365ec2150f/snowflake.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-snowflake/credentials/#prefect_snowflake.credentials.SnowflakeCredentials",
        "description": "Block used to manage authentication with Snowflake. This block is part of the prefect-snowflake collection. Install prefect-snowflake with `pip install prefect-snowflake` to use this block.",
        "code_example": "Load stored Snowflake credentials:\n```python\nfrom prefect_snowflake import SnowflakeCredentials\n\nsnowflake_credentials_block = SnowflakeCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:b24edfb413527c951cb2a8b4b4c16aec096523f871d941889e29ac2e6e92e036",
          "fields": {
            "title": "SnowflakeCredentials",
            "description": "Block used to manage authentication with Snowflake.",
            "type": "object",
            "properties": {
              "account": {
                "title": "Account",
                "description": "The snowflake account name.",
                "example": "nh12345.us-east-2.aws",
                "type": "string"
              },
              "user": {
                "title": "User",
                "description": "The user name used to authenticate.",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "The password used to authenticate.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "private_key": {
                "title": "Private Key",
                "description": "The PEM used to authenticate.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "private_key_path": {
                "title": "Private Key Path",
                "description": "The path to the private key.",
                "type": "string",
                "format": "path"
              },
              "private_key_passphrase": {
                "title": "Private Key Passphrase",
                "description": "The password to use for the private key.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "authenticator": {
                "title": "Authenticator",
                "description": "The type of authenticator to use for initializing connection.",
                "default": "snowflake",
                "enum": [
                  "snowflake",
                  "snowflake_jwt",
                  "externalbrowser",
                  "okta_endpoint",
                  "oauth",
                  "username_password_mfa"
                ],
                "type": "string"
              },
              "token": {
                "title": "Token",
                "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "endpoint": {
                "title": "Endpoint",
                "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                "type": "string"
              },
              "role": {
                "title": "Role",
                "description": "The name of the default role to use.",
                "type": "string"
              },
              "autocommit": {
                "title": "Autocommit",
                "description": "Whether to automatically commit.",
                "type": "boolean"
              }
            },
            "required": [
              "account",
              "user"
            ],
            "block_type_slug": "snowflake-credentials",
            "secret_fields": [
              "password",
              "private_key",
              "private_key_passphrase",
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.26.1"
        }
      }
    }
  },
  "prefect-sqlalchemy": {
    "block_types": {
      "database-credentials": {
        "name": "Database Credentials",
        "slug": "database-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3xLant5G70S4vJpmdWCYmr/8fdb19f15b97c3a07c3af3efde4d28fb/download.svg.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-sqlalchemy/credentials/#prefect_sqlalchemy.credentials.DatabaseCredentials",
        "description": "Block used to manage authentication with a database. This block is part of the prefect-sqlalchemy collection. Install prefect-sqlalchemy with `pip install prefect-sqlalchemy` to use this block.",
        "code_example": "Load stored database credentials:\n```python\nfrom prefect_sqlalchemy import DatabaseCredentials\ndatabase_block = DatabaseCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:76d1ccbf0ab2038fea77e9689b91a7c8b6398e080e95d9303f65a93a4c03162e",
          "fields": {
            "title": "DatabaseCredentials",
            "description": "Block used to manage authentication with a database.",
            "type": "object",
            "properties": {
              "driver": {
                "title": "Driver",
                "description": "The driver name to use.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/AsyncDriver"
                  },
                  {
                    "$ref": "#/definitions/SyncDriver"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "username": {
                "title": "Username",
                "description": "The user name used to authenticate.",
                "type": "string"
              },
              "password": {
                "title": "Password",
                "description": "The password used to authenticate.",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "database": {
                "title": "Database",
                "description": "The name of the database to use.",
                "type": "string"
              },
              "host": {
                "title": "Host",
                "description": "The host address of the database.",
                "type": "string"
              },
              "port": {
                "title": "Port",
                "description": "The port to connect to the database.",
                "type": "string"
              },
              "query": {
                "title": "Query",
                "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "url": {
                "title": "Url",
                "description": "Manually create and provide a URL to create the engine, this is useful for external dialects, e.g. Snowflake, because some of the params, such as 'warehouse', is not directly supported in the vanilla `sqlalchemy.engine.URL.create` method; do not provide this alongside with other URL params as it will raise a `ValueError`.",
                "minLength": 1,
                "maxLength": 65536,
                "format": "uri",
                "type": "string"
              },
              "connect_args": {
                "title": "Connect Args",
                "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                "type": "object"
              }
            },
            "block_type_slug": "database-credentials",
            "secret_fields": [
              "password"
            ],
            "block_schema_references": {},
            "definitions": {
              "AsyncDriver": {
                "title": "AsyncDriver",
                "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
                "enum": [
                  "postgresql+asyncpg",
                  "sqlite+aiosqlite",
                  "mysql+asyncmy",
                  "mysql+aiomysql"
                ]
              },
              "SyncDriver": {
                "title": "SyncDriver",
                "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
                "enum": [
                  "postgresql+psycopg2",
                  "postgresql+pg8000",
                  "postgresql+psycopg2cffi",
                  "postgresql+pypostgresql",
                  "postgresql+pygresql",
                  "mysql+mysqldb",
                  "mysql+pymysql",
                  "mysql+mysqlconnector",
                  "mysql+cymysql",
                  "mysql+oursql",
                  "mysql+pyodbc",
                  "sqlite+pysqlite",
                  "sqlite+pysqlcipher",
                  "oracle+cx_oracle",
                  "mssql+pyodbc",
                  "mssql+mxodbc",
                  "mssql+pymssql"
                ]
              }
            }
          },
          "capabilities": [],
          "version": "0.2.4"
        }
      },
      "sqlalchemy-connector": {
        "name": "SQLAlchemy Connector",
        "slug": "sqlalchemy-connector",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/37TOcxeP9kfXffpKVRAHiJ/0f359112e79d0bd3dfe38c73c4fc6363/sqlalchemy.png?h=250",
        "documentation_url": "https://prefecthq.github.io/prefect-sqlalchemy/database/#prefect_sqlalchemy.database.SqlAlchemyConnector",
        "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost. This block is part of the prefect-sqlalchemy collection. Install prefect-sqlalchemy with `pip install prefect-sqlalchemy` to use this block.",
        "code_example": "Load stored database credentials and use in context manager:\n```python\nfrom prefect_sqlalchemy import SqlAlchemyConnector\n\ndatabase_block = SqlAlchemyConnector.load(\"BLOCK_NAME\")\nwith database_block:\n    ...\n```\n\nCreate table named customers and insert values; then fetch the first 10 rows.\n```python\nfrom prefect_sqlalchemy import (\n    SqlAlchemyConnector, SyncDriver, ConnectionComponents\n)\n\nwith SqlAlchemyConnector(\n    connection_info=ConnectionComponents(\n        driver=SyncDriver.SQLITE_PYSQLITE,\n        database=\"prefect.db\"\n    )\n) as database:\n    database.execute(\n        \"CREATE TABLE IF NOT EXISTS customers (name varchar, address varchar);\",\n    )\n    for i in range(1, 42):\n        database.execute(\n            \"INSERT INTO customers (name, address) VALUES (:name, :address);\",\n            parameters={\"name\": \"Marvin\", \"address\": f\"Highway {i}\"},\n        )\n    results = database.fetch_many(\n        \"SELECT * FROM customers WHERE name = :name;\",\n        parameters={\"name\": \"Marvin\"},\n        size=10\n    )\nprint(results)\n```",
        "block_schema": {
          "checksum": "sha256:01e6c0bdaac125860811b201f5a5e98ffefd5f8a49f1398b6996aec362643acc",
          "fields": {
            "title": "SqlAlchemyConnector",
            "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
            "type": "object",
            "properties": {
              "connection_info": {
                "title": "Connection Info",
                "description": "SQLAlchemy URL to create the engine; either create from components or create from a string.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/ConnectionComponents"
                  },
                  {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 65536,
                    "format": "uri"
                  }
                ]
              },
              "connect_args": {
                "title": "Additional Connection Arguments",
                "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                "type": "object"
              },
              "fetch_size": {
                "title": "Fetch Size",
                "description": "The number of rows to fetch at a time.",
                "default": 1,
                "type": "integer"
              }
            },
            "required": [
              "connection_info"
            ],
            "block_type_slug": "sqlalchemy-connector",
            "secret_fields": [
              "connection_info.password"
            ],
            "block_schema_references": {},
            "definitions": {
              "AsyncDriver": {
                "title": "AsyncDriver",
                "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)",
                "enum": [
                  "postgresql+asyncpg",
                  "sqlite+aiosqlite",
                  "mysql+asyncmy",
                  "mysql+aiomysql"
                ]
              },
              "SyncDriver": {
                "title": "SyncDriver",
                "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
                "enum": [
                  "postgresql+psycopg2",
                  "postgresql+pg8000",
                  "postgresql+psycopg2cffi",
                  "postgresql+pypostgresql",
                  "postgresql+pygresql",
                  "mysql+mysqldb",
                  "mysql+pymysql",
                  "mysql+mysqlconnector",
                  "mysql+cymysql",
                  "mysql+oursql",
                  "mysql+pyodbc",
                  "sqlite+pysqlite",
                  "sqlite+pysqlcipher",
                  "oracle+cx_oracle",
                  "mssql+pyodbc",
                  "mssql+mxodbc",
                  "mssql+pymssql"
                ]
              },
              "ConnectionComponents": {
                "title": "ConnectionComponents",
                "description": "Parameters to use to create a SQLAlchemy engine URL.\n\nAttributes:\n    driver: The driver name to use.\n    database: The name of the database to use.\n    username: The user name used to authenticate.\n    password: The password used to authenticate.\n    host: The host address of the database.\n    port: The port to connect to the database.\n    query: A dictionary of string keys to string values to be passed to the dialect\n        and/or the DBAPI upon connect.",
                "type": "object",
                "properties": {
                  "driver": {
                    "title": "Driver",
                    "description": "The driver name to use.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "database": {
                    "title": "Database",
                    "description": "The name of the database to use.",
                    "type": "string"
                  },
                  "username": {
                    "title": "Username",
                    "description": "The user name used to authenticate.",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "The password used to authenticate.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "host": {
                    "title": "Host",
                    "description": "The host address of the database.",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "The port to connect to the database.",
                    "type": "string"
                  },
                  "query": {
                    "title": "Query",
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "driver",
                  "database"
                ]
              }
            }
          },
          "capabilities": [],
          "version": "0.2.4"
        }
      }
    }
  },
  "prefect-twitter": {
    "block_types": {
      "twitter-credentials": {
        "name": "Twitter Credentials",
        "slug": "twitter-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1NyN5egjNk9Sel17rs0cTz/067bb478b4fec22d8aa47b79b085a6e9/twitter.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage Twitter authentication with tweepy.\nSee Authentication Tokens section of the Keys and Tokens tab of\nyour app, under the Twitter Developer Portal Projects & Apps page at\nhttps://developer.twitter.com/en/portal/projects-and-apps. This block is part of the prefect-twitter collection. Install prefect-twitter with `pip install prefect-twitter` to use this block.",
        "code_example": "Load stored Twitter credentials:\n```python\nfrom prefect_twitter import TwitterCredentials\ntwitter_credentials_block = TwitterCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:4c24588fb507d62c850405da822ec87e52ffc726dbbfea8ceca944d72817a7e2",
          "fields": {
            "title": "TwitterCredentials",
            "description": "Block used to manage Twitter authentication with tweepy.\nSee Authentication Tokens section of the Keys and Tokens tab of\nyour app, under the Twitter Developer Portal Projects & Apps page at\nhttps://developer.twitter.com/en/portal/projects-and-apps.",
            "type": "object",
            "properties": {
              "consumer_key": {
                "title": "Consumer Key",
                "type": "string"
              },
              "consumer_secret": {
                "title": "Consumer Secret",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "access_token": {
                "title": "Access Token",
                "type": "string"
              },
              "access_token_secret": {
                "title": "Access Token Secret",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              }
            },
            "required": [
              "consumer_key",
              "consumer_secret",
              "access_token",
              "access_token_secret"
            ],
            "block_type_slug": "twitter-credentials",
            "secret_fields": [
              "consumer_secret",
              "access_token_secret"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.1.1"
        }
      }
    }
  }
}