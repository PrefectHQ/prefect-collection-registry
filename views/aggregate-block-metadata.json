{
    "prefect": {
        "block_types": {
            "kubernetes-cluster-config": {
                "name": "Kubernetes Cluster Config",
                "slug": "kubernetes-cluster-config",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1zrSeY8DZ1MJZs2BAyyyGk/20445025358491b8b72600b8f996125b/Kubernetes_logo_without_workmark.svg.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/kubernetes/#prefect.blocks.kubernetes.KubernetesClusterConfig",
                "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                "code_example": "Load a saved Kubernetes cluster config:\n```python\nfrom prefect.blocks.kubernetes import KubernetesClusterConfig\n\ncluster_config_block = KubernetesClusterConfig.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b",
                    "fields": {
                        "title": "KubernetesClusterConfig",
                        "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                        "type": "object",
                        "properties": {
                            "config": {
                                "title": "Config",
                                "description": "The entire contents of a kubectl config file.",
                                "type": "object"
                            },
                            "context_name": {
                                "title": "Context Name",
                                "description": "The name of the kubectl context to use.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "config",
                            "context_name"
                        ],
                        "block_type_slug": "kubernetes-cluster-config",
                        "secret_fields": [],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "2.7.12"
                }
            },
            "ms-teams-webhook": {
                "name": "Microsoft Teams Webhook",
                "slug": "ms-teams-webhook",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6n0dSTBzwoVPhX8Vgg37i7/9040e07a62def4f48242be3eae6d3719/teams_logo.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.MicrosoftTeamsWebhook",
                "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
                "code_example": "Load a saved Teams webhook and send a message:\n```python\nfrom prefect.blocks.notifications import MicrosoftTeamsWebhook\nteams_webhook_block = MicrosoftTeamsWebhook.load(\"BLOCK_NAME\")\nteams_webhook_block.notify(\"Hello from Prefect!\")\n```",
                "block_schema": {
                    "checksum": "sha256:0a5c2b435930bf8553391878475c5b976592526d2f801e8e559c0119aa393032",
                    "fields": {
                        "title": "MicrosoftTeamsWebhook",
                        "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
                        "type": "object",
                        "properties": {
                            "notify_type": {
                                "title": "Notify Type",
                                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                                "default": "prefect_default",
                                "enum": [
                                    "prefect_default",
                                    "info",
                                    "success",
                                    "warning",
                                    "failure"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "title": "Webhook URL",
                                "description": "The Teams incoming webhook URL used to send notifications.",
                                "example": "https://your-org.webhook.office.com/webhookb2/XXX/IncomingWebhook/YYY/ZZZ",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "block_type_slug": "ms-teams-webhook",
                        "secret_fields": [
                            "url"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [
                        "notify"
                    ],
                    "version": "2.7.12"
                }
            },
            "opsgenie-webhook": {
                "name": "Opsgenie Webhook",
                "slug": "opsgenie-webhook",
                "logo_url": "https://images.ctfassets.net/sahxz1jinscj/3habq8fTzmplh7Ctkppk4/590cecb73f766361fcea9223cd47bad8/opsgenie.png",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.OpsgenieWebhook",
                "description": "Enables sending notifications via a provided Opsgenie webhook.",
                "code_example": "Load a saved Opsgenie webhook and send a message:\n```python\nfrom prefect.blocks.notifications import OpsgenieWebhook\nopsgenie_webhook_block = OpsgenieWebhook.load(\"BLOCK_NAME\")\nopsgenie_webhook_block.notify(\"Hello from Prefect!\")\n```",
                "block_schema": {
                    "checksum": "sha256:df4b3a253e6c2d2a0e6ef4831e7bd77ee920a75201f9c132a5516b42fcd80112",
                    "fields": {
                        "title": "OpsgenieWebhook",
                        "description": "Enables sending notifications via a provided Opsgenie webhook.",
                        "type": "object",
                        "properties": {
                            "notify_type": {
                                "title": "Notify Type",
                                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                                "default": "prefect_default",
                                "enum": [
                                    "prefect_default",
                                    "info",
                                    "success",
                                    "warning",
                                    "failure"
                                ],
                                "type": "string"
                            },
                            "apikey": {
                                "title": "API Key",
                                "description": "The API Key associated with your Opsgenie account.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "target_user": {
                                "title": "Target User",
                                "description": "The user(s) you wish to notify.",
                                "type": "array",
                                "items": {}
                            },
                            "target_team": {
                                "title": "Target Team",
                                "description": "The team(s) you wish to notify.",
                                "type": "array",
                                "items": {}
                            },
                            "target_schedule": {
                                "title": "Target Schedule",
                                "description": "The schedule(s) you wish to notify.",
                                "type": "array",
                                "items": {}
                            },
                            "target_escalation": {
                                "title": "Target Escalation",
                                "description": "The escalation(s) you wish to notify.",
                                "type": "array",
                                "items": {}
                            },
                            "region_name": {
                                "title": "Region Name",
                                "description": "The 2-character region code.",
                                "default": "us",
                                "enum": [
                                    "us",
                                    "eu"
                                ],
                                "type": "string"
                            },
                            "batch": {
                                "title": "Batch",
                                "description": "Notify all targets in batches (instead of individually).",
                                "default": false,
                                "type": "boolean"
                            },
                            "tags": {
                                "title": "Tags",
                                "description": "A comma-separated list of tags you can associate with your Opsgenie message.",
                                "example": "[\"tag1\", \"tag2\"]",
                                "type": "array",
                                "items": {}
                            },
                            "priority": {
                                "title": "Priority",
                                "description": "The priority to associate with the message. It is on a scale between 1 (LOW) and 5 (EMERGENCY).",
                                "default": 3,
                                "type": "string"
                            },
                            "alias": {
                                "title": "Alias",
                                "description": "The alias to associate with the message.",
                                "type": "string"
                            },
                            "entity": {
                                "title": "Entity",
                                "description": "The entity to associate with the message.",
                                "type": "string"
                            },
                            "details": {
                                "title": "Details",
                                "description": "Additional details composed of key/values pairs.",
                                "example": "{\"key1\": \"value1\", \"key2\": \"value2\"}",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "apikey"
                        ],
                        "block_type_slug": "opsgenie-webhook",
                        "secret_fields": [
                            "apikey"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [
                        "notify"
                    ],
                    "version": "2.7.12"
                }
            },
            "pager-duty-webhook": {
                "name": "Pager Duty Webhook",
                "slug": "pager-duty-webhook",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6FHJ4Lcozjfl1yDPxCvQDT/c2f6bdf47327271c068284897527f3da/PagerDuty-Logo.wine.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.PagerDutyWebHook",
                "description": "Enables sending notifications via a provided PagerDuty webhook.",
                "code_example": "Load a saved PagerDuty webhook and send a message:\n```python\nfrom prefect.blocks.notifications import PagerDutyWebHook\npagerduty_webhook_block = PagerDutyWebHook.load(\"BLOCK_NAME\")\npagerduty_webhook_block.notify(\"Hello from Prefect!\")\n```",
                "block_schema": {
                    "checksum": "sha256:4dd2ac9d4e446f3d2717414cf34bd6a62a40f5da4437f99dd61473ac117b1438",
                    "fields": {
                        "title": "PagerDutyWebHook",
                        "description": "Enables sending notifications via a provided PagerDuty webhook.",
                        "type": "object",
                        "properties": {
                            "notify_type": {
                                "title": "Notify Type",
                                "description": "The severity of the notification.",
                                "default": "info",
                                "enum": [
                                    "info",
                                    "success",
                                    "warning",
                                    "failure"
                                ],
                                "type": "string"
                            },
                            "integration_key": {
                                "title": "Integration Key",
                                "description": "This can be found on the Events API V2 integration's detail page, and is also referred to as a Routing Key. This must be provided alongside `api_key`, but will error if provided alongside `url`.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "api_key": {
                                "title": "API Key",
                                "description": "This can be found under Integrations. This must be provided alongside `integration_key`, but will error if provided alongside `url`.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "source": {
                                "title": "Source",
                                "description": "The source string as part of the payload.",
                                "default": "Prefect",
                                "type": "string"
                            },
                            "component": {
                                "title": "Component",
                                "description": "The component string as part of the payload.",
                                "default": "Notification",
                                "type": "string"
                            },
                            "group": {
                                "title": "Group",
                                "description": "The group string as part of the payload.",
                                "type": "string"
                            },
                            "class_id": {
                                "title": "Class ID",
                                "description": "The class string as part of the payload.",
                                "type": "string"
                            },
                            "region_name": {
                                "title": "Region Name",
                                "description": "The region name.",
                                "default": "us",
                                "enum": [
                                    "us",
                                    "eu"
                                ],
                                "type": "string"
                            },
                            "clickable_url": {
                                "title": "Clickable URL",
                                "description": "A clickable URL to associate with the notice.",
                                "minLength": 1,
                                "maxLength": 65536,
                                "format": "uri",
                                "type": "string"
                            },
                            "include_image": {
                                "title": "Include Image",
                                "description": "Associate the notification status via a represented icon.",
                                "default": true,
                                "type": "boolean"
                            },
                            "custom_details": {
                                "title": "Custom Details",
                                "description": "Additional details to include as part of the payload.",
                                "example": "{\"disk_space_left\": \"145GB\"}",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "integration_key",
                            "api_key"
                        ],
                        "block_type_slug": "pager-duty-webhook",
                        "secret_fields": [
                            "integration_key",
                            "api_key"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [
                        "notify"
                    ],
                    "version": "2.7.12"
                }
            },
            "slack-webhook": {
                "name": "Slack Webhook",
                "slug": "slack-webhook",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/7dkzINU9r6j44giEFuHuUC/85d4cd321ad60c1b1e898bc3fbd28580/5cb480cd5f1b6d3fbadece79.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.SlackWebhook",
                "description": "Enables sending notifications via a provided Slack webhook.",
                "code_example": "Load a saved Slack webhook and send a message:\n```python\nfrom prefect.blocks.notifications import SlackWebhook\n\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nslack_webhook_block.notify(\"Hello from Prefect!\")\n```",
                "block_schema": {
                    "checksum": "sha256:273dfe712133cba3cdb092d88741da37e33cee892bfcf4fcf2895bdcee49a965",
                    "fields": {
                        "title": "SlackWebhook",
                        "description": "Enables sending notifications via a provided Slack webhook.",
                        "type": "object",
                        "properties": {
                            "notify_type": {
                                "title": "Notify Type",
                                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                                "default": "prefect_default",
                                "enum": [
                                    "prefect_default",
                                    "info",
                                    "success",
                                    "warning",
                                    "failure"
                                ],
                                "type": "string"
                            },
                            "url": {
                                "title": "Webhook URL",
                                "description": "Slack incoming webhook URL used to send notifications.",
                                "example": "https://hooks.slack.com/XXX",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            }
                        },
                        "required": [
                            "url"
                        ],
                        "block_type_slug": "slack-webhook",
                        "secret_fields": [
                            "url"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [
                        "notify"
                    ],
                    "version": "2.7.12"
                }
            },
            "twilio-sms": {
                "name": "Twilio SMS",
                "slug": "twilio-sms",
                "logo_url": "https://images.ctfassets.net/zscdif0zqppk/YTCgPL6bnK3BczP2gV9md/609283105a7006c57dbfe44ee1a8f313/58482bb9cef1014c0b5e4a31.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/notifications/#prefect.blocks.notifications.TwilioSMS",
                "description": "Enables sending notifications via Twilio SMS.",
                "code_example": "Load a saved `TwilioSMS` block and send a message:\n```python\nfrom prefect.blocks.notifications import TwilioSMS\ntwilio_webhook_block = TwilioSMS.load(\"BLOCK_NAME\")\ntwilio_webhook_block.notify(\"Hello from Prefect!\")\n```",
                "block_schema": {
                    "checksum": "sha256:46c6934a4ea723f515caf9e7b0f8ce313c5deca4050d31d32adf5abdf1de05c2",
                    "fields": {
                        "title": "TwilioSMS",
                        "description": "Enables sending notifications via Twilio SMS.",
                        "type": "object",
                        "properties": {
                            "notify_type": {
                                "title": "Notify Type",
                                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                                "default": "prefect_default",
                                "enum": [
                                    "prefect_default",
                                    "info",
                                    "success",
                                    "warning",
                                    "failure"
                                ],
                                "type": "string"
                            },
                            "account_sid": {
                                "title": "Account Sid",
                                "description": "The Twilio Account SID - it can be found on the homepage of the Twilio console.",
                                "type": "string"
                            },
                            "auth_token": {
                                "title": "Auth Token",
                                "description": "The Twilio Authentication Token - it can be found on the homepage of the Twilio console.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "from_phone_number": {
                                "title": "From Phone Number",
                                "description": "The valid Twilio phone number to send the message from.",
                                "example": "18001234567",
                                "type": "string"
                            },
                            "to_phone_numbers": {
                                "title": "To Phone Numbers",
                                "description": "A list of valid Twilio phone number(s) to send the message to.",
                                "example": "18004242424",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "account_sid",
                            "auth_token",
                            "from_phone_number",
                            "to_phone_numbers"
                        ],
                        "block_type_slug": "twilio-sms",
                        "secret_fields": [
                            "auth_token"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [
                        "notify"
                    ],
                    "version": "2.7.12"
                }
            },
            "date-time": {
                "name": "Date Time",
                "slug": "date-time",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1gmljt5UBcAwEXHPnIofcE/0f3cf1da45b8b2df846e142ab52b1778/image21.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.DateTime",
                "description": "A block that represents a datetime",
                "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import DateTime\n\ndata_time_block = DateTime.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:7943c88ca6ab22804082b595b9847d035a1364bdb23474c927317bcab9cb5d9c",
                    "fields": {
                        "title": "DateTime",
                        "description": "A block that represents a datetime",
                        "type": "object",
                        "properties": {
                            "value": {
                                "title": "Value",
                                "description": "An ISO 8601-compatible datetime value.",
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "block_type_slug": "date-time",
                        "secret_fields": [],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "2.7.12"
                }
            },
            "json": {
                "name": "JSON",
                "slug": "json",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/19W3Di10hhb4oma2Qer0x6/764d1e7b4b9974cd268c775a488b9d26/image16.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.JSON",
                "description": "A block that represents JSON",
                "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import JSON\n\njson_block = JSON.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:ef9b76010e0545bd7f2212029460731f66ccfce289affe4b504cbeb702fc8ea3",
                    "fields": {
                        "title": "JSON",
                        "description": "A block that represents JSON",
                        "type": "object",
                        "properties": {
                            "value": {
                                "title": "Value",
                                "description": "A JSON-compatible value."
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "block_type_slug": "json",
                        "secret_fields": [],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "2.7.12"
                }
            },
            "secret": {
                "name": "Secret",
                "slug": "secret",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5uUmyGBjRejYuGTWbTxz6E/3003e1829293718b3a5d2e909643a331/image8.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.Secret",
                "description": "A block that represents a secret value. The value stored in this block will be obfuscated when\nthis block is logged or shown in the UI.",
                "code_example": "```python\nfrom prefect.blocks.system import Secret\n\nsecret_block = Secret.load(\"BLOCK_NAME\")\n\n# Access the stored secret\nsecret_block.get()\n```",
                "block_schema": {
                    "checksum": "sha256:e6b26e0a0240eb112e604608338f863e5ca2f137936e310014bfa2139d0a9b6c",
                    "fields": {
                        "title": "Secret",
                        "description": "A block that represents a secret value. The value stored in this block will be obfuscated when\nthis block is logged or shown in the UI.",
                        "type": "object",
                        "properties": {
                            "value": {
                                "title": "Value",
                                "description": "A string value that should be kept secret.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "block_type_slug": "secret",
                        "secret_fields": [
                            "value"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "2.7.12"
                }
            },
            "string": {
                "name": "String",
                "slug": "string",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/4zjrZmh9tBrFiikeB44G4O/2ce1dbbac1c8e356f7c429e0f8bbb58d/image10.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/blocks/system/#prefect.blocks.system.String",
                "description": "A block that represents a string",
                "code_example": "Load a stored string value:\n```python\nfrom prefect.blocks.system import String\n\nstring_block = String.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:e9f3f43e55b73bc94ee2a355f1e4ef7064645268cba22571c2a95d90a2af8dd0",
                    "fields": {
                        "title": "String",
                        "description": "A block that represents a string",
                        "type": "object",
                        "properties": {
                            "value": {
                                "title": "Value",
                                "description": "A string value.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "block_type_slug": "string",
                        "secret_fields": [],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "2.7.12"
                }
            },
            "docker-container": {
                "name": "Docker Container",
                "slug": "docker-container",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.DockerContainer",
                "description": "Runs a command in a container.\n\nRequires a Docker Engine to be connectable. Docker settings will be retrieved from\nthe environment.\n\nClick [here](https://docs.prefect.io/tutorials/docker/) to see a tutorial.",
                "code_example": "```python\nfrom prefect.infrastructure.docker import DockerContainer\n\ndocker_container_block = DockerContainer.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:78f682fc53eeb9a7c4917f621b9afccc039842c432701f07abaef3ba5f1ff752",
                    "fields": {
                        "title": "DockerContainer",
                        "description": "Runs a command in a container.\n\nRequires a Docker Engine to be connectable. Docker settings will be retrieved from\nthe environment.\n\nClick [here](https://docs.prefect.io/tutorials/docker/) to see a tutorial.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "title": "Type",
                                "description": "The type of infrastructure.",
                                "default": "docker-container",
                                "enum": [
                                    "docker-container"
                                ],
                                "type": "string"
                            },
                            "env": {
                                "title": "Environment",
                                "description": "Environment variables to set in the configured infrastructure.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "labels": {
                                "title": "Labels",
                                "description": "Labels applied to the infrastructure for metadata purposes.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "name": {
                                "title": "Name",
                                "description": "Name applied to the infrastructure for identification.",
                                "type": "string"
                            },
                            "command": {
                                "title": "Command",
                                "description": "The command to run in the infrastructure.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "image": {
                                "title": "Image",
                                "description": "Tag of a Docker image to use. Defaults to the Prefect image.",
                                "type": "string"
                            },
                            "image_pull_policy": {
                                "description": "Specifies if the image should be pulled.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/ImagePullPolicy"
                                    }
                                ]
                            },
                            "image_registry": {
                                "$ref": "#/definitions/DockerRegistry"
                            },
                            "networks": {
                                "title": "Networks",
                                "description": "A list of strings specifying Docker networks to connect the container to.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "network_mode": {
                                "title": "Network Mode",
                                "description": "The network mode for the created container (e.g. host, bridge). If 'networks' is set, this cannot be set.",
                                "type": "string"
                            },
                            "auto_remove": {
                                "title": "Auto Remove",
                                "description": "If set, the container will be removed on completion.",
                                "default": false,
                                "type": "boolean"
                            },
                            "volumes": {
                                "title": "Volumes",
                                "description": "A list of volume mount strings in the format of \"local_path:container_path\".",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "stream_output": {
                                "title": "Stream Output",
                                "description": "If set, the output will be streamed from the container to local standard output.",
                                "default": true,
                                "type": "boolean"
                            },
                            "memswap_limit": {
                                "title": "Memswap Limit",
                                "description": "Total memory (memory + swap), -1 to disable swap. Should only be set if `mem_limit` is also set. If `mem_limit` is set, this defaults toallowing the container to use as much swap as memory. For example, if `mem_limit` is 300m and `memswap_limit` is not set, the container can use 600m in total of memory and swap.",
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "mem_limit": {
                                "title": "Mem Limit",
                                "description": "Memory limit of the created container. Accepts float values to enforce a limit in bytes or a string with a unit e.g. 100000b, 1000k, 128m, 1g. If a string is given without a unit, bytes are assumed.",
                                "anyOf": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "privileged": {
                                "title": "Privileged",
                                "description": "Give extended privileges to this container.",
                                "default": false,
                                "type": "boolean"
                            }
                        },
                        "block_type_slug": "docker-container",
                        "secret_fields": [
                            "image_registry.password"
                        ],
                        "block_schema_references": {
                            "image_registry": {
                                "block_type_slug": "docker-registry",
                                "block_schema_checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9"
                            }
                        },
                        "definitions": {
                            "ImagePullPolicy": {
                                "title": "ImagePullPolicy",
                                "description": "An enumeration.",
                                "enum": [
                                    "IF_NOT_PRESENT",
                                    "ALWAYS",
                                    "NEVER"
                                ],
                                "type": "string"
                            },
                            "DockerRegistry": {
                                "title": "DockerRegistry",
                                "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "title": "Username",
                                        "description": "The username to log into the registry with.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "title": "Password",
                                        "description": "The password to log into the registry with.",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "registry_url": {
                                        "title": "Registry Url",
                                        "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                                        "type": "string"
                                    },
                                    "reauth": {
                                        "title": "Reauth",
                                        "description": "Whether or not to reauthenticate on each interaction.",
                                        "default": true,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "username",
                                    "password",
                                    "registry_url"
                                ],
                                "block_type_slug": "docker-registry",
                                "secret_fields": [
                                    "password"
                                ],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [
                        "run-infrastructure"
                    ],
                    "version": "2.7.12"
                }
            },
            "docker-registry": {
                "name": "Docker Registry",
                "slug": "docker-registry",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.docker.DockerRegistry",
                "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
                "code_example": "```python\nfrom prefect.infrastructure.docker import DockerRegistry\n\ndocker_registry_block = DockerRegistry.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9",
                    "fields": {
                        "title": "DockerRegistry",
                        "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
                        "type": "object",
                        "properties": {
                            "username": {
                                "title": "Username",
                                "description": "The username to log into the registry with.",
                                "type": "string"
                            },
                            "password": {
                                "title": "Password",
                                "description": "The password to log into the registry with.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "registry_url": {
                                "title": "Registry Url",
                                "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                                "type": "string"
                            },
                            "reauth": {
                                "title": "Reauth",
                                "description": "Whether or not to reauthenticate on each interaction.",
                                "default": true,
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "username",
                            "password",
                            "registry_url"
                        ],
                        "block_type_slug": "docker-registry",
                        "secret_fields": [
                            "password"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [
                        "docker-login"
                    ],
                    "version": "2.7.12"
                }
            },
            "kubernetes-job": {
                "name": "Kubernetes Job",
                "slug": "kubernetes-job",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1zrSeY8DZ1MJZs2BAyyyGk/20445025358491b8b72600b8f996125b/Kubernetes_logo_without_workmark.svg.png?h=250",
                "documentation_url": "https://docs.prefect.io/api-ref/prefect/infrastructure/#prefect.infrastructure.KubernetesJob",
                "description": "Runs a command as a Kubernetes Job.\n\nClick [here](https://medium.com/the-prefect-blog/how-to-use-kubernetes-with-prefect-419b2e8b8cb2/) to see a tutorial.",
                "code_example": "```python\nfrom prefect.infrastructure.kubernetes import KubernetesJob\n\nkubernetes_job_block = KubernetesJob.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:1a553852c1bcc9cd95645917bdbaaae9e28cbcc1270ff5b43b45bbd87564f5cc",
                    "fields": {
                        "title": "KubernetesJob",
                        "description": "Runs a command as a Kubernetes Job.\n\nClick [here](https://medium.com/the-prefect-blog/how-to-use-kubernetes-with-prefect-419b2e8b8cb2/) to see a tutorial.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "title": "Type",
                                "description": "The type of infrastructure.",
                                "default": "kubernetes-job",
                                "enum": [
                                    "kubernetes-job"
                                ],
                                "type": "string"
                            },
                            "env": {
                                "title": "Environment",
                                "description": "Environment variables to set in the configured infrastructure.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "labels": {
                                "title": "Labels",
                                "description": "Labels applied to the infrastructure for metadata purposes.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "name": {
                                "title": "Name",
                                "description": "Name applied to the infrastructure for identification.",
                                "type": "string"
                            },
                            "command": {
                                "title": "Command",
                                "description": "The command to run in the infrastructure.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "image": {
                                "title": "Image",
                                "description": "The image reference of a container image to use for the job, for example, `docker.io/prefecthq/prefect:2-latest`.The behavior is as described in the Kubernetes documentation and uses the latest version of Prefect by default, unless an image is already present in a provided job manifest.",
                                "type": "string"
                            },
                            "namespace": {
                                "title": "Namespace",
                                "description": "The Kubernetes namespace to use for this job. Defaults to 'default' unless a namespace is already present in a provided job manifest.",
                                "type": "string"
                            },
                            "service_account_name": {
                                "title": "Service Account Name",
                                "description": "The Kubernetes service account to use for this job.",
                                "type": "string"
                            },
                            "image_pull_policy": {
                                "description": "The Kubernetes image pull policy to use for job containers.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/KubernetesImagePullPolicy"
                                    }
                                ]
                            },
                            "cluster_config": {
                                "title": "Cluster Config",
                                "description": "The Kubernetes cluster config to use for this job.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/KubernetesClusterConfig"
                                    }
                                ]
                            },
                            "job": {
                                "title": "Base Job Manifest",
                                "description": "The base manifest for the Kubernetes Job.",
                                "type": "object"
                            },
                            "customizations": {
                                "title": "Customizations",
                                "description": "A list of JSON 6902 patches to apply to the base Job manifest.",
                                "type": "array",
                                "format": "rfc6902",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            },
                            "job_watch_timeout_seconds": {
                                "title": "Job Watch Timeout Seconds",
                                "description": "Number of seconds to wait for each event emitted by the job before timing out. Defaults to `None`, which means no timeout will be enforced while waiting for each event in the job lifecycle.",
                                "type": "integer"
                            },
                            "pod_watch_timeout_seconds": {
                                "title": "Pod Watch Timeout Seconds",
                                "description": "Number of seconds to watch for pod creation before timing out.",
                                "default": 60,
                                "type": "integer"
                            },
                            "stream_output": {
                                "title": "Stream Output",
                                "description": "If set, output will be streamed from the job to local standard output.",
                                "default": true,
                                "type": "boolean"
                            },
                            "finished_job_ttl": {
                                "title": "Finished Job Ttl",
                                "description": "The number of seconds to retain jobs after completion. If set, finished jobs will be cleaned up by Kubernetes after the given delay. If None (default), jobs will need to be manually removed.",
                                "type": "integer"
                            }
                        },
                        "block_type_slug": "kubernetes-job",
                        "secret_fields": [],
                        "block_schema_references": {
                            "cluster_config": {
                                "block_type_slug": "kubernetes-cluster-config",
                                "block_schema_checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b"
                            }
                        },
                        "definitions": {
                            "KubernetesImagePullPolicy": {
                                "title": "KubernetesImagePullPolicy",
                                "description": "An enumeration.",
                                "enum": [
                                    "IfNotPresent",
                                    "Always",
                                    "Never"
                                ]
                            },
                            "KubernetesClusterConfig": {
                                "title": "KubernetesClusterConfig",
                                "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                                "type": "object",
                                "properties": {
                                    "config": {
                                        "title": "Config",
                                        "description": "The entire contents of a kubectl config file.",
                                        "type": "object"
                                    },
                                    "context_name": {
                                        "title": "Context Name",
                                        "description": "The name of the kubectl context to use.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "config",
                                    "context_name"
                                ],
                                "block_type_slug": "kubernetes-cluster-config",
                                "secret_fields": [],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [
                        "run-infrastructure"
                    ],
                    "version": "2.7.12"
                }
            },
            "process": {
                "name": "Process",
                "slug": "process",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/39WQhVu4JK40rZWltGqhuC/d15be6189a0cb95949a6b43df00dcb9b/image5.png?h=250",
                "documentation_url": "https://docs.prefect.io/concepts/infrastructure/#process",
                "description": "Run a command in a new process.\n\nCurrent environment variables and Prefect settings will be included in the created\nprocess. Configured environment variables will override any current environment\nvariables.",
                "code_example": "```python\nfrom prefect.infrastructure.process import Process\n\nprocess_block = Process.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:47c4ac364708f4a6f27fb10b18086ad92c0a53fbbdd9ba07c030467067979f84",
                    "fields": {
                        "title": "Process",
                        "description": "Run a command in a new process.\n\nCurrent environment variables and Prefect settings will be included in the created\nprocess. Configured environment variables will override any current environment\nvariables.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "title": "Type",
                                "description": "The type of infrastructure.",
                                "default": "process",
                                "enum": [
                                    "process"
                                ],
                                "type": "string"
                            },
                            "env": {
                                "title": "Environment",
                                "description": "Environment variables to set in the configured infrastructure.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "labels": {
                                "title": "Labels",
                                "description": "Labels applied to the infrastructure for metadata purposes.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "name": {
                                "title": "Name",
                                "description": "Name applied to the infrastructure for identification.",
                                "type": "string"
                            },
                            "command": {
                                "title": "Command",
                                "description": "The command to run in the infrastructure.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "stream_output": {
                                "title": "Stream Output",
                                "description": "If set, output will be streamed from the process to local standard output.",
                                "default": true,
                                "type": "boolean"
                            },
                            "working_dir": {
                                "title": "Working Dir",
                                "description": "If set, the process will open within the specified path as the working directory. Otherwise, a temporary directory will be created.",
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string",
                                        "format": "path"
                                    }
                                ]
                            }
                        },
                        "block_type_slug": "process",
                        "secret_fields": [],
                        "block_schema_references": {}
                    },
                    "capabilities": [
                        "run-infrastructure"
                    ],
                    "version": "2.7.12"
                }
            }
        }
    },
    "prefect-airbyte": {
        "block_types": {
            "airbyte-connection": {
                "name": "Airbyte Connection",
                "slug": "airbyte-connection",
                "logo_url": "https://images.ctfassets.net/zscdif0zqppk/6gm7wsC7ANnKYQsm7oiSYz/aac1ad5e054d35d9e24af8d6ed3aed5f/59758427?h=250",
                "documentation_url": null,
                "description": "A block representing an existing Airbyte connection.",
                "code_example": "Load an existing `AirbyteConnection` block:\n```python\nfrom prefect_airbyte import AirbyteConnection\n\nairbyte_connection = AirbyteConnection.load(\"BLOCK_NAME\")\n```\n\nRun an Airbyte connection sync as a flow:\n```python\nfrom prefect import flow\nfrom prefect_airbyte import AirbyteConnection\nfrom prefect_airbyte.flows import run_connection_sync # this is a flow\n\nairbyte_connection = AirbyteConnection.load(\"BLOCK_NAME\")\n\n@flow\ndef airbyte_orchestrator():\n    run_connection_sync(airbyte_connection) # now it's a subflow\n```",
                "block_schema": {
                    "checksum": "sha256:b0d1479644a23659067536d89a7254ec7ab05101e225db74de165b90cd3a1d73",
                    "fields": {
                        "title": "AirbyteConnection",
                        "description": "A block representing an existing Airbyte connection.",
                        "type": "object",
                        "properties": {
                            "airbyte_server": {
                                "title": "Airbyte Server",
                                "description": "AirbyteServer block representing the Airbyte instance where the Airbyte connection is defined.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AirbyteServer"
                                    }
                                ]
                            },
                            "connection_id": {
                                "title": "Connection Id",
                                "description": "UUID of the Airbyte Connection to trigger.",
                                "type": "string",
                                "format": "uuid"
                            },
                            "poll_interval_s": {
                                "title": "Poll Interval S",
                                "description": "Time in seconds between status checks of the Airbyte sync job.",
                                "default": 15,
                                "type": "integer"
                            },
                            "status_updates": {
                                "title": "Status Updates",
                                "description": "Whether to log job status on each poll of the Airbyte sync job.",
                                "default": false,
                                "type": "boolean"
                            },
                            "timeout": {
                                "title": "Timeout",
                                "description": "Timeout in seconds for requests made by httpx.AsyncClient.",
                                "default": 5,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "airbyte_server",
                            "connection_id"
                        ],
                        "block_type_slug": "airbyte-connection",
                        "secret_fields": [
                            "airbyte_server.password"
                        ],
                        "block_schema_references": {
                            "airbyte_server": {
                                "block_type_slug": "airbyte-server",
                                "block_schema_checksum": "sha256:f0bc49c549405ef3e753b3cc0a81e0e13b1b036acfab571c76f4d198c4bb842a"
                            }
                        },
                        "definitions": {
                            "AirbyteServer": {
                                "title": "AirbyteServer",
                                "description": "A block representing an Airbyte server for generating `AirbyteClient` instances.",
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "title": "Username",
                                        "description": "Username to authenticate with Airbyte API.",
                                        "default": "airbyte",
                                        "type": "string"
                                    },
                                    "password": {
                                        "title": "Password",
                                        "description": "Password to authenticate with Airbyte API.",
                                        "default": "**********",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "server_host": {
                                        "title": "Server Host",
                                        "description": "Host address of Airbyte server.",
                                        "default": "localhost",
                                        "example": "127.0.0.1",
                                        "type": "string"
                                    },
                                    "server_port": {
                                        "title": "Server Port",
                                        "description": "Port number of Airbyte server.",
                                        "default": 8000,
                                        "type": "integer"
                                    },
                                    "api_version": {
                                        "title": "API Version",
                                        "description": "Airbyte API version to use.",
                                        "default": "v1",
                                        "type": "string"
                                    },
                                    "use_ssl": {
                                        "title": "Use SSL",
                                        "description": "Whether to use SSL when connecting to Airbyte server.",
                                        "default": false,
                                        "type": "boolean"
                                    }
                                },
                                "block_type_slug": "airbyte-server",
                                "secret_fields": [
                                    "password"
                                ],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [],
                    "version": "0.2.0"
                }
            },
            "airbyte-server": {
                "name": "Airbyte Server",
                "slug": "airbyte-server",
                "logo_url": "https://images.ctfassets.net/zscdif0zqppk/6gm7wsC7ANnKYQsm7oiSYz/aac1ad5e054d35d9e24af8d6ed3aed5f/59758427?h=250",
                "documentation_url": null,
                "description": "A block representing an Airbyte server for generating `AirbyteClient` instances.",
                "code_example": "```python\nfrom prefect_airbyte.server import AirbyteServer\n\nserver = AirbyteServer.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:f0bc49c549405ef3e753b3cc0a81e0e13b1b036acfab571c76f4d198c4bb842a",
                    "fields": {
                        "title": "AirbyteServer",
                        "description": "A block representing an Airbyte server for generating `AirbyteClient` instances.",
                        "type": "object",
                        "properties": {
                            "username": {
                                "title": "Username",
                                "description": "Username to authenticate with Airbyte API.",
                                "default": "airbyte",
                                "type": "string"
                            },
                            "password": {
                                "title": "Password",
                                "description": "Password to authenticate with Airbyte API.",
                                "default": "**********",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "server_host": {
                                "title": "Server Host",
                                "description": "Host address of Airbyte server.",
                                "default": "localhost",
                                "example": "127.0.0.1",
                                "type": "string"
                            },
                            "server_port": {
                                "title": "Server Port",
                                "description": "Port number of Airbyte server.",
                                "default": 8000,
                                "type": "integer"
                            },
                            "api_version": {
                                "title": "API Version",
                                "description": "Airbyte API version to use.",
                                "default": "v1",
                                "type": "string"
                            },
                            "use_ssl": {
                                "title": "Use SSL",
                                "description": "Whether to use SSL when connecting to Airbyte server.",
                                "default": false,
                                "type": "boolean"
                            }
                        },
                        "block_type_slug": "airbyte-server",
                        "secret_fields": [
                            "password"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "0.2.0"
                }
            }
        }
    },
    "prefect-aws": {
        "block_types": {
            "aws-credentials": {
                "name": "AWS Credentials",
                "slug": "aws-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
                "documentation_url": null,
                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                "code_example": "Load stored AWS credentials:\n```python\nfrom prefect_aws import AwsCredentials\n\naws_credentials_block = AwsCredentials.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe",
                    "fields": {
                        "title": "AwsCredentials",
                        "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                        "type": "object",
                        "properties": {
                            "aws_access_key_id": {
                                "title": "AWS Access Key ID",
                                "description": "A specific AWS access key ID.",
                                "type": "string"
                            },
                            "aws_secret_access_key": {
                                "title": "AWS Access Key Secret",
                                "description": "A specific AWS secret access key.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "aws_session_token": {
                                "title": "AWS Session Token",
                                "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                                "type": "string"
                            },
                            "profile_name": {
                                "title": "Profile Name",
                                "description": "The profile to use when creating your session.",
                                "type": "string"
                            },
                            "region_name": {
                                "title": "Region Name",
                                "description": "The AWS Region where you want to create new connections.",
                                "type": "string"
                            },
                            "aws_client_parameters": {
                                "title": "AWS Client Parameters",
                                "description": "Extra parameters to initialize the Client.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AwsClientParameters"
                                    }
                                ]
                            }
                        },
                        "block_type_slug": "aws-credentials",
                        "secret_fields": [
                            "aws_secret_access_key"
                        ],
                        "block_schema_references": {},
                        "definitions": {
                            "AwsClientParameters": {
                                "title": "AwsClientParameters",
                                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                                "type": "object",
                                "properties": {
                                    "api_version": {
                                        "title": "API Version",
                                        "description": "The API version to use.",
                                        "type": "string"
                                    },
                                    "use_ssl": {
                                        "title": "Use SSL",
                                        "description": "Whether or not to use SSL.",
                                        "default": true,
                                        "type": "boolean"
                                    },
                                    "verify": {
                                        "title": "Verify",
                                        "description": "Whether or not to verify SSL certificates.",
                                        "default": true,
                                        "anyOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "type": "string",
                                                "format": "file-path"
                                            }
                                        ]
                                    },
                                    "verify_cert_path": {
                                        "title": "Certificate Authority Bundle File Path",
                                        "description": "Path to the CA cert bundle to use.",
                                        "format": "file-path",
                                        "type": "string"
                                    },
                                    "endpoint_url": {
                                        "title": "Endpoint URL",
                                        "description": "The complete URL to use for the constructed client.",
                                        "type": "string"
                                    },
                                    "config": {
                                        "title": "Botocore Config",
                                        "description": "Advanced configuration for Botocore clients.",
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "capabilities": [],
                    "version": "0.2.4"
                }
            },
            "ecs-task": {
                "name": "ECS Task",
                "slug": "ecs-task",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
                "documentation_url": null,
                "description": "Run a command as an ECS task.",
                "code_example": "```python\nfrom prefect_aws.ecs import ECSTask\n\necs_task_block = ECSTask.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:c86b71920b0e9522c2dd310e6b9da9ff323f49e9a324799502c66f2808efc8cb",
                    "fields": {
                        "title": "ECSTask",
                        "description": "Run a command as an ECS task.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "title": "Type",
                                "description": "The slug for this task type.",
                                "default": "ecs-task",
                                "enum": [
                                    "ecs-task"
                                ],
                                "type": "string"
                            },
                            "env": {
                                "title": "Environment Variables",
                                "description": "Environment variables to provide to the task run. These variables are set on the Prefect container at task runtime. These will not be set on the task definition.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "labels": {
                                "title": "Labels",
                                "description": "Labels applied to the infrastructure for metadata purposes.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "name": {
                                "title": "Name",
                                "description": "Name applied to the infrastructure for identification.",
                                "type": "string"
                            },
                            "command": {
                                "title": "Command",
                                "description": "The command to run in the infrastructure.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "aws_credentials": {
                                "title": "AWS Credentials",
                                "description": "The AWS credentials to use to connect to ECS.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AwsCredentials"
                                    }
                                ]
                            },
                            "task_definition_arn": {
                                "title": "Task Definition Arn",
                                "description": "An identifier for an existing task definition to use. If fields are set on the `ECSTask` that conflict with the task definition, a new copy will be registered with the required values. Cannot be used with `task_definition`. If not provided, Prefect will generate and register a minimal task definition.",
                                "type": "string"
                            },
                            "task_definition": {
                                "title": "Task Definition",
                                "description": "An ECS task definition to use. Prefect may set defaults or override fields on this task definition to match other `ECSTask` fields. Cannot be used with `task_definition_arn`. If not provided, Prefect will generate and register a minimal task definition.",
                                "type": "object"
                            },
                            "family": {
                                "title": "Family",
                                "description": "A family for the task definition. If not provided, it will be inferred from the task definition. If the task definition does not have a family, the name will be generated. When flow and deployment metadata is available, the generated name will include their names. Values for this field will be slugified to match AWS character requirements.",
                                "type": "string"
                            },
                            "image": {
                                "title": "Image",
                                "description": "The image to use for the Prefect container in the task. If this value is not null, it will override the value in the task definition. This value defaults to a Prefect base image matching your local versions.",
                                "type": "string"
                            },
                            "auto_deregister_task_definition": {
                                "title": "Auto Deregister Task Definition",
                                "description": "If set, any task definitions that are created by this block will be deregistered. Existing task definitions linked by ARN will never be deregistered. Deregistering a task definition does not remove it from your AWS account, instead it will be marked as INACTIVE.",
                                "default": true,
                                "type": "boolean"
                            },
                            "cpu": {
                                "title": "CPU",
                                "description": "The amount of CPU to provide to the ECS task. Valid amounts are specified in the AWS documentation. If not provided, a default value of 1024 will be used unless present on the task definition.",
                                "type": "integer"
                            },
                            "memory": {
                                "title": "Memory",
                                "description": "The amount of memory to provide to the ECS task. Valid amounts are specified in the AWS documentation. If not provided, a default value of 2048 will be used unless present on the task definition.",
                                "type": "integer"
                            },
                            "execution_role_arn": {
                                "title": "Execution Role ARN",
                                "description": "An execution role to use for the task. This controls the permissions of the task when it is launching. If this value is not null, it will override the value in the task definition. An execution role must be provided to capture logs from the container.",
                                "type": "string"
                            },
                            "configure_cloudwatch_logs": {
                                "title": "Configure Cloudwatch Logs",
                                "description": "If `True`, the Prefect container will be configured to send its output to the AWS CloudWatch logs service. This functionality requires an execution role with logs:CreateLogStream, logs:CreateLogGroup, and logs:PutLogEvents permissions. The default for this field is `False` unless `stream_output` is set.",
                                "type": "boolean"
                            },
                            "cloudwatch_logs_options": {
                                "title": "Cloudwatch Logs Options",
                                "description": "When `configure_cloudwatch_logs` is enabled, this setting may be used to pass additional options to the CloudWatch logs configuration or override the default options. See the AWS documentation for available options. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html#create_awslogs_logdriver_options.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "stream_output": {
                                "title": "Stream Output",
                                "description": "If `True`, logs will be streamed from the Prefect container to the local console. Unless you have configured AWS CloudWatch logs manually on your task definition, this requires the same prerequisites outlined in `configure_cloudwatch_logs`.",
                                "type": "boolean"
                            },
                            "launch_type": {
                                "title": "Launch Type",
                                "description": "The type of ECS task run infrastructure that should be used. Note that 'FARGATE_SPOT' is not a formal ECS launch type, but we will configure the proper capacity provider stategy if set here.",
                                "default": "FARGATE",
                                "enum": [
                                    "FARGATE",
                                    "EC2",
                                    "EXTERNAL",
                                    "FARGATE_SPOT"
                                ],
                                "type": "string"
                            },
                            "vpc_id": {
                                "title": "VPC ID",
                                "description": "The AWS VPC to link the task run to. This is only applicable when using the 'awsvpc' network mode for your task. FARGATE tasks require this network  mode, but for EC2 tasks the default network mode is 'bridge'. If using the 'awsvpc' network mode and this field is null, your default VPC will be used. If no default VPC can be found, the task run will fail.",
                                "type": "string"
                            },
                            "cluster": {
                                "title": "Cluster",
                                "description": "The ECS cluster to run the task in. The ARN or name may be provided. If not provided, the default cluster will be used.",
                                "type": "string"
                            },
                            "task_role_arn": {
                                "title": "Task Role ARN",
                                "description": "A role to attach to the task run. This controls the permissions of the task while it is running.",
                                "type": "string"
                            },
                            "task_customizations": {
                                "title": "Task Customizations",
                                "description": "A list of JSON 6902 patches to apply to the task run request.",
                                "type": "array",
                                "format": "rfc6902",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            },
                            "task_start_timeout_seconds": {
                                "title": "Task Start Timeout Seconds",
                                "description": "The amount of time to watch for the start of the ECS task before marking it as failed. The task must enter a RUNNING state to be considered started.",
                                "default": 120,
                                "type": "integer"
                            },
                            "task_watch_poll_interval": {
                                "title": "Task Watch Poll Interval",
                                "description": "The amount of time to wait between AWS API calls while monitoring the state of an ECS task.",
                                "default": 5.0,
                                "type": "number"
                            }
                        },
                        "block_type_slug": "ecs-task",
                        "secret_fields": [
                            "aws_credentials.aws_secret_access_key"
                        ],
                        "block_schema_references": {
                            "aws_credentials": {
                                "block_type_slug": "aws-credentials",
                                "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
                            }
                        },
                        "definitions": {
                            "AwsClientParameters": {
                                "title": "AwsClientParameters",
                                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                                "type": "object",
                                "properties": {
                                    "api_version": {
                                        "title": "API Version",
                                        "description": "The API version to use.",
                                        "type": "string"
                                    },
                                    "use_ssl": {
                                        "title": "Use SSL",
                                        "description": "Whether or not to use SSL.",
                                        "default": true,
                                        "type": "boolean"
                                    },
                                    "verify": {
                                        "title": "Verify",
                                        "description": "Whether or not to verify SSL certificates.",
                                        "default": true,
                                        "anyOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "type": "string",
                                                "format": "file-path"
                                            }
                                        ]
                                    },
                                    "verify_cert_path": {
                                        "title": "Certificate Authority Bundle File Path",
                                        "description": "Path to the CA cert bundle to use.",
                                        "format": "file-path",
                                        "type": "string"
                                    },
                                    "endpoint_url": {
                                        "title": "Endpoint URL",
                                        "description": "The complete URL to use for the constructed client.",
                                        "type": "string"
                                    },
                                    "config": {
                                        "title": "Botocore Config",
                                        "description": "Advanced configuration for Botocore clients.",
                                        "type": "object"
                                    }
                                }
                            },
                            "AwsCredentials": {
                                "title": "AwsCredentials",
                                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                                "type": "object",
                                "properties": {
                                    "aws_access_key_id": {
                                        "title": "AWS Access Key ID",
                                        "description": "A specific AWS access key ID.",
                                        "type": "string"
                                    },
                                    "aws_secret_access_key": {
                                        "title": "AWS Access Key Secret",
                                        "description": "A specific AWS secret access key.",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "aws_session_token": {
                                        "title": "AWS Session Token",
                                        "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                                        "type": "string"
                                    },
                                    "profile_name": {
                                        "title": "Profile Name",
                                        "description": "The profile to use when creating your session.",
                                        "type": "string"
                                    },
                                    "region_name": {
                                        "title": "Region Name",
                                        "description": "The AWS Region where you want to create new connections.",
                                        "type": "string"
                                    },
                                    "aws_client_parameters": {
                                        "title": "AWS Client Parameters",
                                        "description": "Extra parameters to initialize the Client.",
                                        "allOf": [
                                            {
                                                "$ref": "#/definitions/AwsClientParameters"
                                            }
                                        ]
                                    }
                                },
                                "block_type_slug": "aws-credentials",
                                "secret_fields": [
                                    "aws_secret_access_key"
                                ],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [
                        "run-infrastructure"
                    ],
                    "version": "0.2.4"
                }
            },
            "minio-credentials": {
                "name": "MinIO Credentials",
                "slug": "minio-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/22vXcxsOrVeFrUwHfSoaeT/7607b876eb589a9028c8126e78f4c7b4/imageedit_7_2837870043.png?h=250",
                "documentation_url": null,
                "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
                "code_example": "Load stored MinIO credentials:\n```python\nfrom prefect_aws import MinIOCredentials\n\nminio_credentials_block = MinIOCredentials.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb",
                    "fields": {
                        "title": "MinIOCredentials",
                        "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
                        "type": "object",
                        "properties": {
                            "minio_root_user": {
                                "title": "Minio Root User",
                                "description": "Admin or root user.",
                                "type": "string"
                            },
                            "minio_root_password": {
                                "title": "Minio Root Password",
                                "description": "Admin or root password.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "region_name": {
                                "title": "Region Name",
                                "description": "The AWS Region where you want to create new connections.",
                                "type": "string"
                            },
                            "aws_client_parameters": {
                                "title": "Aws Client Parameters",
                                "description": "Extra parameters to initialize the Client.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AwsClientParameters"
                                    }
                                ]
                            }
                        },
                        "required": [
                            "minio_root_user",
                            "minio_root_password"
                        ],
                        "block_type_slug": "minio-credentials",
                        "secret_fields": [
                            "minio_root_password"
                        ],
                        "block_schema_references": {},
                        "definitions": {
                            "AwsClientParameters": {
                                "title": "AwsClientParameters",
                                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                                "type": "object",
                                "properties": {
                                    "api_version": {
                                        "title": "API Version",
                                        "description": "The API version to use.",
                                        "type": "string"
                                    },
                                    "use_ssl": {
                                        "title": "Use SSL",
                                        "description": "Whether or not to use SSL.",
                                        "default": true,
                                        "type": "boolean"
                                    },
                                    "verify": {
                                        "title": "Verify",
                                        "description": "Whether or not to verify SSL certificates.",
                                        "default": true,
                                        "anyOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "type": "string",
                                                "format": "file-path"
                                            }
                                        ]
                                    },
                                    "verify_cert_path": {
                                        "title": "Certificate Authority Bundle File Path",
                                        "description": "Path to the CA cert bundle to use.",
                                        "format": "file-path",
                                        "type": "string"
                                    },
                                    "endpoint_url": {
                                        "title": "Endpoint URL",
                                        "description": "The complete URL to use for the constructed client.",
                                        "type": "string"
                                    },
                                    "config": {
                                        "title": "Botocore Config",
                                        "description": "Advanced configuration for Botocore clients.",
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "capabilities": [],
                    "version": "0.2.4"
                }
            },
            "s3-bucket": {
                "name": "S3 Bucket",
                "slug": "s3-bucket",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/1jbV4lceHOjGgunX15lUwT/db88e184d727f721575aeb054a37e277/aws.png?h=250",
                "documentation_url": null,
                "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO.",
                "code_example": "```python\nfrom prefect_aws.s3 import S3Bucket\n\ns3_bucket_block = S3Bucket.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:6aaadd460a122fd8472dec40920803dbbfe4d408bb9a3716d40aafb1cde6bbb8",
                    "fields": {
                        "title": "S3Bucket",
                        "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO.",
                        "type": "object",
                        "properties": {
                            "bucket_name": {
                                "title": "Bucket Name",
                                "description": "Name of your bucket.",
                                "type": "string"
                            },
                            "minio_credentials": {
                                "title": "Minio Credentials",
                                "description": "[DEPRECATED; use the credentials field instead] A block containing your credentials (choose this or AWS Credentials)",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/MinIOCredentials"
                                    }
                                ]
                            },
                            "aws_credentials": {
                                "title": "Aws Credentials",
                                "description": "[DEPRECATED; use the credentials field instead] A block containing your credentials (choose this or MinIO Credentials).",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AwsCredentials"
                                    }
                                ]
                            },
                            "basepath": {
                                "title": "Basepath",
                                "description": "[DEPRECATED; use the bucket_folder field instead] A default location to write to and read from in the S3 bucket. Defaults to the root of the bucket.",
                                "default": "",
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string",
                                        "format": "path"
                                    }
                                ]
                            },
                            "endpoint_url": {
                                "title": "Endpoint Url",
                                "description": "[DEPRECATED; pass AwsClientParameters in AwsCredentials instead] URL endpoint to use for S3 compatible storage. Defaults to standard AWS S3 endpoint.",
                                "type": "string"
                            },
                            "credentials": {
                                "title": "Credentials",
                                "description": "A block containing your credentials to AWS or MinIO.",
                                "anyOf": [
                                    {
                                        "$ref": "#/definitions/AwsCredentials"
                                    },
                                    {
                                        "$ref": "#/definitions/MinIOCredentials"
                                    }
                                ]
                            },
                            "bucket_folder": {
                                "title": "Bucket Folder",
                                "description": "A default path to a folder within the S3 bucket to use for reading and writing objects.",
                                "default": "",
                                "type": "string"
                            }
                        },
                        "required": [
                            "bucket_name"
                        ],
                        "block_type_slug": "s3-bucket",
                        "secret_fields": [
                            "minio_credentials.minio_root_password",
                            "aws_credentials.aws_secret_access_key",
                            "credentials.aws_secret_access_key",
                            "credentials.minio_root_password"
                        ],
                        "block_schema_references": {
                            "minio_credentials": {
                                "block_type_slug": "minio-credentials",
                                "block_schema_checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb"
                            },
                            "aws_credentials": {
                                "block_type_slug": "aws-credentials",
                                "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
                            },
                            "credentials": [
                                {
                                    "block_type_slug": "aws-credentials",
                                    "block_schema_checksum": "sha256:17b73297ed60f080fb235b3a5a145a6d9b28a09b3ff2d9d17810b5e2c2075ebe"
                                },
                                {
                                    "block_type_slug": "minio-credentials",
                                    "block_schema_checksum": "sha256:5b4f1e5270f3a3670ff3d06b7e6e8246d54dacba976321dec42abe51c33415fb"
                                }
                            ]
                        },
                        "definitions": {
                            "AwsClientParameters": {
                                "title": "AwsClientParameters",
                                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                                "type": "object",
                                "properties": {
                                    "api_version": {
                                        "title": "API Version",
                                        "description": "The API version to use.",
                                        "type": "string"
                                    },
                                    "use_ssl": {
                                        "title": "Use SSL",
                                        "description": "Whether or not to use SSL.",
                                        "default": true,
                                        "type": "boolean"
                                    },
                                    "verify": {
                                        "title": "Verify",
                                        "description": "Whether or not to verify SSL certificates.",
                                        "default": true,
                                        "anyOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "type": "string",
                                                "format": "file-path"
                                            }
                                        ]
                                    },
                                    "verify_cert_path": {
                                        "title": "Certificate Authority Bundle File Path",
                                        "description": "Path to the CA cert bundle to use.",
                                        "format": "file-path",
                                        "type": "string"
                                    },
                                    "endpoint_url": {
                                        "title": "Endpoint URL",
                                        "description": "The complete URL to use for the constructed client.",
                                        "type": "string"
                                    },
                                    "config": {
                                        "title": "Botocore Config",
                                        "description": "Advanced configuration for Botocore clients.",
                                        "type": "object"
                                    }
                                }
                            },
                            "MinIOCredentials": {
                                "title": "MinIOCredentials",
                                "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
                                "type": "object",
                                "properties": {
                                    "minio_root_user": {
                                        "title": "Minio Root User",
                                        "description": "Admin or root user.",
                                        "type": "string"
                                    },
                                    "minio_root_password": {
                                        "title": "Minio Root Password",
                                        "description": "Admin or root password.",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "region_name": {
                                        "title": "Region Name",
                                        "description": "The AWS Region where you want to create new connections.",
                                        "type": "string"
                                    },
                                    "aws_client_parameters": {
                                        "title": "Aws Client Parameters",
                                        "description": "Extra parameters to initialize the Client.",
                                        "allOf": [
                                            {
                                                "$ref": "#/definitions/AwsClientParameters"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "minio_root_user",
                                    "minio_root_password"
                                ],
                                "block_type_slug": "minio-credentials",
                                "secret_fields": [
                                    "minio_root_password"
                                ],
                                "block_schema_references": {}
                            },
                            "AwsCredentials": {
                                "title": "AwsCredentials",
                                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                                "type": "object",
                                "properties": {
                                    "aws_access_key_id": {
                                        "title": "AWS Access Key ID",
                                        "description": "A specific AWS access key ID.",
                                        "type": "string"
                                    },
                                    "aws_secret_access_key": {
                                        "title": "AWS Access Key Secret",
                                        "description": "A specific AWS secret access key.",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "aws_session_token": {
                                        "title": "AWS Session Token",
                                        "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                                        "type": "string"
                                    },
                                    "profile_name": {
                                        "title": "Profile Name",
                                        "description": "The profile to use when creating your session.",
                                        "type": "string"
                                    },
                                    "region_name": {
                                        "title": "Region Name",
                                        "description": "The AWS Region where you want to create new connections.",
                                        "type": "string"
                                    },
                                    "aws_client_parameters": {
                                        "title": "AWS Client Parameters",
                                        "description": "Extra parameters to initialize the Client.",
                                        "allOf": [
                                            {
                                                "$ref": "#/definitions/AwsClientParameters"
                                            }
                                        ]
                                    }
                                },
                                "block_type_slug": "aws-credentials",
                                "secret_fields": [
                                    "aws_secret_access_key"
                                ],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [
                        "get-directory",
                        "put-directory",
                        "read-path",
                        "write-path"
                    ],
                    "version": "0.2.4"
                }
            }
        }
    },
    "prefect-azure": {
        "block_types": {
            "azure-blob-storage-credentials": {
                "name": "Azure Blob Storage Credentials",
                "slug": "azure-blob-storage-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
                "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureBlobStorageCredentials",
                "description": "Block used to manage Blob Storage authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string.",
                "code_example": "Load stored Azure Blob Storage credentials:\n```python\nfrom prefect_azure import AzureBlobStorageCredentials\nazure_credentials_block = AzureBlobStorageCredentials.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:9bf39d40868a19b338176231b83556e7273373293fa16862a970014525001242",
                    "fields": {
                        "title": "AzureBlobStorageCredentials",
                        "description": "Block used to manage Blob Storage authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string.",
                        "type": "object",
                        "properties": {
                            "connection_string": {
                                "title": "Connection String",
                                "description": "If account_url is not provided, the connection string to authenticate.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "account_url": {
                                "title": "Account Url",
                                "description": "If a connection string is not provided, the URL to the Blob Storage account; will use DefaultAzureCredential to authenticate.",
                                "type": "string"
                            }
                        },
                        "block_type_slug": "azure-blob-storage-credentials",
                        "secret_fields": [
                            "connection_string"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "0.2.4"
                }
            },
            "azure-container-instance-credentials": {
                "name": "Azure Container Instance Credentials",
                "slug": "azure-container-instance-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
                "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureContainerInstanceCredentials",
                "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data.",
                "code_example": "```python\nfrom prefect_azure.credentials import AzureContainerInstanceCredentials\n\nazure_container_instance_credentials_block = AzureContainerInstanceCredentials.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:17a9122f9f345a4547128cc05f7ff7146da9a72c4bac2850004fcc6c8d9be2d1",
                    "fields": {
                        "title": "AzureContainerInstanceCredentials",
                        "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data.",
                        "type": "object",
                        "properties": {
                            "client_id": {
                                "title": "Client ID",
                                "description": "The service principal client ID. If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                                "type": "string"
                            },
                            "tenant_id": {
                                "title": "Tenant ID",
                                "description": "The service principal tenant ID.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                                "type": "string"
                            },
                            "client_secret": {
                                "title": "Client Secret",
                                "description": "The service principal client secret.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "credential_kwargs": {
                                "title": "Additional Credential Keyword Arguments",
                                "description": "Additional keyword arguments to pass to `ClientSecretCredential` or `DefaultAzureCredential`.",
                                "type": "object"
                            }
                        },
                        "block_type_slug": "azure-container-instance-credentials",
                        "secret_fields": [
                            "client_secret"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "0.2.4"
                }
            },
            "azure-container-instance-job": {
                "name": "Azure Container Instance Job",
                "slug": "azure-container-instance-job",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
                "documentation_url": "https://prefecthq.github.io/prefect-azure/container_instance/#prefect_azure.container_instance.AzureContainerInstanceJob",
                "description": "Run tasks using Azure Container Instances. Note this block is experimental. The interface may change without notice.",
                "code_example": "```python\nfrom prefect_azure.container_instance import AzureContainerInstanceJob\n\nazure_container_instance_job_block = AzureContainerInstanceJob.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:d34fc49003f14c302ab5c10d9cda276bfd5571a32ca777fb641fff0dc199271b",
                    "fields": {
                        "title": "AzureContainerInstanceJob",
                        "description": "Run tasks using Azure Container Instances. Note this block is experimental. The interface may change without notice.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "title": "Type",
                                "description": "The slug for this task type.",
                                "default": "container-instance-job",
                                "enum": [
                                    "container-instance-job"
                                ],
                                "type": "string"
                            },
                            "env": {
                                "title": "Environment Variables",
                                "description": "Environment variables to provide to the task run. These variables are set on the Prefect container at task runtime. These will not be set on the task definition.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "labels": {
                                "title": "Labels",
                                "description": "Labels applied to the infrastructure for metadata purposes.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "name": {
                                "title": "Name",
                                "description": "Name applied to the infrastructure for identification.",
                                "type": "string"
                            },
                            "command": {
                                "title": "Command",
                                "description": "The command to run in the infrastructure.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "aci_credentials": {
                                "title": "Aci Credentials",
                                "description": "Credentials for Azure Container Instances; if not provided will attempt to use DefaultAzureCredentials.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/AzureContainerInstanceCredentials"
                                    }
                                ]
                            },
                            "resource_group_name": {
                                "title": "Azure Resource Group Name",
                                "description": "The name of the Azure Resource Group in which to run Prefect ACI tasks.",
                                "type": "string"
                            },
                            "subscription_id": {
                                "title": "Azure Subscription ID",
                                "description": "The ID of the Azure subscription to create containers under.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "identities": {
                                "title": "Identities",
                                "description": "A list of user-assigned identities to associate with the container group. The identities should be an ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "image": {
                                "title": "Image",
                                "description": "The image to use for the Prefect container in the task. This value defaults to a Prefect base image matching your local versions.",
                                "type": "string"
                            },
                            "entrypoint": {
                                "title": "Entrypoint",
                                "description": "The entrypoint of the container you wish you run. This value defaults to the entrypoint used by Prefect images and should only be changed when using a custom image that is not based on an official Prefect image. Any commands set on deployments will be passed to the entrypoint as parameters.",
                                "default": "/opt/prefect/entrypoint.sh",
                                "type": "string"
                            },
                            "image_registry": {
                                "$ref": "#/definitions/DockerRegistry"
                            },
                            "cpu": {
                                "title": "CPU",
                                "description": "The number of virtual CPUs to assign to the task container. If not provided, a default value of 1.0 will be used.",
                                "default": 1.0,
                                "type": "number"
                            },
                            "gpu_count": {
                                "title": "GPU Count",
                                "description": "The number of GPUs to assign to the task container. If not provided, no GPU will be used.",
                                "type": "integer"
                            },
                            "gpu_sku": {
                                "title": "GPU SKU",
                                "description": "The Azure GPU SKU to use. See the ACI documentation for a list of GPU SKUs available in each Azure region.",
                                "type": "string"
                            },
                            "memory": {
                                "title": "Memory",
                                "description": "The amount of memory in gigabytes to provide to the ACI task. Valid amounts are specified in the Azure documentation. If not provided, a default value of  1.0 will be used unless present on the task definition.",
                                "default": 1.0,
                                "type": "number"
                            },
                            "subnet_ids": {
                                "title": "Subnet IDs",
                                "description": "A list of Azure subnet IDs the container should be connected to.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "dns_servers": {
                                "title": "DNS Servers",
                                "description": "A list of custom DNS Servers the container should use.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "stream_output": {
                                "title": "Stream Output",
                                "description": "If `True`, logs will be streamed from the Prefect container to the local console.",
                                "type": "boolean"
                            },
                            "task_start_timeout_seconds": {
                                "title": "Task Start Timeout Seconds",
                                "description": "The amount of time to watch for the start of the ACI container. before marking it as failed.",
                                "default": 240,
                                "type": "integer"
                            },
                            "task_watch_poll_interval": {
                                "title": "Task Watch Poll Interval",
                                "description": "The number of seconds to wait between Azure API calls while monitoring the state of an Azure Container Instances task.",
                                "default": 5.0,
                                "type": "number"
                            }
                        },
                        "required": [
                            "resource_group_name",
                            "subscription_id"
                        ],
                        "block_type_slug": "azure-container-instance-job",
                        "secret_fields": [
                            "aci_credentials.client_secret",
                            "subscription_id",
                            "image_registry.password"
                        ],
                        "block_schema_references": {
                            "aci_credentials": {
                                "block_type_slug": "azure-container-instance-credentials",
                                "block_schema_checksum": "sha256:17a9122f9f345a4547128cc05f7ff7146da9a72c4bac2850004fcc6c8d9be2d1"
                            },
                            "image_registry": {
                                "block_type_slug": "docker-registry",
                                "block_schema_checksum": "sha256:6db1457676eee0b54ca2834b06f80a80f7c90112e64f1bdd26afb2e62fcceed9"
                            }
                        },
                        "definitions": {
                            "AzureContainerInstanceCredentials": {
                                "title": "AzureContainerInstanceCredentials",
                                "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data.",
                                "type": "object",
                                "properties": {
                                    "client_id": {
                                        "title": "Client ID",
                                        "description": "The service principal client ID. If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                                        "type": "string"
                                    },
                                    "tenant_id": {
                                        "title": "Tenant ID",
                                        "description": "The service principal tenant ID.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                                        "type": "string"
                                    },
                                    "client_secret": {
                                        "title": "Client Secret",
                                        "description": "The service principal client secret.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "credential_kwargs": {
                                        "title": "Additional Credential Keyword Arguments",
                                        "description": "Additional keyword arguments to pass to `ClientSecretCredential` or `DefaultAzureCredential`.",
                                        "type": "object"
                                    }
                                },
                                "block_type_slug": "azure-container-instance-credentials",
                                "secret_fields": [
                                    "client_secret"
                                ],
                                "block_schema_references": {}
                            },
                            "DockerRegistry": {
                                "title": "DockerRegistry",
                                "description": "Connects to a Docker registry.\n\nRequires a Docker Engine to be connectable.",
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "title": "Username",
                                        "description": "The username to log into the registry with.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "title": "Password",
                                        "description": "The password to log into the registry with.",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "registry_url": {
                                        "title": "Registry Url",
                                        "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                                        "type": "string"
                                    },
                                    "reauth": {
                                        "title": "Reauth",
                                        "description": "Whether or not to reauthenticate on each interaction.",
                                        "default": true,
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "username",
                                    "password",
                                    "registry_url"
                                ],
                                "block_type_slug": "docker-registry",
                                "secret_fields": [
                                    "password"
                                ],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [
                        "run-infrastructure"
                    ],
                    "version": "0.2.4"
                }
            },
            "azure-cosmos-db-credentials": {
                "name": "Azure Cosmos DB Credentials",
                "slug": "azure-cosmos-db-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
                "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureCosmosDbCredentials",
                "description": "Block used to manage Cosmos DB authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string.",
                "code_example": "Load stored Azure Cosmos DB credentials:\n```python\nfrom prefect_azure import AzureCosmosDbCredentials\nazure_credentials_block = AzureCosmosDbCredentials.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:2f9f6e6f6c2eb570a05113638e6237fe74f7684993a351018657211d4705a83a",
                    "fields": {
                        "title": "AzureCosmosDbCredentials",
                        "description": "Block used to manage Cosmos DB authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string.",
                        "type": "object",
                        "properties": {
                            "connection_string": {
                                "title": "Connection String",
                                "description": "Includes the authorization information required.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            }
                        },
                        "required": [
                            "connection_string"
                        ],
                        "block_type_slug": "azure-cosmos-db-credentials",
                        "secret_fields": [
                            "connection_string"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "0.2.4"
                }
            },
            "azureml-credentials": {
                "name": "AzureML Credentials",
                "slug": "azureml-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/6AiQ6HRIft8TspZH7AfyZg/39fd82bdbb186db85560f688746c8cdd/azure.png?h=250",
                "documentation_url": "https://prefecthq.github.io/prefect-azure/credentials/#prefect_azure.credentials.AzureMlCredentials",
                "description": "Block used to manage authentication with AzureML. Azure authentication is\nhandled via the `azure` module.",
                "code_example": "Load stored AzureML credentials:\n```python\nfrom prefect_azure import AzureMlCredentials\nazure_ml_credentials_block = AzureMlCredentials.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:7ade832cf475fd1ea5d88faf0003fad80abc9049bcc2bd5fed52476ffc800c79",
                    "fields": {
                        "title": "AzureMlCredentials",
                        "description": "Block used to manage authentication with AzureML. Azure authentication is\nhandled via the `azure` module.",
                        "type": "object",
                        "properties": {
                            "tenant_id": {
                                "title": "Tenant Id",
                                "description": "The active directory tenant that the service identity belongs to.",
                                "type": "string"
                            },
                            "service_principal_id": {
                                "title": "Service Principal Id",
                                "description": "The service principal ID.",
                                "type": "string"
                            },
                            "service_principal_password": {
                                "title": "Service Principal Password",
                                "description": "The service principal password/key.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "subscription_id": {
                                "title": "Subscription Id",
                                "description": "The Azure subscription ID containing the workspace.",
                                "type": "string"
                            },
                            "resource_group": {
                                "title": "Resource Group",
                                "description": "The resource group containing the workspace.",
                                "type": "string"
                            },
                            "workspace_name": {
                                "title": "Workspace Name",
                                "description": "The existing workspace name.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "tenant_id",
                            "service_principal_id",
                            "service_principal_password",
                            "subscription_id",
                            "resource_group",
                            "workspace_name"
                        ],
                        "block_type_slug": "azureml-credentials",
                        "secret_fields": [
                            "service_principal_password"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "0.2.4"
                }
            }
        }
    },
    "prefect-bitbucket": {
        "block_types": {
            "bitbucket-credentials": {
                "name": "BitBucket Credentials",
                "slug": "bitbucket-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250",
                "documentation_url": null,
                "description": "Store BitBucket credentials to interact with private BitBucket repositories.",
                "code_example": "Load stored BitBucket credentials:\n```python\nfrom prefect_bitbucket import BitBucketCredentials\nbitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:9664d0350dce1573394c4828254a3be1fd4c9797b9eae02ea3ed322f988a34c9",
                    "fields": {
                        "title": "BitBucketCredentials",
                        "description": "Store BitBucket credentials to interact with private BitBucket repositories.",
                        "type": "object",
                        "properties": {
                            "token": {
                                "title": "Token",
                                "description": "A BitBucket Personal Access Token.",
                                "name": "Personal Access Token",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            },
                            "username": {
                                "title": "Username",
                                "description": "Identification name unique across entire BitBucket site.",
                                "type": "string"
                            }
                        },
                        "block_type_slug": "bitbucket-credentials",
                        "secret_fields": [
                            "token"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "0.1.0"
                }
            },
            "bitbucket-repository": {
                "name": "BitBucket Repository",
                "slug": "bitbucket-repository",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/27LMR24ewTSDW238Lks1vH/34c5028659f4007528feadc8db8cecbd/500px-Bitbucket-blue-logomark-only.svg.png?h=250",
                "documentation_url": null,
                "description": "Interact with files stored in BitBucket repositories.",
                "code_example": "```python\nfrom prefect_bitbucket.repository import BitBucketRepository\n\nbitbucket_repository_block = BitBucketRepository.load(\"BLOCK_NAME\")\n```",
                "block_schema": {
                    "checksum": "sha256:19bec1067241778f4467b24d19f2ff69eadf9098dde3d73f85536ab61bedd156",
                    "fields": {
                        "title": "BitBucketRepository",
                        "description": "Interact with files stored in BitBucket repositories.",
                        "type": "object",
                        "properties": {
                            "repository": {
                                "title": "Repository",
                                "description": "The URL of a BitBucket repository to read from in HTTPS format",
                                "type": "string"
                            },
                            "reference": {
                                "title": "Reference",
                                "description": "An optional reference to pin to; can be a branch or tag.",
                                "type": "string"
                            },
                            "bitbucket_credentials": {
                                "title": "Bitbucket Credentials",
                                "description": "An optional BitBucketCredentials block for authenticating with private BitBucket repos.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/BitBucketCredentials"
                                    }
                                ]
                            }
                        },
                        "required": [
                            "repository"
                        ],
                        "block_type_slug": "bitbucket-repository",
                        "secret_fields": [
                            "bitbucket_credentials.token"
                        ],
                        "block_schema_references": {
                            "bitbucket_credentials": {
                                "block_type_slug": "bitbucket-credentials",
                                "block_schema_checksum": "sha256:9664d0350dce1573394c4828254a3be1fd4c9797b9eae02ea3ed322f988a34c9"
                            }
                        },
                        "definitions": {
                            "BitBucketCredentials": {
                                "title": "BitBucketCredentials",
                                "description": "Store BitBucket credentials to interact with private BitBucket repositories.",
                                "type": "object",
                                "properties": {
                                    "token": {
                                        "title": "Token",
                                        "description": "A BitBucket Personal Access Token.",
                                        "name": "Personal Access Token",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    },
                                    "username": {
                                        "title": "Username",
                                        "description": "Identification name unique across entire BitBucket site.",
                                        "type": "string"
                                    }
                                },
                                "block_type_slug": "bitbucket-credentials",
                                "secret_fields": [
                                    "token"
                                ],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [
                        "get-directory"
                    ],
                    "version": "0.1.0"
                }
            }
        }
    },
    "prefect-census": {
        "block_types": {
            "census-credentials": {
                "name": "Census Credentials",
                "slug": "census-credentials",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250",
                "documentation_url": "https://prefecthq.github.io/prefect-census/credentials/",
                "description": "Credentials block for credential use across Census tasks and flows.",
                "code_example": "Load stored Census credentials:\n```python\nfrom prefect_census import CensusCredentials\n\ncensus_creds = CensusCredentials.load(\"BLOCK_NAME\")\n```\n\nUse CensusCredentials instance to trigger a sync run:\n```python\nimport asyncio\nfrom prefect import flow\nfrom prefect_census import CensusCredentials\n\ncredentials = CensusCredentials(api_key=\"my_api_key\")\n\n@flow\nasync def trigger_sync_run_flow():\n    async with credentials.get_client() as client:\n        await client.trigger_sync_run(sync_id=42)\n\nasyncio.run(trigger_sync_run_flow())\n```\n\nLoad saved Census credentials within a flow:\n```python\nfrom prefect import flow\n\nfrom prefect_census import CensusCredentials\nfrom prefect_census.syncs import trigger_census_sync\n\n@flow\ndef trigger_census_sync_run_flow():\n    credentials = CensusCredentials.load(\"my-census-credentials\")\n    trigger_census_sync(credentials=credentials, sync_id=42)\n\ntrigger_census_sync_run_flow()\n```",
                "block_schema": {
                    "checksum": "sha256:4101a4f4096dd3a5cf916692b7948959ea88e87bb08d91d6d5cc929224da5f4a",
                    "fields": {
                        "title": "CensusCredentials",
                        "description": "Credentials block for credential use across Census tasks and flows.",
                        "type": "object",
                        "properties": {
                            "api_key": {
                                "title": "API Key",
                                "description": "API key to authenticate with the Census API.",
                                "type": "string",
                                "writeOnly": true,
                                "format": "password"
                            }
                        },
                        "required": [
                            "api_key"
                        ],
                        "block_type_slug": "census-credentials",
                        "secret_fields": [
                            "api_key"
                        ],
                        "block_schema_references": {}
                    },
                    "capabilities": [],
                    "version": "0.1.1"
                }
            },
            "census-sync": {
                "name": "Census Sync",
                "slug": "census-sync",
                "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/3oznRx2UFkd2XyqNkEZpzB/4e0967a828aec5e2527cedadf8d24e8a/llmjpn8a0pgu8szjmnyi.webp?h=250",
                "documentation_url": "https://prefecthq.github.io/prefect-census/syncs/",
                "description": "Runs a Census sync",
                "code_example": "Trigger a Census sync and wait for completion as a subflow:\n```python\nfrom prefect import flow\nfrom prefect_census import CensusSync, run_census_sync\n\n@flow\ndef my_census_flow():\n    census_sync = CensusSync.load(\"BLOCK_NAME\")\n\n    # do some setup\n\n    run_census_sync(census_sync)\n\n    # do some cleanup\n```",
                "block_schema": {
                    "checksum": "sha256:2234f595059b193c7b7d096b663dba3178f3bb1d84138bbefe83a6452419ac7e",
                    "fields": {
                        "title": "CensusSync",
                        "description": "Runs a Census sync",
                        "type": "object",
                        "properties": {
                            "credentials": {
                                "title": "Credentials",
                                "description": "Credentials for authenticating with Census.",
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/CensusCredentials"
                                    }
                                ]
                            },
                            "sync_id": {
                                "title": "Sync Id",
                                "description": "The ID of the sync to trigger.",
                                "type": "integer"
                            },
                            "force_full_sync": {
                                "title": "Force Full Sync",
                                "description": "If `True`, a full sync will be triggered.",
                                "default": false,
                                "type": "boolean"
                            },
                            "max_wait_seconds": {
                                "title": "Max Wait Seconds",
                                "description": "The maximum number of seconds to wait for the sync to complete.",
                                "default": 3600,
                                "type": "integer"
                            },
                            "poll_frequency_seconds": {
                                "title": "Poll Frequency Seconds",
                                "description": "Number of seconds to wait between sync status checks.",
                                "default": 5,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "credentials",
                            "sync_id"
                        ],
                        "block_type_slug": "census-sync",
                        "secret_fields": [
                            "credentials.api_key"
                        ],
                        "block_schema_references": {
                            "credentials": {
                                "block_type_slug": "census-credentials",
                                "block_schema_checksum": "sha256:4101a4f4096dd3a5cf916692b7948959ea88e87bb08d91d6d5cc929224da5f4a"
                            }
                        },
                        "definitions": {
                            "CensusCredentials": {
                                "title": "CensusCredentials",
                                "description": "Credentials block for credential use across Census tasks and flows.",
                                "type": "object",
                                "properties": {
                                    "api_key": {
                                        "title": "API Key",
                                        "description": "API key to authenticate with the Census API.",
                                        "type": "string",
                                        "writeOnly": true,
                                        "format": "password"
                                    }
                                },
                                "required": [
                                    "api_key"
                                ],
                                "block_type_slug": "census-credentials",
                                "secret_fields": [
                                    "api_key"
                                ],
                                "block_schema_references": {}
                            }
                        }
                    },
                    "capabilities": [],
                    "version": "0.1.1"
                }
            }
        }
    }
}