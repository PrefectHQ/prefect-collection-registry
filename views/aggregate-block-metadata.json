{
  "prefect": {
    "block_types": {
      "date-time": {
        "name": "Date Time",
        "slug": "date-time",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/8b3da9a6621e92108b8e6a75b82e15374e170ff7-48x48.png",
        "documentation_url": "https://docs.prefect.io/latest/develop/blocks",
        "description": "A block that represents a datetime. Deprecated, please use Variables to store datetime data instead.",
        "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import DateTime\n\ndata_time_block = DateTime.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:94cacaae861dc63b4fcfef96972d9269bb7cb8897a0591a6fd2ac6d0ee64571f",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "date-time",
            "description": "A block that represents a datetime. Deprecated, please use Variables to store datetime data instead.",
            "properties": {
              "value": {
                "description": "An ISO 8601-compatible datetime value.",
                "format": "date-time",
                "title": "Value",
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "secret_fields": [],
            "title": "DateTime",
            "type": "object"
          },
          "capabilities": [],
          "version": "3.2.13"
        }
      },
      "discord-webhook": {
        "name": "Discord Webhook",
        "slug": "discord-webhook",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/9e94976c80ef925b66d24e5d14f0d47baa6b8f88-250x250.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via a provided Discord webhook.",
        "code_example": "Load a saved Discord webhook and send a message:\n```python\nfrom prefect.blocks.notifications import DiscordWebhook\n\ndiscord_webhook_block = DiscordWebhook.load(\"BLOCK_NAME\")\n\ndiscord_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:d30e56c56e578d6d3e6b6c06f069c8cb8a7c5c924a182731961c846bbe4d7fb3",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "discord-webhook",
            "description": "Enables sending notifications via a provided Discord webhook.",
            "properties": {
              "notify_type": {
                "default": "prefect_default",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "webhook_id": {
                "description": "The first part of 2 tokens provided to you after creating a incoming-webhook.",
                "format": "password",
                "title": "Webhook Id",
                "type": "string",
                "writeOnly": true
              },
              "webhook_token": {
                "description": "The second part of 2 tokens provided to you after creating a incoming-webhook.",
                "format": "password",
                "title": "Webhook Token",
                "type": "string",
                "writeOnly": true
              },
              "botname": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Identify the name of the bot that should issue the message. If one isn't specified then the default is to just use your account (associated with the incoming-webhook).",
                "title": "Bot name"
              },
              "tts": {
                "default": false,
                "description": "Whether to enable Text-To-Speech.",
                "title": "Tts",
                "type": "boolean"
              },
              "include_image": {
                "default": false,
                "description": "Whether to include an image in-line with the message describing the notification type.",
                "title": "Include Image",
                "type": "boolean"
              },
              "avatar": {
                "default": false,
                "description": "Whether to override the default discord avatar icon.",
                "title": "Avatar",
                "type": "boolean"
              },
              "avatar_url": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Over-ride the default discord avatar icon URL. By default this is not set and Apprise chooses the URL dynamically based on the type of message (info, success, warning, or error).",
                "title": "Avatar URL"
              }
            },
            "required": [
              "webhook_id",
              "webhook_token"
            ],
            "secret_fields": [
              "webhook_id",
              "webhook_token"
            ],
            "title": "DiscordWebhook",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "json": {
        "name": "JSON",
        "slug": "json",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/4fcef2294b6eeb423b1332d1ece5156bf296ff96-48x48.png",
        "documentation_url": "https://docs.prefect.io/latest/develop/blocks",
        "description": "A block that represents JSON. Deprecated, please use Variables to store JSON data instead.",
        "code_example": "Load a stored JSON value:\n```python\nfrom prefect.blocks.system import JSON\n\njson_block = JSON.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:0f01d400eb1ebd964d491132cda72e6a6d843f8ce940397b3dba7be219852106",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "json",
            "description": "A block that represents JSON. Deprecated, please use Variables to store JSON data instead.",
            "properties": {
              "value": {
                "description": "A JSON-compatible value.",
                "title": "Value"
              }
            },
            "required": [
              "value"
            ],
            "secret_fields": [],
            "title": "JSON",
            "type": "object"
          },
          "capabilities": [],
          "version": "3.2.13"
        }
      },
      "local-file-system": {
        "name": "Local File System",
        "slug": "local-file-system",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/ad39089fa66d273b943394a68f003f7a19aa850e-48x48.png",
        "documentation_url": "https://docs.prefect.io/latest/develop/results#specifying-a-default-filesystem",
        "description": "Store data as a file on a local file system.",
        "code_example": "Load stored local file system config:\n```python\nfrom prefect.filesystems import LocalFileSystem\n\nlocal_file_system_block = LocalFileSystem.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:80dd31d7cc72fba9f3005c9692797050a118b5b24f3354df05ec1b7de9f0abbd",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "local-file-system",
            "description": "Store data as a file on a local file system.",
            "properties": {
              "basepath": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Default local path for this block to write to.",
                "title": "Basepath"
              }
            },
            "secret_fields": [],
            "title": "LocalFileSystem",
            "type": "object"
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "3.2.13"
        }
      },
      "mattermost-webhook": {
        "name": "Mattermost Webhook",
        "slug": "mattermost-webhook",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/1350a147130bf82cbc799a5f868d2c0116207736-250x250.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via a provided Mattermost webhook.",
        "code_example": "Load a saved Mattermost webhook and send a message:\n```python\nfrom prefect.blocks.notifications import MattermostWebhook\n\nmattermost_webhook_block = MattermostWebhook.load(\"BLOCK_NAME\")\n\nmattermost_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:91621fb148a6f1039ca713efc60d7c0592a8110745c105bd4aa34add4546028c",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "mattermost-webhook",
            "description": "Enables sending notifications via a provided Mattermost webhook.",
            "properties": {
              "notify_type": {
                "default": "prefect_default",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "hostname": {
                "description": "The hostname of your Mattermost server.",
                "examples": [
                  "Mattermost.example.com"
                ],
                "title": "Hostname",
                "type": "string"
              },
              "secure": {
                "default": false,
                "description": "Whether to use secure https connection.",
                "title": "Secure",
                "type": "boolean"
              },
              "token": {
                "description": "The token associated with your Mattermost webhook.",
                "format": "password",
                "title": "Token",
                "type": "string",
                "writeOnly": true
              },
              "botname": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The name of the bot that will send the message.",
                "title": "Bot name"
              },
              "channels": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The channel(s) you wish to notify.",
                "title": "Channels"
              },
              "include_image": {
                "default": false,
                "description": "Whether to include the Apprise status image in the message.",
                "title": "Include Image",
                "type": "boolean"
              },
              "path": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "An optional sub-path specification to append to the hostname.",
                "title": "Path"
              },
              "port": {
                "default": 8065,
                "description": "The port of your Mattermost server.",
                "title": "Port",
                "type": "integer"
              }
            },
            "required": [
              "hostname",
              "token"
            ],
            "secret_fields": [
              "token"
            ],
            "title": "MattermostWebhook",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "ms-teams-webhook": {
        "name": "Microsoft Teams Webhook",
        "slug": "ms-teams-webhook",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/817efe008a57f0a24f3587414714b563e5e23658-250x250.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
        "code_example": "Load a saved Teams webhook and send a message:\n```python\nfrom prefect.blocks.notifications import MicrosoftTeamsWebhook\nteams_webhook_block = MicrosoftTeamsWebhook.load(\"BLOCK_NAME\")\nteams_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:d3ad686c4c75d7f4c4db5075e18170ce22a1f25f98f04c7cc8e2cc12656e9c2f",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "ms-teams-webhook",
            "description": "Enables sending notifications via a provided Microsoft Teams webhook.",
            "properties": {
              "notify_type": {
                "default": "prefect_default",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "url": {
                "description": "The Microsoft Power Automate (Workflows) URL used to send notifications to Teams.",
                "examples": [
                  "https://prod-NO.LOCATION.logic.azure.com:443/workflows/WFID/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=SIGNATURE"
                ],
                "format": "password",
                "title": "Webhook URL",
                "type": "string",
                "writeOnly": true
              },
              "allow_private_urls": {
                "default": true,
                "description": "Whether to allow notifications to private URLs. Defaults to True.",
                "title": "Allow Private Urls",
                "type": "boolean"
              },
              "include_image": {
                "default": true,
                "description": "Include an image with the notification.",
                "title": "Include Image",
                "type": "boolean"
              },
              "wrap": {
                "default": true,
                "description": "Wrap the notification text.",
                "title": "Wrap",
                "type": "boolean"
              }
            },
            "required": [
              "url"
            ],
            "secret_fields": [
              "url"
            ],
            "title": "MicrosoftTeamsWebhook",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "opsgenie-webhook": {
        "name": "Opsgenie Webhook",
        "slug": "opsgenie-webhook",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/d8b5bc6244ae6cd83b62ec42f10d96e14d6e9113-280x280.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via a provided Opsgenie webhook.",
        "code_example": "Load a saved Opsgenie webhook and send a message:\n```python\nfrom prefect.blocks.notifications import OpsgenieWebhook\nopsgenie_webhook_block = OpsgenieWebhook.load(\"BLOCK_NAME\")\nopsgenie_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:7b8fc322908aafb477ada9c61f875f0b1a1acc0f8ba74672ff020bb22936e35e",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "opsgenie-webhook",
            "description": "Enables sending notifications via a provided Opsgenie webhook.",
            "properties": {
              "notify_type": {
                "default": "prefect_default",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "apikey": {
                "description": "The API Key associated with your Opsgenie account.",
                "format": "password",
                "title": "API Key",
                "type": "string",
                "writeOnly": true
              },
              "target_user": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The user(s) you wish to notify.",
                "title": "Target User"
              },
              "target_team": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The team(s) you wish to notify.",
                "title": "Target Team"
              },
              "target_schedule": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The schedule(s) you wish to notify.",
                "title": "Target Schedule"
              },
              "target_escalation": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The escalation(s) you wish to notify.",
                "title": "Target Escalation"
              },
              "region_name": {
                "default": "us",
                "description": "The 2-character region code.",
                "enum": [
                  "us",
                  "eu"
                ],
                "title": "Region Name",
                "type": "string"
              },
              "batch": {
                "default": false,
                "description": "Notify all targets in batches (instead of individually).",
                "title": "Batch",
                "type": "boolean"
              },
              "tags": {
                "anyOf": [
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "A comma-separated list of tags you can associate with your Opsgenie message.",
                "examples": [
                  "[\"tag1\", \"tag2\"]"
                ],
                "title": "Tags"
              },
              "priority": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": 3,
                "description": "The priority to associate with the message. It is on a scale between 1 (LOW) and 5 (EMERGENCY).",
                "title": "Priority"
              },
              "alias": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The alias to associate with the message.",
                "title": "Alias"
              },
              "entity": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The entity to associate with the message.",
                "title": "Entity"
              },
              "details": {
                "anyOf": [
                  {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Additional details composed of key/values pairs.",
                "examples": [
                  "{\"key1\": \"value1\", \"key2\": \"value2\"}"
                ],
                "title": "Details"
              }
            },
            "required": [
              "apikey"
            ],
            "secret_fields": [
              "apikey"
            ],
            "title": "OpsgenieWebhook",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "pager-duty-webhook": {
        "name": "Pager Duty Webhook",
        "slug": "pager-duty-webhook",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/8dbf37d17089c1ce531708eac2e510801f7b3aee-250x250.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via a provided PagerDuty webhook.",
        "code_example": "Load a saved PagerDuty webhook and send a message:\n```python\nfrom prefect.blocks.notifications import PagerDutyWebHook\npagerduty_webhook_block = PagerDutyWebHook.load(\"BLOCK_NAME\")\npagerduty_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:133ccf80404b874c09cc28c5fca18afb8e6e5409fff1b2615775f5f9b73c878e",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "pager-duty-webhook",
            "description": "Enables sending notifications via a provided PagerDuty webhook.",
            "properties": {
              "notify_type": {
                "default": "info",
                "description": "The severity of the notification.",
                "enum": [
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "integration_key": {
                "description": "This can be found on the Events API V2 integration's detail page, and is also referred to as a Routing Key. This must be provided alongside `api_key`, but will error if provided alongside `url`.",
                "format": "password",
                "title": "Integration Key",
                "type": "string",
                "writeOnly": true
              },
              "api_key": {
                "description": "This can be found under Integrations. This must be provided alongside `integration_key`, but will error if provided alongside `url`.",
                "format": "password",
                "title": "API Key",
                "type": "string",
                "writeOnly": true
              },
              "source": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": "Prefect",
                "description": "The source string as part of the payload.",
                "title": "Source"
              },
              "component": {
                "default": "Notification",
                "description": "The component string as part of the payload.",
                "title": "Component",
                "type": "string"
              },
              "group": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The group string as part of the payload.",
                "title": "Group"
              },
              "class_id": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The class string as part of the payload.",
                "title": "Class ID"
              },
              "region_name": {
                "default": "us",
                "description": "The region name.",
                "enum": [
                  "us",
                  "eu"
                ],
                "title": "Region Name",
                "type": "string"
              },
              "clickable_url": {
                "anyOf": [
                  {
                    "format": "uri",
                    "minLength": 1,
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "A clickable URL to associate with the notice.",
                "title": "Clickable URL"
              },
              "include_image": {
                "default": true,
                "description": "Associate the notification status via a represented icon.",
                "title": "Include Image",
                "type": "boolean"
              },
              "custom_details": {
                "anyOf": [
                  {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Additional details to include as part of the payload.",
                "examples": [
                  "{\"disk_space_left\": \"145GB\"}"
                ],
                "title": "Custom Details"
              }
            },
            "required": [
              "integration_key",
              "api_key"
            ],
            "secret_fields": [
              "integration_key",
              "api_key"
            ],
            "title": "PagerDutyWebHook",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "remote-file-system": {
        "name": "Remote File System",
        "slug": "remote-file-system",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/e86b41bc0f9c99ba9489abeee83433b43d5c9365-48x48.png",
        "documentation_url": "https://docs.prefect.io/latest/develop/results#specifying-a-default-filesystem",
        "description": "Store data as a file on a remote file system.\n\nSupports any remote file system supported by `fsspec`. The file system is specified\nusing a protocol. For example, \"s3://my-bucket/my-folder/\" will use S3.",
        "code_example": "Load stored remote file system config:\n```python\nfrom prefect.filesystems import RemoteFileSystem\n\nremote_file_system_block = RemoteFileSystem.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:efb6b7304d9cadaf09a18abc60be7ae86aec60dbd7dba345faa7ba1e960b211f",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "remote-file-system",
            "description": "Store data as a file on a remote file system.\n\nSupports any remote file system supported by `fsspec`. The file system is specified\nusing a protocol. For example, \"s3://my-bucket/my-folder/\" will use S3.",
            "properties": {
              "basepath": {
                "description": "Default path for this block to write to.",
                "examples": [
                  "s3://my-bucket/my-folder/"
                ],
                "title": "Basepath",
                "type": "string"
              },
              "settings": {
                "description": "Additional settings to pass through to fsspec.",
                "title": "Settings",
                "type": "object"
              }
            },
            "required": [
              "basepath"
            ],
            "secret_fields": [],
            "title": "RemoteFileSystem",
            "type": "object"
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "3.2.13"
        }
      },
      "secret": {
        "name": "Secret",
        "slug": "secret",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/c6f20e556dd16effda9df16551feecfb5822092b-48x48.png",
        "documentation_url": "https://docs.prefect.io/latest/develop/blocks",
        "description": "A block that represents a secret value. The value stored in this block will be obfuscated when this block is viewed or edited in the UI.",
        "code_example": "```python\nfrom prefect.blocks.system import Secret\n\nSecret(value=\"sk-1234567890\").save(\"BLOCK_NAME\", overwrite=True)\n\nsecret_block = Secret.load(\"BLOCK_NAME\")\n\n# Access the stored secret\nsecret_block.get()\n```",
        "block_schema": {
          "checksum": "sha256:f290d6bec2665ff8179b4b88a1ba1942bc93b228504da8b65ce66e8aa70d6159",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "secret",
            "description": "A block that represents a secret value. The value stored in this block will be obfuscated when this block is viewed or edited in the UI.",
            "properties": {
              "value": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "title": "string",
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/JsonValue",
                    "title": "JSON"
                  }
                ],
                "description": "A value that should be kept secret.",
                "examples": [
                  "sk-1234567890",
                  {
                    "password": "s3cr3t",
                    "username": "johndoe"
                  }
                ],
                "format": "password",
                "title": "Value",
                "writeOnly": true
              }
            },
            "required": [
              "value"
            ],
            "secret_fields": [
              "value"
            ],
            "title": "Secret",
            "type": "object",
            "definitions": {
              "JsonValue": {}
            }
          },
          "capabilities": [],
          "version": "3.2.13"
        }
      },
      "sendgrid-email": {
        "name": "Sendgrid Email",
        "slug": "sendgrid-email",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/82bc6ed16ca42a2252a5512c72233a253b8a58eb-250x250.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via Sendgrid email service.",
        "code_example": "Load a saved Sendgrid and send a email message:\n```python\nfrom prefect.blocks.notifications import SendgridEmail\n\nsendgrid_block = SendgridEmail.load(\"BLOCK_NAME\")\n\nsendgrid_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:ca1ce43172228b65a570b1a5de9cdbd9813945e672807dc42d21b69d9d3977e7",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "sendgrid-email",
            "description": "Enables sending notifications via Sendgrid email service.",
            "properties": {
              "notify_type": {
                "default": "prefect_default",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "api_key": {
                "description": "The API Key associated with your sendgrid account.",
                "format": "password",
                "title": "API Key",
                "type": "string",
                "writeOnly": true
              },
              "sender_email": {
                "description": "The sender email id.",
                "examples": [
                  "test-support@gmail.com"
                ],
                "title": "Sender email id",
                "type": "string"
              },
              "to_emails": {
                "description": "Email ids of all recipients.",
                "examples": [
                  "\"recipient1@gmail.com\""
                ],
                "items": {
                  "type": "string"
                },
                "title": "Recipient emails",
                "type": "array"
              }
            },
            "required": [
              "api_key",
              "sender_email",
              "to_emails"
            ],
            "secret_fields": [
              "api_key"
            ],
            "title": "SendgridEmail",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "slack-webhook": {
        "name": "Slack Webhook",
        "slug": "slack-webhook",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/c1965ecbf8704ee1ea20d77786de9a41ce1087d1-500x500.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via a provided Slack webhook.",
        "code_example": "Load a saved Slack webhook and send a message:\n```python\nfrom prefect.blocks.notifications import SlackWebhook\n\nslack_webhook_block = SlackWebhook.load(\"BLOCK_NAME\")\nslack_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:27d4fa59cceca2b98793d6ef0f97fd3b416f9cacd26912573d8edc05ca1666b4",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "slack-webhook",
            "description": "Enables sending notifications via a provided Slack webhook.",
            "properties": {
              "notify_type": {
                "default": "prefect_default",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "url": {
                "description": "Slack incoming webhook URL used to send notifications.",
                "examples": [
                  "https://hooks.slack.com/XXX"
                ],
                "format": "password",
                "title": "Webhook URL",
                "type": "string",
                "writeOnly": true
              },
              "allow_private_urls": {
                "default": true,
                "description": "Whether to allow notifications to private URLs. Defaults to True.",
                "title": "Allow Private Urls",
                "type": "boolean"
              }
            },
            "required": [
              "url"
            ],
            "secret_fields": [
              "url"
            ],
            "title": "SlackWebhook",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "smb": {
        "name": "SMB",
        "slug": "smb",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/3f624663f7beb97d011d011bffd51ecf6c499efc-195x195.png",
        "documentation_url": "https://docs.prefect.io/latest/develop/results#specifying-a-default-filesystem",
        "description": "Store data as a file on a SMB share.",
        "code_example": "Load stored SMB config:\n\n```python\nfrom prefect.filesystems import SMB\nsmb_block = SMB.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:43bb8145a5f701e6453ca0f91ccd5640f291960b02d916055ff1523bab896f33",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "smb",
            "description": "Store data as a file on a SMB share.",
            "properties": {
              "share_path": {
                "description": "SMB target (requires <SHARE>, followed by <PATH>).",
                "examples": [
                  "/SHARE/dir/subdir"
                ],
                "title": "Share Path",
                "type": "string"
              },
              "smb_username": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Username with access to the target SMB SHARE.",
                "title": "SMB Username"
              },
              "smb_password": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Password for SMB access.",
                "title": "SMB Password"
              },
              "smb_host": {
                "description": "SMB server/hostname.",
                "title": "SMB server/hostname",
                "type": "string"
              },
              "smb_port": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "SMB port (default: 445).",
                "title": "SMB port"
              }
            },
            "required": [
              "share_path",
              "smb_host"
            ],
            "secret_fields": [
              "smb_username",
              "smb_password"
            ],
            "title": "SMB",
            "type": "object"
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "3.2.13"
        }
      },
      "string": {
        "name": "String",
        "slug": "string",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/c262ea2c80a2c043564e8763f3370c3db5a6b3e6-48x48.png",
        "documentation_url": "https://docs.prefect.io/latest/develop/blocks",
        "description": "A block that represents a string. Deprecated, please use Variables to store string data instead.",
        "code_example": "Load a stored string value:\n```python\nfrom prefect.blocks.system import String\n\nstring_block = String.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:d1323de7a11a0fcd1854515cf86358ad819f51e8d43f5ba176578965f54b2f9f",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "string",
            "description": "A block that represents a string. Deprecated, please use Variables to store string data instead.",
            "properties": {
              "value": {
                "description": "A string value.",
                "title": "Value",
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "secret_fields": [],
            "title": "String",
            "type": "object"
          },
          "capabilities": [],
          "version": "3.2.13"
        }
      },
      "twilio-sms": {
        "name": "Twilio SMS",
        "slug": "twilio-sms",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/8bd8777999f82112c09b9c8d57083ac75a4a0d65-250x250.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/automations-triggers#sending-notifications-with-automations",
        "description": "Enables sending notifications via Twilio SMS.",
        "code_example": "Load a saved `TwilioSMS` block and send a message:\n```python\nfrom prefect.blocks.notifications import TwilioSMS\ntwilio_webhook_block = TwilioSMS.load(\"BLOCK_NAME\")\ntwilio_webhook_block.notify(\"Hello from Prefect!\")\n```",
        "block_schema": {
          "checksum": "sha256:a3c827e6f0554918bbd7a4161795ad86a5e5baf980993cdc6e9e0d58c08b9aec",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "twilio-sms",
            "description": "Enables sending notifications via Twilio SMS.",
            "properties": {
              "notify_type": {
                "default": "prefect_default",
                "description": "The type of notification being performed; the prefect_default is a plain notification that does not attach an image.",
                "enum": [
                  "prefect_default",
                  "info",
                  "success",
                  "warning",
                  "failure"
                ],
                "title": "Notify Type",
                "type": "string"
              },
              "account_sid": {
                "description": "The Twilio Account SID - it can be found on the homepage of the Twilio console.",
                "title": "Account Sid",
                "type": "string"
              },
              "auth_token": {
                "description": "The Twilio Authentication Token - it can be found on the homepage of the Twilio console.",
                "format": "password",
                "title": "Auth Token",
                "type": "string",
                "writeOnly": true
              },
              "from_phone_number": {
                "description": "The valid Twilio phone number to send the message from.",
                "examples": [
                  "18001234567"
                ],
                "title": "From Phone Number",
                "type": "string"
              },
              "to_phone_numbers": {
                "description": "A list of valid Twilio phone number(s) to send the message to.",
                "examples": [
                  "18004242424"
                ],
                "items": {
                  "type": "string"
                },
                "title": "To Phone Numbers",
                "type": "array"
              }
            },
            "required": [
              "account_sid",
              "auth_token",
              "from_phone_number",
              "to_phone_numbers"
            ],
            "secret_fields": [
              "auth_token"
            ],
            "title": "TwilioSMS",
            "type": "object"
          },
          "capabilities": [
            "notify"
          ],
          "version": "3.2.13"
        }
      },
      "webhook": {
        "name": "Webhook",
        "slug": "webhook",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/c7247cb359eb6cf276734d4b1fbf00fb8930e89e-250x250.png",
        "documentation_url": "https://docs.prefect.io/latest/automate/events/webhook-triggers",
        "description": "Block that enables calling webhooks.",
        "code_example": "```python\nfrom prefect.blocks.webhook import Webhook\n\nwebhook_block = Webhook.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:61e9dbea14935ccb2cfac7eb38f01c4e878a81073806f2aec993820fa0d91eb3",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "webhook",
            "description": "Block that enables calling webhooks.",
            "properties": {
              "method": {
                "default": "POST",
                "description": "The webhook request method. Defaults to `POST`.",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE"
                ],
                "title": "Method",
                "type": "string"
              },
              "url": {
                "description": "The webhook URL.",
                "examples": [
                  "https://hooks.slack.com/XXX"
                ],
                "format": "password",
                "title": "Webhook URL",
                "type": "string",
                "writeOnly": true
              },
              "headers": {
                "description": "A dictionary of headers to send with the webhook request.",
                "title": "Webhook Headers",
                "type": "object"
              },
              "allow_private_urls": {
                "default": true,
                "description": "Whether to allow notifications to private URLs. Defaults to True.",
                "title": "Allow Private Urls",
                "type": "boolean"
              },
              "verify": {
                "default": true,
                "description": "Whether or not to enforce a secure connection to the webhook.",
                "title": "Verify",
                "type": "boolean"
              }
            },
            "required": [
              "url"
            ],
            "secret_fields": [
              "url",
              "headers.*"
            ],
            "title": "Webhook",
            "type": "object"
          },
          "capabilities": [],
          "version": "3.2.13"
        }
      }
    }
  },
  "prefect-aws": {
    "block_types": {
      "aws-credentials": {
        "name": "AWS Credentials",
        "slug": "aws-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/d74b16fe84ce626345adf235a47008fea2869a60-225x225.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-aws",
        "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "Load stored AWS credentials:\n```python\nfrom prefect_aws import AwsCredentials\n\naws_credentials_block = AwsCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:70ce5b4ca4eb37d31fa6adc810651a0202670af0e0b09ac31741c34f743c5d79",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "aws-credentials",
            "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
            "properties": {
              "aws_access_key_id": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "A specific AWS access key ID.",
                "title": "AWS Access Key ID"
              },
              "aws_secret_access_key": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "A specific AWS secret access key.",
                "title": "AWS Access Key Secret"
              },
              "aws_session_token": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                "title": "AWS Session Token"
              },
              "profile_name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The profile to use when creating your session.",
                "title": "Profile Name"
              },
              "region_name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The AWS Region where you want to create new connections.",
                "title": "Region Name"
              },
              "aws_client_parameters": {
                "$ref": "#/definitions/AwsClientParameters",
                "description": "Extra parameters to initialize the Client.",
                "title": "AWS Client Parameters"
              }
            },
            "secret_fields": [
              "aws_secret_access_key"
            ],
            "title": "AwsCredentials",
            "type": "object",
            "definitions": {
              "AwsClientParameters": {
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "properties": {
                  "api_version": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The API version to use.",
                    "title": "API Version"
                  },
                  "use_ssl": {
                    "default": true,
                    "description": "Whether or not to use SSL.",
                    "title": "Use SSL",
                    "type": "boolean"
                  },
                  "verify": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether or not to verify SSL certificates.",
                    "title": "Verify"
                  },
                  "verify_cert_path": {
                    "anyOf": [
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Path to the CA cert bundle to use.",
                    "title": "Certificate Authority Bundle File Path"
                  },
                  "endpoint_url": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The complete URL to use for the constructed client.",
                    "title": "Endpoint URL"
                  },
                  "config": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Advanced configuration for Botocore clients.",
                    "title": "Botocore Config"
                  }
                },
                "title": "AwsClientParameters",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.5.5"
        }
      },
      "aws-secret": {
        "name": "AWS Secret",
        "slug": "aws-secret",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/d74b16fe84ce626345adf235a47008fea2869a60-225x225.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-aws",
        "description": "Manages a secret in AWS's Secrets Manager. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "```python\nfrom prefect_aws.secrets_manager import AwsSecret\n\naws_secret_block = AwsSecret.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:9bc4fcf0131ca1e933827c346ed2cc6879fc2add3f336c400e14ce2eaa41799a",
          "fields": {
            "block_schema_references": {
              "aws_credentials": {
                "block_schema_checksum": "sha256:70ce5b4ca4eb37d31fa6adc810651a0202670af0e0b09ac31741c34f743c5d79",
                "block_type_slug": "aws-credentials"
              }
            },
            "block_type_slug": "aws-secret",
            "description": "Manages a secret in AWS's Secrets Manager.",
            "properties": {
              "aws_credentials": {
                "$ref": "#/definitions/AwsCredentials"
              },
              "secret_name": {
                "description": "The name of the secret.",
                "title": "Secret Name",
                "type": "string"
              }
            },
            "required": [
              "aws_credentials",
              "secret_name"
            ],
            "secret_fields": [
              "aws_credentials.aws_secret_access_key"
            ],
            "title": "AwsSecret",
            "type": "object",
            "definitions": {
              "AwsClientParameters": {
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "properties": {
                  "api_version": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The API version to use.",
                    "title": "API Version"
                  },
                  "use_ssl": {
                    "default": true,
                    "description": "Whether or not to use SSL.",
                    "title": "Use SSL",
                    "type": "boolean"
                  },
                  "verify": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether or not to verify SSL certificates.",
                    "title": "Verify"
                  },
                  "verify_cert_path": {
                    "anyOf": [
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Path to the CA cert bundle to use.",
                    "title": "Certificate Authority Bundle File Path"
                  },
                  "endpoint_url": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The complete URL to use for the constructed client.",
                    "title": "Endpoint URL"
                  },
                  "config": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Advanced configuration for Botocore clients.",
                    "title": "Botocore Config"
                  }
                },
                "title": "AwsClientParameters",
                "type": "object"
              },
              "AwsCredentials": {
                "block_schema_references": {},
                "block_type_slug": "aws-credentials",
                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                "properties": {
                  "aws_access_key_id": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A specific AWS access key ID.",
                    "title": "AWS Access Key ID"
                  },
                  "aws_secret_access_key": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A specific AWS secret access key.",
                    "title": "AWS Access Key Secret"
                  },
                  "aws_session_token": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                    "title": "AWS Session Token"
                  },
                  "profile_name": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The profile to use when creating your session.",
                    "title": "Profile Name"
                  },
                  "region_name": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The AWS Region where you want to create new connections.",
                    "title": "Region Name"
                  },
                  "aws_client_parameters": {
                    "$ref": "#/definitions/AwsClientParameters",
                    "description": "Extra parameters to initialize the Client.",
                    "title": "AWS Client Parameters"
                  }
                },
                "secret_fields": [
                  "aws_secret_access_key"
                ],
                "title": "AwsCredentials",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.5.5"
        }
      },
      "lambda-function": {
        "name": "Lambda Function",
        "slug": "lambda-function",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/d74b16fe84ce626345adf235a47008fea2869a60-225x225.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-aws",
        "description": "Invoke a Lambda function. This block is part of the prefect-aws\ncollection. Install prefect-aws with `pip install prefect-aws` to use this\nblock. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "```python\nfrom prefect_aws.lambda_function import LambdaFunction\n\nlambda_function_block = LambdaFunction.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:c432d90bd00091f03ce62155584d44c1f37d8ef6cccff10ee2d7c346216a9be1",
          "fields": {
            "block_schema_references": {
              "aws_credentials": {
                "block_schema_checksum": "sha256:70ce5b4ca4eb37d31fa6adc810651a0202670af0e0b09ac31741c34f743c5d79",
                "block_type_slug": "aws-credentials"
              }
            },
            "block_type_slug": "lambda-function",
            "description": "Invoke a Lambda function. This block is part of the prefect-aws\ncollection. Install prefect-aws with `pip install prefect-aws` to use this\nblock.",
            "properties": {
              "function_name": {
                "description": "The name, ARN, or partial ARN of the Lambda function to run. This must be the name of a function that is already deployed to AWS Lambda.",
                "title": "Function Name",
                "type": "string"
              },
              "qualifier": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The version or alias of the Lambda function to use when invoked. If not specified, the latest (unqualified) version of the Lambda function will be used.",
                "title": "Qualifier"
              },
              "aws_credentials": {
                "$ref": "#/definitions/AwsCredentials",
                "description": "The AWS credentials to invoke the Lambda with.",
                "title": "AWS Credentials"
              }
            },
            "required": [
              "function_name"
            ],
            "secret_fields": [
              "aws_credentials.aws_secret_access_key"
            ],
            "title": "LambdaFunction",
            "type": "object",
            "definitions": {
              "AwsClientParameters": {
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "properties": {
                  "api_version": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The API version to use.",
                    "title": "API Version"
                  },
                  "use_ssl": {
                    "default": true,
                    "description": "Whether or not to use SSL.",
                    "title": "Use SSL",
                    "type": "boolean"
                  },
                  "verify": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether or not to verify SSL certificates.",
                    "title": "Verify"
                  },
                  "verify_cert_path": {
                    "anyOf": [
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Path to the CA cert bundle to use.",
                    "title": "Certificate Authority Bundle File Path"
                  },
                  "endpoint_url": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The complete URL to use for the constructed client.",
                    "title": "Endpoint URL"
                  },
                  "config": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Advanced configuration for Botocore clients.",
                    "title": "Botocore Config"
                  }
                },
                "title": "AwsClientParameters",
                "type": "object"
              },
              "AwsCredentials": {
                "block_schema_references": {},
                "block_type_slug": "aws-credentials",
                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                "properties": {
                  "aws_access_key_id": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A specific AWS access key ID.",
                    "title": "AWS Access Key ID"
                  },
                  "aws_secret_access_key": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A specific AWS secret access key.",
                    "title": "AWS Access Key Secret"
                  },
                  "aws_session_token": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                    "title": "AWS Session Token"
                  },
                  "profile_name": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The profile to use when creating your session.",
                    "title": "Profile Name"
                  },
                  "region_name": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The AWS Region where you want to create new connections.",
                    "title": "Region Name"
                  },
                  "aws_client_parameters": {
                    "$ref": "#/definitions/AwsClientParameters",
                    "description": "Extra parameters to initialize the Client.",
                    "title": "AWS Client Parameters"
                  }
                },
                "secret_fields": [
                  "aws_secret_access_key"
                ],
                "title": "AwsCredentials",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.5.5"
        }
      },
      "minio-credentials": {
        "name": "MinIO Credentials",
        "slug": "minio-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/676cb17bcbdff601f97e0a02ff8bcb480e91ff40-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-aws",
        "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "Load stored MinIO credentials:\n```python\nfrom prefect_aws import MinIOCredentials\n\nminio_credentials_block = MinIOCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:183968f2ba33532595e38f6b25abbbb273bd41f720a6831241eddc67a403b80d",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "minio-credentials",
            "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
            "properties": {
              "minio_root_user": {
                "description": "Admin or root user.",
                "title": "Minio Root User",
                "type": "string"
              },
              "minio_root_password": {
                "description": "Admin or root password.",
                "format": "password",
                "title": "Minio Root Password",
                "type": "string",
                "writeOnly": true
              },
              "region_name": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The AWS Region where you want to create new connections.",
                "title": "Region Name"
              },
              "aws_client_parameters": {
                "$ref": "#/definitions/AwsClientParameters",
                "description": "Extra parameters to initialize the Client."
              }
            },
            "required": [
              "minio_root_user",
              "minio_root_password"
            ],
            "secret_fields": [
              "minio_root_password"
            ],
            "title": "MinIOCredentials",
            "type": "object",
            "definitions": {
              "AwsClientParameters": {
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "properties": {
                  "api_version": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The API version to use.",
                    "title": "API Version"
                  },
                  "use_ssl": {
                    "default": true,
                    "description": "Whether or not to use SSL.",
                    "title": "Use SSL",
                    "type": "boolean"
                  },
                  "verify": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether or not to verify SSL certificates.",
                    "title": "Verify"
                  },
                  "verify_cert_path": {
                    "anyOf": [
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Path to the CA cert bundle to use.",
                    "title": "Certificate Authority Bundle File Path"
                  },
                  "endpoint_url": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The complete URL to use for the constructed client.",
                    "title": "Endpoint URL"
                  },
                  "config": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Advanced configuration for Botocore clients.",
                    "title": "Botocore Config"
                  }
                },
                "title": "AwsClientParameters",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.5.5"
        }
      },
      "s3-bucket": {
        "name": "S3 Bucket",
        "slug": "s3-bucket",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/d74b16fe84ce626345adf235a47008fea2869a60-225x225.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-aws",
        "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO. This block is part of the prefect-aws collection. Install prefect-aws with `pip install prefect-aws` to use this block.",
        "code_example": "```python\nfrom prefect_aws.s3 import S3Bucket\n\ns3_bucket_block = S3Bucket.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:75e98917fbe43266197b1fc435fe8c53cfdac9f86be146f2f2862facb0cba89a",
          "fields": {
            "block_schema_references": {
              "credentials": [
                {
                  "block_schema_checksum": "sha256:183968f2ba33532595e38f6b25abbbb273bd41f720a6831241eddc67a403b80d",
                  "block_type_slug": "minio-credentials"
                },
                {
                  "block_schema_checksum": "sha256:70ce5b4ca4eb37d31fa6adc810651a0202670af0e0b09ac31741c34f743c5d79",
                  "block_type_slug": "aws-credentials"
                }
              ]
            },
            "block_type_slug": "s3-bucket",
            "description": "Block used to store data using AWS S3 or S3-compatible object storage like MinIO.",
            "properties": {
              "bucket_name": {
                "description": "Name of your bucket.",
                "title": "Bucket Name",
                "type": "string"
              },
              "credentials": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MinIOCredentials"
                  },
                  {
                    "$ref": "#/definitions/AwsCredentials"
                  }
                ],
                "description": "A block containing your credentials to AWS or MinIO.",
                "title": "Credentials"
              },
              "bucket_folder": {
                "default": "",
                "description": "A default path to a folder within the S3 bucket to use for reading and writing objects.",
                "title": "Bucket Folder",
                "type": "string"
              }
            },
            "required": [
              "bucket_name"
            ],
            "secret_fields": [
              "credentials.minio_root_password",
              "credentials.aws_secret_access_key"
            ],
            "title": "S3Bucket",
            "type": "object",
            "definitions": {
              "AwsClientParameters": {
                "description": "Model used to manage extra parameters that you can pass when you initialize\nthe Client. If you want to find more information, see\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html)\nfor more info about the possible client configurations.\n\nAttributes:\n    api_version: The API version to use. By default, botocore will\n        use the latest API version when creating a client. You only need\n        to specify this parameter if you want to use a previous API version\n        of the client.\n    use_ssl: Whether or not to use SSL. By default, SSL is used.\n        Note that not all services support non-ssl connections.\n    verify: Whether or not to verify SSL certificates. By default\n        SSL certificates are verified. If False, SSL will still be used\n        (unless use_ssl is False), but SSL certificates\n        will not be verified. Passing a file path to this is deprecated.\n    verify_cert_path: A filename of the CA cert bundle to\n        use. You can specify this argument if you want to use a\n        different CA cert bundle than the one used by botocore.\n    endpoint_url: The complete URL to use for the constructed\n        client. Normally, botocore will automatically construct the\n        appropriate URL to use when communicating with a service. You\n        can specify a complete URL (including the \"http/https\" scheme)\n        to override this behavior. If this value is provided,\n        then ``use_ssl`` is ignored.\n    config: Advanced configuration for Botocore clients. See\n        [botocore docs](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html)\n        for more details.",
                "properties": {
                  "api_version": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The API version to use.",
                    "title": "API Version"
                  },
                  "use_ssl": {
                    "default": true,
                    "description": "Whether or not to use SSL.",
                    "title": "Use SSL",
                    "type": "boolean"
                  },
                  "verify": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether or not to verify SSL certificates.",
                    "title": "Verify"
                  },
                  "verify_cert_path": {
                    "anyOf": [
                      {
                        "format": "file-path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Path to the CA cert bundle to use.",
                    "title": "Certificate Authority Bundle File Path"
                  },
                  "endpoint_url": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The complete URL to use for the constructed client.",
                    "title": "Endpoint URL"
                  },
                  "config": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Advanced configuration for Botocore clients.",
                    "title": "Botocore Config"
                  }
                },
                "title": "AwsClientParameters",
                "type": "object"
              },
              "AwsCredentials": {
                "block_schema_references": {},
                "block_type_slug": "aws-credentials",
                "description": "Block used to manage authentication with AWS. AWS authentication is\nhandled via the `boto3` module. Refer to the\n[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html)\nfor more info about the possible credential configurations.",
                "properties": {
                  "aws_access_key_id": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A specific AWS access key ID.",
                    "title": "AWS Access Key ID"
                  },
                  "aws_secret_access_key": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A specific AWS secret access key.",
                    "title": "AWS Access Key Secret"
                  },
                  "aws_session_token": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The session key for your AWS account. This is only needed when you are using temporary credentials.",
                    "title": "AWS Session Token"
                  },
                  "profile_name": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The profile to use when creating your session.",
                    "title": "Profile Name"
                  },
                  "region_name": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The AWS Region where you want to create new connections.",
                    "title": "Region Name"
                  },
                  "aws_client_parameters": {
                    "$ref": "#/definitions/AwsClientParameters",
                    "description": "Extra parameters to initialize the Client.",
                    "title": "AWS Client Parameters"
                  }
                },
                "secret_fields": [
                  "aws_secret_access_key"
                ],
                "title": "AwsCredentials",
                "type": "object"
              },
              "MinIOCredentials": {
                "block_schema_references": {},
                "block_type_slug": "minio-credentials",
                "description": "Block used to manage authentication with MinIO. Refer to the MinIO docs: https://docs.min.io/docs/minio-server-configuration-guide.html for more info about the possible credential configurations.",
                "properties": {
                  "minio_root_user": {
                    "description": "Admin or root user.",
                    "title": "Minio Root User",
                    "type": "string"
                  },
                  "minio_root_password": {
                    "description": "Admin or root password.",
                    "format": "password",
                    "title": "Minio Root Password",
                    "type": "string",
                    "writeOnly": true
                  },
                  "region_name": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The AWS Region where you want to create new connections.",
                    "title": "Region Name"
                  },
                  "aws_client_parameters": {
                    "$ref": "#/definitions/AwsClientParameters",
                    "description": "Extra parameters to initialize the Client."
                  }
                },
                "required": [
                  "minio_root_user",
                  "minio_root_password"
                ],
                "secret_fields": [
                  "minio_root_password"
                ],
                "title": "MinIOCredentials",
                "type": "object"
              }
            }
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "0.5.5"
        }
      }
    }
  },
  "prefect-azure": {
    "block_types": {
      "azure-blob-storage-container": {
        "name": "Azure Blob Storage Container",
        "slug": "azure-blob-storage-container",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/54e3fa7e00197a4fbd1d82ed62494cb58d08c96a-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-azure",
        "description": "Represents a container in Azure Blob Storage.\n\nThis class provides methods for downloading and uploading files and folders\nto and from the Azure Blob Storage container. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "```python\nfrom prefect_azure.blob_storage import AzureBlobStorageContainer\n\nazure_blob_storage_container_block = AzureBlobStorageContainer.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:1a7c5d6026bc6cfa8fe291192d6b1d411f28cedbfa4418d40aa126e7bbd946ec",
          "fields": {
            "block_schema_references": {
              "credentials": {
                "block_schema_checksum": "sha256:aa4724874002a0fc5f2164a41c7aa78bc26fc9e63fa8519ae25cc6b3887334e2",
                "block_type_slug": "azure-blob-storage-credentials"
              }
            },
            "block_type_slug": "azure-blob-storage-container",
            "description": "Represents a container in Azure Blob Storage.\n\nThis class provides methods for downloading and uploading files and folders\nto and from the Azure Blob Storage container.",
            "properties": {
              "container_name": {
                "description": "The name of a Azure Blob Storage container.",
                "title": "Container Name",
                "type": "string"
              },
              "credentials": {
                "$ref": "#/definitions/AzureBlobStorageCredentials",
                "description": "The credentials to use for authentication with Azure."
              },
              "base_folder": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "A base path to a folder within the container to use for reading and writing objects.",
                "title": "Base Folder"
              }
            },
            "required": [
              "container_name"
            ],
            "secret_fields": [
              "credentials.connection_string"
            ],
            "title": "AzureBlobStorageContainer",
            "type": "object",
            "definitions": {
              "AzureBlobStorageCredentials": {
                "block_schema_references": {},
                "block_type_slug": "azure-blob-storage-credentials",
                "description": "Stores credentials for authenticating with Azure Blob Storage.",
                "properties": {
                  "connection_string": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The connection string to your Azure storage account. If provided, the connection string will take precedence over the account URL.",
                    "title": "Connection String"
                  },
                  "account_url": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The URL for your Azure storage account. If provided, the account URL will be used to authenticate with the discovered default Azure credentials.",
                    "title": "Account URL"
                  }
                },
                "secret_fields": [
                  "connection_string"
                ],
                "title": "AzureBlobStorageCredentials",
                "type": "object"
              }
            }
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "0.4.2"
        }
      },
      "azure-blob-storage-credentials": {
        "name": "Azure Blob Storage Credentials",
        "slug": "azure-blob-storage-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/54e3fa7e00197a4fbd1d82ed62494cb58d08c96a-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-azure",
        "description": "Stores credentials for authenticating with Azure Blob Storage. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "Load stored Azure Blob Storage credentials and retrieve a blob service client:\n```python\nfrom prefect_azure import AzureBlobStorageCredentials\n\nazure_credentials_block = AzureBlobStorageCredentials.load(\"BLOCK_NAME\")\n\nblob_service_client = azure_credentials_block.get_blob_client()\n```",
        "block_schema": {
          "checksum": "sha256:aa4724874002a0fc5f2164a41c7aa78bc26fc9e63fa8519ae25cc6b3887334e2",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "azure-blob-storage-credentials",
            "description": "Stores credentials for authenticating with Azure Blob Storage.",
            "properties": {
              "connection_string": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The connection string to your Azure storage account. If provided, the connection string will take precedence over the account URL.",
                "title": "Connection String"
              },
              "account_url": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The URL for your Azure storage account. If provided, the account URL will be used to authenticate with the discovered default Azure credentials.",
                "title": "Account URL"
              }
            },
            "secret_fields": [
              "connection_string"
            ],
            "title": "AzureBlobStorageCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.4.2"
        }
      },
      "azure-container-instance-credentials": {
        "name": "Azure Container Instance Credentials",
        "slug": "azure-container-instance-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/54e3fa7e00197a4fbd1d82ed62494cb58d08c96a-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-azure",
        "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "```python\nfrom prefect_azure.credentials import AzureContainerInstanceCredentials\n\nazure_container_instance_credentials_block = AzureContainerInstanceCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:8eb5694e6a5d049ec70ae109499a66bdcbe36489d9e83d5245baaf61e8da7cb1",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "azure-container-instance-credentials",
            "description": "Block used to manage Azure Container Instances authentication. Stores Azure Service\nPrincipal authentication data.",
            "properties": {
              "client_id": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The service principal client ID. If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                "title": "Client ID"
              },
              "tenant_id": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The service principal tenant ID.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                "title": "Tenant ID"
              },
              "client_secret": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The service principal client secret.If none of client_id, tenant_id, and client_secret are provided, will use DefaultAzureCredential; else will need to provide all three to use ClientSecretCredential.",
                "title": "Client Secret"
              },
              "credential_kwargs": {
                "description": "Additional keyword arguments to pass to `ClientSecretCredential` or `DefaultAzureCredential`.",
                "title": "Additional Credential Keyword Arguments",
                "type": "object"
              }
            },
            "secret_fields": [
              "client_secret"
            ],
            "title": "AzureContainerInstanceCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.4.2"
        }
      },
      "azure-cosmos-db-credentials": {
        "name": "Azure Cosmos DB Credentials",
        "slug": "azure-cosmos-db-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/54e3fa7e00197a4fbd1d82ed62494cb58d08c96a-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-azure",
        "description": "Block used to manage Cosmos DB authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "Load stored Azure Cosmos DB credentials:\n```python\nfrom prefect_azure import AzureCosmosDbCredentials\nazure_credentials_block = AzureCosmosDbCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:2f9f6e6f6c2eb570a05113638e6237fe74f7684993a351018657211d4705a83a",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "azure-cosmos-db-credentials",
            "description": "Block used to manage Cosmos DB authentication with Azure.\nAzure authentication is handled via the `azure` module through\na connection string.",
            "properties": {
              "connection_string": {
                "description": "Includes the authorization information required.",
                "format": "password",
                "title": "Connection String",
                "type": "string",
                "writeOnly": true
              }
            },
            "required": [
              "connection_string"
            ],
            "secret_fields": [
              "connection_string"
            ],
            "title": "AzureCosmosDbCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.4.2"
        }
      },
      "azureml-credentials": {
        "name": "AzureML Credentials",
        "slug": "azureml-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/54e3fa7e00197a4fbd1d82ed62494cb58d08c96a-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-azure",
        "description": "Block used to manage authentication with AzureML. Azure authentication is\nhandled via the `azure` module. This block is part of the prefect-azure collection. Install prefect-azure with `pip install prefect-azure` to use this block.",
        "code_example": "Load stored AzureML credentials:\n```python\nfrom prefect_azure import AzureMlCredentials\nazure_ml_credentials_block = AzureMlCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:11338ccb5cd90992ac378f9b7a73cbf1942fae58343ac2026b3718ed688b52e6",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "azureml-credentials",
            "description": "Block used to manage authentication with AzureML. Azure authentication is\nhandled via the `azure` module.",
            "properties": {
              "tenant_id": {
                "description": "The active directory tenant that the service identity belongs to.",
                "title": "Tenant Id",
                "type": "string"
              },
              "service_principal_id": {
                "description": "The service principal ID.",
                "title": "Service Principal Id",
                "type": "string"
              },
              "service_principal_password": {
                "description": "The service principal password/key.",
                "format": "password",
                "title": "Service Principal Password",
                "type": "string",
                "writeOnly": true
              },
              "subscription_id": {
                "description": "The Azure subscription ID containing the workspace, in format: '00000000-0000-0000-0000-000000000000'.",
                "title": "Subscription Id",
                "type": "string"
              },
              "resource_group": {
                "description": "The resource group containing the workspace.",
                "title": "Resource Group",
                "type": "string"
              },
              "workspace_name": {
                "description": "The existing workspace name.",
                "title": "Workspace Name",
                "type": "string"
              }
            },
            "required": [
              "tenant_id",
              "service_principal_id",
              "service_principal_password",
              "subscription_id",
              "resource_group",
              "workspace_name"
            ],
            "secret_fields": [
              "service_principal_password"
            ],
            "title": "AzureMlCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.4.2"
        }
      }
    }
  },
  "prefect-bitbucket": {
    "block_types": {
      "bitbucket-credentials": {
        "name": "BitBucket Credentials",
        "slug": "bitbucket-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/5d729f7355fb6828c4b605268ded9cfafab3ae4f-250x250.png",
        "documentation_url": null,
        "description": "Store BitBucket credentials to interact with private BitBucket repositories. This block is part of the prefect-bitbucket collection. Install prefect-bitbucket with `pip install prefect-bitbucket` to use this block.",
        "code_example": "Load stored BitBucket credentials:\n```python\nfrom prefect_bitbucket import BitBucketCredentials\nbitbucket_credentials_block = BitBucketCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:572e01685325337fd902c9074df750e16e1622fe3ab7a06231243fb6712aa6fc",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "bitbucket-credentials",
            "description": "Store BitBucket credentials to interact with private BitBucket repositories.",
            "properties": {
              "token": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "A BitBucket Personal Access Token - required for private repositories.",
                "examples": [
                  "x-token-auth:my-token"
                ],
                "title": "Personal Access Token"
              },
              "username": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Identification name unique across entire BitBucket site.",
                "title": "Username"
              },
              "password": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The password to authenticate to BitBucket.",
                "title": "Password"
              },
              "url": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The base URL of a BitBucket instance. Leave blank for BitBucket Cloud.",
                "examples": [
                  "https://api.bitbucket.org/"
                ],
                "title": "URL"
              }
            },
            "secret_fields": [
              "token",
              "password"
            ],
            "title": "BitBucketCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "bitbucket-repository": {
        "name": "BitBucket Repository",
        "slug": "bitbucket-repository",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/5d729f7355fb6828c4b605268ded9cfafab3ae4f-250x250.png",
        "documentation_url": null,
        "description": "Interact with files stored in BitBucket repositories. This block is part of the prefect-bitbucket collection. Install prefect-bitbucket with `pip install prefect-bitbucket` to use this block.",
        "code_example": "```python\nfrom prefect_bitbucket.repository import BitBucketRepository\n\nbitbucket_repository_block = BitBucketRepository.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:d05835c8a5f5e35ccd317457c435637a1b50691a1761065c8fa8c856a90f2674",
          "fields": {
            "block_schema_references": {
              "bitbucket_credentials": {
                "block_schema_checksum": "sha256:572e01685325337fd902c9074df750e16e1622fe3ab7a06231243fb6712aa6fc",
                "block_type_slug": "bitbucket-credentials"
              }
            },
            "block_type_slug": "bitbucket-repository",
            "description": "Interact with files stored in BitBucket repositories.",
            "properties": {
              "repository": {
                "description": "The URL of a BitBucket repository to read from in HTTPS format",
                "title": "Repository",
                "type": "string"
              },
              "reference": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "An optional reference to pin to; can be a branch or tag.",
                "title": "Reference"
              },
              "bitbucket_credentials": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/BitBucketCredentials"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "An optional BitBucketCredentials block for authenticating with private BitBucket repos."
              }
            },
            "required": [
              "repository"
            ],
            "secret_fields": [
              "bitbucket_credentials.token",
              "bitbucket_credentials.password"
            ],
            "title": "BitBucketRepository",
            "type": "object",
            "definitions": {
              "BitBucketCredentials": {
                "block_schema_references": {},
                "block_type_slug": "bitbucket-credentials",
                "description": "Store BitBucket credentials to interact with private BitBucket repositories.",
                "properties": {
                  "token": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A BitBucket Personal Access Token - required for private repositories.",
                    "examples": [
                      "x-token-auth:my-token"
                    ],
                    "title": "Personal Access Token"
                  },
                  "username": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Identification name unique across entire BitBucket site.",
                    "title": "Username"
                  },
                  "password": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The password to authenticate to BitBucket.",
                    "title": "Password"
                  },
                  "url": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The base URL of a BitBucket instance. Leave blank for BitBucket Cloud.",
                    "examples": [
                      "https://api.bitbucket.org/"
                    ],
                    "title": "URL"
                  }
                },
                "secret_fields": [
                  "token",
                  "password"
                ],
                "title": "BitBucketCredentials",
                "type": "object"
              }
            }
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "0.3.1"
        }
      }
    }
  },
  "prefect-dask": {
    "block_types": {}
  },
  "prefect-databricks": {
    "block_types": {
      "databricks-credentials": {
        "name": "Databricks Credentials",
        "slug": "databricks-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250",
        "documentation_url": null,
        "description": "Block used to manage Databricks authentication. This block is part of the prefect-databricks collection. Install prefect-databricks with `pip install prefect-databricks` to use this block.",
        "code_example": "Load stored Databricks credentials:\n```python\nfrom prefect_databricks import DatabricksCredentials\ndatabricks_credentials_block = DatabricksCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f06a22931cd9f8eefebc5068e8e3569a3fa3976baf819f84aced181cc46cbac4",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "databricks-credentials",
            "description": "Block used to manage Databricks authentication.",
            "properties": {
              "databricks_instance": {
                "description": "Databricks instance used in formatting the endpoint URL.",
                "title": "Databricks Instance",
                "type": "string"
              },
              "token": {
                "description": "The token to authenticate with Databricks.",
                "format": "password",
                "title": "Token",
                "type": "string",
                "writeOnly": true
              },
              "client_kwargs": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Additional keyword arguments to pass to AsyncClient.",
                "title": "Client Kwargs"
              }
            },
            "required": [
              "databricks_instance",
              "token"
            ],
            "secret_fields": [
              "token"
            ],
            "title": "DatabricksCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.3.2"
        }
      }
    }
  },
  "prefect-dbt": {
    "block_types": {
      "dbt-cli-global-configs": {
        "name": "dbt CLI Global Configs",
        "slug": "dbt-cli-global-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-dbt",
        "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs). This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored GlobalConfigs:\n```python\nfrom prefect_dbt.cli.configs import GlobalConfigs\n\ndbt_cli_global_configs = GlobalConfigs.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:41b950975ec465d2eb985b375710eb6a44378c260fde4bc48d89097b61f8a0fe",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "dbt-cli-global-configs",
            "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
            "properties": {
              "extras": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                "title": "Extras"
              },
              "allow_field_overrides": {
                "default": false,
                "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                "title": "Allow Field Overrides",
                "type": "boolean"
              },
              "send_anonymous_usage_stats": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Whether usage stats are sent to dbt.",
                "title": "Send Anonymous Usage Stats"
              },
              "use_colors": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Colorize the output it prints in your terminal.",
                "title": "Use Colors"
              },
              "partial_parse": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "When partial parsing is enabled, dbt will use an stored internal manifest to determine which files have been changed (if any) since it last parsed the project.",
                "title": "Partial Parse"
              },
              "printer_width": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Length of characters before starting a new line.",
                "title": "Printer Width"
              },
              "write_json": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Determines whether dbt writes JSON artifacts to the target/ directory.",
                "title": "Write Json"
              },
              "warn_error": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Whether to convert dbt warnings into errors.",
                "title": "Warn Error"
              },
              "log_format": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The LOG_FORMAT config specifies how dbt's logs should be formatted. If the value of this config is json, dbt will output fully structured logs in JSON format.",
                "title": "Log Format"
              },
              "debug": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Whether to redirect dbt's debug logs to standard out.",
                "title": "Debug"
              },
              "version_check": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Whether to raise an error if a project's version is used with an incompatible dbt version.",
                "title": "Version Check"
              },
              "fail_fast": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Make dbt exit immediately if a single resource fails to build.",
                "title": "Fail Fast"
              },
              "use_experimental_parser": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Opt into the latest experimental version of the static parser.",
                "title": "Use Experimental Parser"
              },
              "static_parser": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Whether to use the [static parser](https://docs.getdbt.com/reference/parsing#static-parser).",
                "title": "Static Parser"
              }
            },
            "secret_fields": [],
            "title": "GlobalConfigs",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.6.6"
        }
      },
      "dbt-cli-profile": {
        "name": "dbt CLI Profile",
        "slug": "dbt-cli-profile",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-dbt",
        "description": "Profile for use across dbt CLI tasks and flows. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored dbt CLI profile:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\ndbt_cli_profile = DbtCliProfile.load(\"BLOCK_NAME\").get_profile()\n```\n\nGet a dbt Snowflake profile from DbtCliProfile by using SnowflakeTargetConfigs:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\nfrom prefect_snowflake.credentials import SnowflakeCredentials\nfrom prefect_snowflake.database import SnowflakeConnector\n\ncredentials = SnowflakeCredentials(\n    user=\"user\",\n    password=\"password\",\n    account=\"account.region.aws\",\n    role=\"role\",\n)\nconnector = SnowflakeConnector(\n    schema=\"public\",\n    database=\"database\",\n    warehouse=\"warehouse\",\n    credentials=credentials,\n)\ntarget_configs = SnowflakeTargetConfigs(\n    connector=connector\n)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\nprofile = dbt_cli_profile.get_profile()\n```\n\nGet a dbt Redshift profile from DbtCliProfile by using generic TargetConfigs:\n```python\nfrom prefect_dbt.cli import DbtCliProfile\nfrom prefect_dbt.cli.configs import GlobalConfigs, TargetConfigs\n\ntarget_configs_extras = dict(\n    host=\"hostname.region.redshift.amazonaws.com\",\n    user=\"username\",\n    password=\"password1\",\n    port=5439,\n    dbname=\"analytics\",\n)\ntarget_configs = TargetConfigs(\n    type=\"redshift\",\n    schema=\"schema\",\n    threads=4,\n    extras=target_configs_extras\n)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\nprofile = dbt_cli_profile.get_profile()\n```",
        "block_schema": {
          "checksum": "sha256:9da2327a7bac95eed18ee66db0735b86ef2f8dd3c876bab7ca0f954139906b37",
          "fields": {
            "block_schema_references": {
              "global_configs": {
                "block_schema_checksum": "sha256:41b950975ec465d2eb985b375710eb6a44378c260fde4bc48d89097b61f8a0fe",
                "block_type_slug": "dbt-cli-global-configs"
              }
            },
            "block_type_slug": "dbt-cli-profile",
            "description": "Profile for use across dbt CLI tasks and flows.",
            "properties": {
              "name": {
                "description": "Profile name used for populating profiles.yml.",
                "title": "Name",
                "type": "string"
              },
              "target": {
                "description": "The default target your dbt project will use.",
                "title": "Target",
                "type": "string"
              },
              "target_configs": {
                "description": "Target configs contain credentials and settings, specific to the warehouse you're connecting to.",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/definitions/TargetConfigs"
                  }
                ],
                "title": "Target Configs"
              },
              "global_configs": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GlobalConfigs"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Global configs control things like the visual output of logs, the manner in which dbt parses your project, and what to do when dbt finds a version mismatch or a failing model."
              }
            },
            "required": [
              "name",
              "target",
              "target_configs"
            ],
            "secret_fields": [],
            "title": "DbtCliProfile",
            "type": "object",
            "definitions": {
              "GlobalConfigs": {
                "block_schema_references": {},
                "block_type_slug": "dbt-cli-global-configs",
                "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
                "properties": {
                  "extras": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "title": "Extras"
                  },
                  "allow_field_overrides": {
                    "default": false,
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "title": "Allow Field Overrides",
                    "type": "boolean"
                  },
                  "send_anonymous_usage_stats": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether usage stats are sent to dbt.",
                    "title": "Send Anonymous Usage Stats"
                  },
                  "use_colors": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Colorize the output it prints in your terminal.",
                    "title": "Use Colors"
                  },
                  "partial_parse": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "When partial parsing is enabled, dbt will use an stored internal manifest to determine which files have been changed (if any) since it last parsed the project.",
                    "title": "Partial Parse"
                  },
                  "printer_width": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Length of characters before starting a new line.",
                    "title": "Printer Width"
                  },
                  "write_json": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Determines whether dbt writes JSON artifacts to the target/ directory.",
                    "title": "Write Json"
                  },
                  "warn_error": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to convert dbt warnings into errors.",
                    "title": "Warn Error"
                  },
                  "log_format": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The LOG_FORMAT config specifies how dbt's logs should be formatted. If the value of this config is json, dbt will output fully structured logs in JSON format.",
                    "title": "Log Format"
                  },
                  "debug": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to redirect dbt's debug logs to standard out.",
                    "title": "Debug"
                  },
                  "version_check": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to raise an error if a project's version is used with an incompatible dbt version.",
                    "title": "Version Check"
                  },
                  "fail_fast": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Make dbt exit immediately if a single resource fails to build.",
                    "title": "Fail Fast"
                  },
                  "use_experimental_parser": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Opt into the latest experimental version of the static parser.",
                    "title": "Use Experimental Parser"
                  },
                  "static_parser": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to use the [static parser](https://docs.getdbt.com/reference/parsing#static-parser).",
                    "title": "Static Parser"
                  }
                },
                "secret_fields": [],
                "title": "GlobalConfigs",
                "type": "object"
              },
              "TargetConfigs": {
                "block_schema_references": {},
                "block_type_slug": "dbt-cli-target-configs",
                "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
                "properties": {
                  "extras": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "title": "Extras"
                  },
                  "allow_field_overrides": {
                    "default": false,
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "title": "Allow Field Overrides",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "The name of the database warehouse.",
                    "title": "Type",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "title": "Schema",
                    "type": "string"
                  },
                  "threads": {
                    "default": 4,
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "title": "Threads",
                    "type": "integer"
                  }
                },
                "required": [
                  "type",
                  "schema"
                ],
                "secret_fields": [],
                "title": "TargetConfigs",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.6.6"
        }
      },
      "dbt-cli-target-configs": {
        "name": "dbt CLI Target Configs",
        "slug": "dbt-cli-target-configs",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-dbt",
        "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored TargetConfigs:\n```python\nfrom prefect_dbt.cli.configs import TargetConfigs\n\ndbt_cli_target_configs = TargetConfigs.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:03132eeb1e7450554ae8511c94adc9d4a3446693269a0f830e3fd1bc94a77e1b",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "dbt-cli-target-configs",
            "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
            "properties": {
              "extras": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                "title": "Extras"
              },
              "allow_field_overrides": {
                "default": false,
                "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                "title": "Allow Field Overrides",
                "type": "boolean"
              },
              "type": {
                "description": "The name of the database warehouse.",
                "title": "Type",
                "type": "string"
              },
              "schema": {
                "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                "title": "Schema",
                "type": "string"
              },
              "threads": {
                "default": 4,
                "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                "title": "Threads",
                "type": "integer"
              }
            },
            "required": [
              "type",
              "schema"
            ],
            "secret_fields": [],
            "title": "TargetConfigs",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.6.6"
        }
      },
      "dbt-cloud-credentials": {
        "name": "dbt Cloud Credentials",
        "slug": "dbt-cloud-credentials",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-dbt",
        "description": "Credentials block for credential use across dbt Cloud tasks and flows. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load stored dbt Cloud credentials:\n```python\nfrom prefect_dbt.cloud import DbtCloudCredentials\n\ndbt_cloud_credentials = DbtCloudCredentials.load(\"BLOCK_NAME\")\n```\n\nUse DbtCloudCredentials instance to trigger a job run:\n```python\nfrom prefect_dbt.cloud import DbtCloudCredentials\n\ncredentials = DbtCloudCredentials(api_key=\"my_api_key\", account_id=123456789)\n\nasync with dbt_cloud_credentials.get_administrative_client() as client:\n    client.trigger_job_run(job_id=1)\n```\n\nLoad saved dbt Cloud credentials within a flow:\n```python\nfrom prefect import flow\n\nfrom prefect_dbt.cloud import DbtCloudCredentials\nfrom prefect_dbt.cloud.jobs import trigger_dbt_cloud_job_run\n\n\n@flow\ndef trigger_dbt_cloud_job_run_flow():\n    credentials = DbtCloudCredentials.load(\"my-dbt-credentials\")\n    trigger_dbt_cloud_job_run(dbt_cloud_credentials=credentials, job_id=1)\n\ntrigger_dbt_cloud_job_run_flow()\n```",
        "block_schema": {
          "checksum": "sha256:0e1b2e94e09041e7d732822354503e87b99ddb31422d9d2c83c671be249aa231",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "dbt-cloud-credentials",
            "description": "Credentials block for credential use across dbt Cloud tasks and flows.",
            "properties": {
              "api_key": {
                "description": "A dbt Cloud API key to use for authentication.",
                "format": "password",
                "title": "API Key",
                "type": "string",
                "writeOnly": true
              },
              "account_id": {
                "description": "The ID of your dbt Cloud account.",
                "title": "Account ID",
                "type": "integer"
              },
              "domain": {
                "default": "cloud.getdbt.com",
                "description": "The base domain of your dbt Cloud instance.",
                "title": "Domain",
                "type": "string"
              }
            },
            "required": [
              "api_key",
              "account_id"
            ],
            "secret_fields": [
              "api_key"
            ],
            "title": "DbtCloudCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.6.6"
        }
      },
      "dbt-cloud-job": {
        "name": "dbt Cloud Job",
        "slug": "dbt-cloud-job",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-dbt",
        "description": "Block that holds the information and methods to interact with a dbt Cloud job. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load a configured dbt Cloud job block.\n```python\nfrom prefect_dbt.cloud import DbtCloudJob\n\ndbt_cloud_job = DbtCloudJob.load(\"BLOCK_NAME\")\n```\n\nTriggers a dbt Cloud job, waits for completion, and fetches the results.\n```python\nfrom prefect import flow\nfrom prefect_dbt.cloud import DbtCloudCredentials, DbtCloudJob\n\n@flow\ndef dbt_cloud_job_flow():\n    dbt_cloud_credentials = DbtCloudCredentials.load(\"dbt-token\")\n    dbt_cloud_job = DbtCloudJob.load(\n        dbt_cloud_credentials=dbt_cloud_credentials,\n        job_id=154217\n    )\n    dbt_cloud_job_run = dbt_cloud_job.trigger()\n    dbt_cloud_job_run.wait_for_completion()\n    dbt_cloud_job_run.fetch_result()\n    return dbt_cloud_job_run\n\ndbt_cloud_job_flow()\n```",
        "block_schema": {
          "checksum": "sha256:3aac5884b6efe2d85628c67c47518a329bdd1e4b3b84ca95fd7ee93a326a11d2",
          "fields": {
            "block_schema_references": {
              "dbt_cloud_credentials": {
                "block_schema_checksum": "sha256:0e1b2e94e09041e7d732822354503e87b99ddb31422d9d2c83c671be249aa231",
                "block_type_slug": "dbt-cloud-credentials"
              }
            },
            "block_type_slug": "dbt-cloud-job",
            "description": "Block that holds the information and methods to interact with a dbt Cloud job.",
            "properties": {
              "dbt_cloud_credentials": {
                "$ref": "#/definitions/DbtCloudCredentials",
                "description": "The dbt Cloud credentials to use to authenticate with dbt Cloud."
              },
              "job_id": {
                "description": "The id of the dbt Cloud job.",
                "title": "Job ID",
                "type": "integer"
              },
              "timeout_seconds": {
                "default": 900,
                "description": "The number of seconds to wait for the job to complete.",
                "title": "Timeout Seconds",
                "type": "integer"
              },
              "interval_seconds": {
                "default": 10,
                "description": "The number of seconds to wait between polling for job completion.",
                "title": "Interval Seconds",
                "type": "integer"
              },
              "trigger_job_run_options": {
                "$ref": "#/definitions/TriggerJobRunOptions",
                "description": "The options to use when triggering a job run."
              }
            },
            "required": [
              "dbt_cloud_credentials",
              "job_id"
            ],
            "secret_fields": [
              "dbt_cloud_credentials.api_key"
            ],
            "title": "DbtCloudJob",
            "type": "object",
            "definitions": {
              "DbtCloudCredentials": {
                "block_schema_references": {},
                "block_type_slug": "dbt-cloud-credentials",
                "description": "Credentials block for credential use across dbt Cloud tasks and flows.",
                "properties": {
                  "api_key": {
                    "description": "A dbt Cloud API key to use for authentication.",
                    "format": "password",
                    "title": "API Key",
                    "type": "string",
                    "writeOnly": true
                  },
                  "account_id": {
                    "description": "The ID of your dbt Cloud account.",
                    "title": "Account ID",
                    "type": "integer"
                  },
                  "domain": {
                    "default": "cloud.getdbt.com",
                    "description": "The base domain of your dbt Cloud instance.",
                    "title": "Domain",
                    "type": "string"
                  }
                },
                "required": [
                  "api_key",
                  "account_id"
                ],
                "secret_fields": [
                  "api_key"
                ],
                "title": "DbtCloudCredentials",
                "type": "object"
              },
              "TriggerJobRunOptions": {
                "description": "Defines options that can be defined when triggering a dbt Cloud job run.",
                "properties": {
                  "cause": {
                    "description": "A text description of the reason for running this job.",
                    "title": "Cause",
                    "type": "string"
                  },
                  "git_sha": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The git sha to check out before running this job.",
                    "title": "Git Sha"
                  },
                  "git_branch": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The git branch to check out before running this job.",
                    "title": "Git Branch"
                  },
                  "schema_override": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Override the destination schema in the configured target for this job.",
                    "title": "Schema Override"
                  },
                  "dbt_version_override": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Override the version of dbt used to run this job.",
                    "title": "Dbt Version Override"
                  },
                  "threads_override": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Override the number of threads used to run this job.",
                    "title": "Threads Override"
                  },
                  "target_name_override": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Override the target.name context variable used when running this job",
                    "title": "Target Name Override"
                  },
                  "generate_docs_override": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Override whether or not this job generates docs (true=yes, false=no).",
                    "title": "Generate Docs Override"
                  },
                  "timeout_seconds_override": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Override the timeout in seconds for this job.",
                    "title": "Timeout Seconds Override"
                  },
                  "steps_override": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Override the list of steps for this job.",
                    "title": "Steps Override"
                  }
                },
                "title": "TriggerJobRunOptions",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.6.6"
        }
      },
      "dbt-core-operation": {
        "name": "dbt Core Operation",
        "slug": "dbt-core-operation",
        "logo_url": "https://images.ctfassets.net/gm98wzqotmnx/5zE9lxfzBHjw3tnEup4wWL/9a001902ed43a84c6c96d23b24622e19/dbt-bit_tm.png?h=250",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-dbt",
        "description": "A block representing a dbt operation, containing multiple dbt and shell commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method. This block is part of the prefect-dbt collection. Install prefect-dbt with `pip install prefect-dbt` to use this block.",
        "code_example": "Load a configured block.\n```python\nfrom prefect_dbt import DbtCoreOperation\n\ndbt_op = DbtCoreOperation.load(\"BLOCK_NAME\")\n```\n\nExecute short-lasting dbt debug and list with a custom DbtCliProfile.\n```python\nfrom prefect_dbt import DbtCoreOperation, DbtCliProfile\nfrom prefect_dbt.cli.configs import SnowflakeTargetConfigs\nfrom prefect_snowflake import SnowflakeConnector\n\nsnowflake_connector = await SnowflakeConnector.load(\"snowflake-connector\")\ntarget_configs = SnowflakeTargetConfigs(connector=snowflake_connector)\ndbt_cli_profile = DbtCliProfile(\n    name=\"jaffle_shop\",\n    target=\"dev\",\n    target_configs=target_configs,\n)\ndbt_init = DbtCoreOperation(\n    commands=[\"dbt debug\", \"dbt list\"],\n    dbt_cli_profile=dbt_cli_profile,\n    overwrite_profiles=True\n)\ndbt_init.run()\n```\n\nExecute a longer-lasting dbt run as a context manager.\n```python\nwith DbtCoreOperation(commands=[\"dbt run\"]) as dbt_run:\n    dbt_process = dbt_run.trigger()\n    # do other things\n    dbt_process.wait_for_completion()\n    dbt_output = dbt_process.fetch_result()\n```",
        "block_schema": {
          "checksum": "sha256:730d35144f5402be8d1499daec76a1b97e2b02c12f47e151ebdeb432b4750c8f",
          "fields": {
            "block_schema_references": {
              "dbt_cli_profile": {
                "block_schema_checksum": "sha256:9da2327a7bac95eed18ee66db0735b86ef2f8dd3c876bab7ca0f954139906b37",
                "block_type_slug": "dbt-cli-profile"
              }
            },
            "block_type_slug": "dbt-core-operation",
            "description": "A block representing a dbt operation, containing multiple dbt and shell commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method.",
            "properties": {
              "commands": {
                "description": "A list of commands to execute sequentially.",
                "items": {
                  "type": "string"
                },
                "title": "Commands",
                "type": "array"
              },
              "stream_output": {
                "default": true,
                "description": "Whether to stream output.",
                "title": "Stream Output",
                "type": "boolean"
              },
              "env": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Environment variables to use for the subprocess.",
                "title": "Environment Variables",
                "type": "object"
              },
              "working_dir": {
                "anyOf": [
                  {
                    "format": "directory-path",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The absolute path to the working directory the command will be executed within.",
                "title": "Working Directory"
              },
              "shell": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The shell to run the command with; if unset, defaults to `powershell` on Windows and `bash` on other platforms.",
                "title": "Shell"
              },
              "extension": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The extension to use for the temporary file; if unset, defaults to `.ps1` on Windows and `.sh` on other platforms.",
                "title": "Extension"
              },
              "profiles_dir": {
                "anyOf": [
                  {
                    "format": "path",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The directory to search for the profiles.yml file. Setting this appends the `--profiles-dir` option to the dbt commands provided. If this is not set, will try using the DBT_PROFILES_DIR environment variable, but if that's also not set, will use the default directory `$HOME/.dbt/`.",
                "title": "Profiles Dir"
              },
              "project_dir": {
                "anyOf": [
                  {
                    "format": "path",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The directory to search for the dbt_project.yml file. Default is the current working directory and its parents.",
                "title": "Project Dir"
              },
              "overwrite_profiles": {
                "default": false,
                "description": "Whether the existing profiles.yml file under profiles_dir should be overwritten with a new profile.",
                "title": "Overwrite Profiles",
                "type": "boolean"
              },
              "dbt_cli_profile": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/DbtCliProfile"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Profiles class containing the profile written to profiles.yml. Note! This is optional and will raise an error if profiles.yml already exists under profile_dir and overwrite_profiles is set to False."
              }
            },
            "required": [
              "commands"
            ],
            "secret_fields": [],
            "title": "DbtCoreOperation",
            "type": "object",
            "definitions": {
              "DbtCliProfile": {
                "block_schema_references": {
                  "global_configs": {
                    "block_schema_checksum": "sha256:41b950975ec465d2eb985b375710eb6a44378c260fde4bc48d89097b61f8a0fe",
                    "block_type_slug": "dbt-cli-global-configs"
                  }
                },
                "block_type_slug": "dbt-cli-profile",
                "description": "Profile for use across dbt CLI tasks and flows.",
                "properties": {
                  "name": {
                    "description": "Profile name used for populating profiles.yml.",
                    "title": "Name",
                    "type": "string"
                  },
                  "target": {
                    "description": "The default target your dbt project will use.",
                    "title": "Target",
                    "type": "string"
                  },
                  "target_configs": {
                    "description": "Target configs contain credentials and settings, specific to the warehouse you're connecting to.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/definitions/TargetConfigs"
                      }
                    ],
                    "title": "Target Configs"
                  },
                  "global_configs": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/GlobalConfigs"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Global configs control things like the visual output of logs, the manner in which dbt parses your project, and what to do when dbt finds a version mismatch or a failing model."
                  }
                },
                "required": [
                  "name",
                  "target",
                  "target_configs"
                ],
                "secret_fields": [],
                "title": "DbtCliProfile",
                "type": "object"
              },
              "GlobalConfigs": {
                "block_schema_references": {},
                "block_type_slug": "dbt-cli-global-configs",
                "description": "Global configs control things like the visual output\nof logs, the manner in which dbt parses your project,\nand what to do when dbt finds a version mismatch\nor a failing model. Docs can be found [here](\nhttps://docs.getdbt.com/reference/global-configs).",
                "properties": {
                  "extras": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "title": "Extras"
                  },
                  "allow_field_overrides": {
                    "default": false,
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "title": "Allow Field Overrides",
                    "type": "boolean"
                  },
                  "send_anonymous_usage_stats": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether usage stats are sent to dbt.",
                    "title": "Send Anonymous Usage Stats"
                  },
                  "use_colors": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Colorize the output it prints in your terminal.",
                    "title": "Use Colors"
                  },
                  "partial_parse": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "When partial parsing is enabled, dbt will use an stored internal manifest to determine which files have been changed (if any) since it last parsed the project.",
                    "title": "Partial Parse"
                  },
                  "printer_width": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Length of characters before starting a new line.",
                    "title": "Printer Width"
                  },
                  "write_json": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Determines whether dbt writes JSON artifacts to the target/ directory.",
                    "title": "Write Json"
                  },
                  "warn_error": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to convert dbt warnings into errors.",
                    "title": "Warn Error"
                  },
                  "log_format": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The LOG_FORMAT config specifies how dbt's logs should be formatted. If the value of this config is json, dbt will output fully structured logs in JSON format.",
                    "title": "Log Format"
                  },
                  "debug": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to redirect dbt's debug logs to standard out.",
                    "title": "Debug"
                  },
                  "version_check": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to raise an error if a project's version is used with an incompatible dbt version.",
                    "title": "Version Check"
                  },
                  "fail_fast": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Make dbt exit immediately if a single resource fails to build.",
                    "title": "Fail Fast"
                  },
                  "use_experimental_parser": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Opt into the latest experimental version of the static parser.",
                    "title": "Use Experimental Parser"
                  },
                  "static_parser": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to use the [static parser](https://docs.getdbt.com/reference/parsing#static-parser).",
                    "title": "Static Parser"
                  }
                },
                "secret_fields": [],
                "title": "GlobalConfigs",
                "type": "object"
              },
              "TargetConfigs": {
                "block_schema_references": {},
                "block_type_slug": "dbt-cli-target-configs",
                "description": "Target configs contain credentials and\nsettings, specific to the warehouse you're connecting to.\nTo find valid keys, head to the [Available adapters](\nhttps://docs.getdbt.com/docs/available-adapters) page and\nclick the desired adapter's \"Profile Setup\" hyperlink.",
                "properties": {
                  "extras": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Extra target configs' keywords, not yet exposed in prefect-dbt, but available in dbt.",
                    "title": "Extras"
                  },
                  "allow_field_overrides": {
                    "default": false,
                    "description": "If enabled, fields from dbt target configs will override fields provided in extras and credentials.",
                    "title": "Allow Field Overrides",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "The name of the database warehouse.",
                    "title": "Type",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema that dbt will build objects into; in BigQuery, a schema is actually a dataset.",
                    "title": "Schema",
                    "type": "string"
                  },
                  "threads": {
                    "default": 4,
                    "description": "The number of threads representing the max number of paths through the graph dbt may work on at once.",
                    "title": "Threads",
                    "type": "integer"
                  }
                },
                "required": [
                  "type",
                  "schema"
                ],
                "secret_fields": [],
                "title": "TargetConfigs",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.6.6"
        }
      }
    }
  },
  "prefect-docker": {
    "block_types": {
      "docker-host": {
        "name": "Docker Host",
        "slug": "docker-host",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/14a315b79990200db7341e42553e23650b34bb96-250x250.png",
        "documentation_url": null,
        "description": "Store settings for interacting with a Docker host. This block is part of the prefect-docker collection. Install prefect-docker with `pip install prefect-docker` to use this block.",
        "code_example": "Get a Docker Host client.\n```python\nfrom prefect_docker import DockerHost\n\ndocker_host = DockerHost(\nbase_url=\"tcp://127.0.0.1:1234\",\n    max_pool_size=4\n)\nwith docker_host.get_client() as client:\n    ... # Use the client for Docker operations\n```",
        "block_schema": {
          "checksum": "sha256:f0c510448c337e115f0ca70147400f350d959df4ba21edea4caec3d57085175b",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "docker-host",
            "description": "Store settings for interacting with a Docker host.",
            "properties": {
              "base_url": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "URL to the Docker host.",
                "examples": [
                  "unix:///var/run/docker.sock"
                ],
                "title": "Base URL"
              },
              "version": {
                "default": "auto",
                "description": "The version of the API to use",
                "title": "Version",
                "type": "string"
              },
              "timeout": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Default timeout for API calls, in seconds.",
                "title": "Timeout"
              },
              "max_pool_size": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The maximum number of connections to save in the pool.",
                "title": "Max Pool Size"
              },
              "client_kwargs": {
                "description": "Additional keyword arguments to pass to `docker.from_env()` or `DockerClient`.",
                "title": "Additional Configuration",
                "type": "object"
              }
            },
            "secret_fields": [],
            "title": "DockerHost",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.6.2"
        }
      },
      "docker-registry-credentials": {
        "name": "Docker Registry Credentials",
        "slug": "docker-registry-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/14a315b79990200db7341e42553e23650b34bb96-250x250.png",
        "documentation_url": null,
        "description": "Store credentials for interacting with a Docker Registry. This block is part of the prefect-docker collection. Install prefect-docker with `pip install prefect-docker` to use this block.",
        "code_example": "Log into Docker Registry.\n```python\nfrom prefect_docker import DockerHost, DockerRegistryCredentials\n\ndocker_host = DockerHost()\ndocker_registry_credentials = DockerRegistryCredentials(\n    username=\"my_username\",\n    password=\"my_password\",\n    registry_url=\"registry.hub.docker.com\",\n)\nwith docker_host.get_client() as client:\n    docker_registry_credentials.login(client)\n```",
        "block_schema": {
          "checksum": "sha256:e9ccd3b2e2650e710931d41ee8adf81d2028dbf19cbb50f4847e2f18885ecd7a",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "docker-registry-credentials",
            "description": "Store credentials for interacting with a Docker Registry.",
            "properties": {
              "username": {
                "description": "The username to log into the registry with.",
                "title": "Username",
                "type": "string"
              },
              "password": {
                "description": "The password to log into the registry with.",
                "format": "password",
                "title": "Password",
                "type": "string",
                "writeOnly": true
              },
              "registry_url": {
                "description": "The URL to the registry. Generally, \"http\" or \"https\" can be omitted.",
                "examples": [
                  "index.docker.io"
                ],
                "title": "Registry Url",
                "type": "string"
              },
              "reauth": {
                "default": true,
                "description": "Whether or not to reauthenticate on each interaction.",
                "title": "Reauth",
                "type": "boolean"
              }
            },
            "required": [
              "username",
              "password",
              "registry_url"
            ],
            "secret_fields": [
              "password"
            ],
            "title": "DockerRegistryCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.6.2"
        }
      }
    }
  },
  "prefect-email": {
    "block_types": {
      "email-server-credentials": {
        "name": "Email Server Credentials",
        "slug": "email-server-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/82bc6ed16ca42a2252a5512c72233a253b8a58eb-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-email/credentials/#prefect_email.credentials.EmailServerCredentials",
        "description": "Block used to manage generic email server authentication.\nIt is recommended you use a\n[Google App Password](https://support.google.com/accounts/answer/185833)\nif you use Gmail. This block is part of the prefect-email collection. Install prefect-email with `pip install prefect-email` to use this block.",
        "code_example": "Load stored email server credentials:\n```python\nfrom prefect_email import EmailServerCredentials\nemail_credentials_block = EmailServerCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:d1c42d3fe8f599348bc0e46078ebebc13777a245256449db0cb8fec571210563",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "email-server-credentials",
            "description": "Block used to manage generic email server authentication.\nIt is recommended you use a\n[Google App Password](https://support.google.com/accounts/answer/185833)\nif you use Gmail.",
            "properties": {
              "username": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The username to use for authentication to the server. Unnecessary if SMTP login is not required.",
                "title": "Username"
              },
              "password": {
                "description": "The password to use for authentication to the server. Unnecessary if SMTP login is not required.",
                "format": "password",
                "title": "Password",
                "type": "string",
                "writeOnly": true
              },
              "smtp_server": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SMTPServer"
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": "smtp.gmail.com",
                "description": "Either the hostname of the SMTP server, or one of the keys from the built-in SMTPServer Enum members, like 'gmail'.",
                "title": "SMTP Server"
              },
              "smtp_type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SMTPType"
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": 465,
                "description": "Either 'SSL', 'STARTTLS', or 'INSECURE'.",
                "title": "SMTP Type"
              },
              "smtp_port": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "If provided, overrides the smtp_type's default port number.",
                "title": "SMTP Port"
              },
              "verify": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": true,
                "description": "If `False`, SSL certificates will not be verified. Default to `True`.",
                "title": "Verify"
              }
            },
            "secret_fields": [
              "password"
            ],
            "title": "EmailServerCredentials",
            "type": "object",
            "definitions": {
              "SMTPServer": {
                "description": "Server used to send email.",
                "enum": [
                  "smtp.aol.com",
                  "smtp.mail.att.net",
                  "smtp.comcast.net",
                  "smtp.mail.me.com",
                  "smtp.gmail.com",
                  "smtp-mail.outlook.com",
                  "smtp.mail.yahoo.com"
                ],
                "title": "SMTPServer",
                "type": "string"
              },
              "SMTPType": {
                "description": "Protocols used to secure email transmissions.",
                "enum": [
                  465,
                  587,
                  25
                ],
                "title": "SMTPType",
                "type": "integer"
              }
            }
          },
          "capabilities": [],
          "version": "0.4.1"
        }
      }
    }
  },
  "prefect-gcp": {
    "block_types": {
      "bigquery-warehouse": {
        "name": "BigQuery Warehouse",
        "slug": "bigquery-warehouse",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/10424e311932e31c477ac2b9ef3d53cefbaad708-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/bigquery/#prefect_gcp.bigquery.BigQueryWarehouse",
        "description": "A block for querying a database with BigQuery.\n\nUpon instantiating, a connection to BigQuery is established\nand maintained for the life of the object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the connection and its cursors when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.bigquery import BigQueryWarehouse\n\nbigquery_warehouse_block = BigQueryWarehouse.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:e8495199f3b490e3b15ba1bc67a97cf04b23aa8a7cba67161291d7cbc882d025",
          "fields": {
            "title": "BigQueryWarehouse",
            "description": "A block for querying a database with BigQuery.\n\nUpon instantiating, a connection to BigQuery is established\nand maintained for the life of the object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the connection and its cursors when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
            "type": "object",
            "properties": {
              "gcp_credentials": {
                "$ref": "#/definitions/GcpCredentials"
              },
              "fetch_size": {
                "title": "Fetch Size",
                "description": "The number of rows to fetch at a time.",
                "default": 1,
                "type": "integer"
              }
            },
            "required": [
              "gcp_credentials"
            ],
            "block_type_slug": "bigquery-warehouse",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.5.8"
        }
      },
      "cloud-run-job": {
        "name": "GCP Cloud Run Job",
        "slug": "cloud-run-job",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/10424e311932e31c477ac2b9ef3d53cefbaad708-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/cloud_run/#prefect_gcp.cloud_run.CloudRunJob",
        "description": "DEPRECATION WARNING: This block is deprecated along with Agents and all other Infrastructure blocks. It will be removed in `prefect>=3.0.0`. Infrastructure block used to run GCP Cloud Run Jobs. Note this block is experimental. The interface may change without notice. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.cloud_run import CloudRunJob\n\ncloud_run_job_block = CloudRunJob.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:acb0001d2257a6f271c4e69e392f94913011d44d12bcd3e89a668dce76eba7ef",
          "fields": {
            "title": "CloudRunJob",
            "description": "Infrastructure block used to run GCP Cloud Run Jobs. Note this block is experimental. The interface may change without notice.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The slug for this task type.",
                "default": "cloud-run-job",
                "enum": [
                  "cloud-run-job"
                ],
                "type": "string"
              },
              "env": {
                "title": "Env",
                "description": "Environment variables to be passed to your Cloud Run Job.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "title": "Image Name",
                "description": "The image to use for a new Cloud Run Job. This value must refer to an image within either Google Container Registry or Google Artifact Registry, like `gcr.io/<project_name>/<repo>/`.",
                "type": "string"
              },
              "region": {
                "title": "Region",
                "description": "The region where the Cloud Run Job resides.",
                "type": "string"
              },
              "credentials": {
                "$ref": "#/definitions/GcpCredentials"
              },
              "cpu": {
                "title": "CPU",
                "description": "The amount of compute allocated to the Cloud Run Job. The int must be valid based on the rules specified at https://cloud.google.com/run/docs/configuring/cpu#setting-jobs .",
                "type": "integer"
              },
              "memory": {
                "title": "Memory",
                "description": "The amount of memory allocated to the Cloud Run Job.",
                "type": "integer"
              },
              "memory_unit": {
                "title": "Memory Units",
                "description": "The unit of memory. See https://cloud.google.com/run/docs/configuring/memory-limits#setting for additional details.",
                "enum": [
                  "G",
                  "Gi",
                  "M",
                  "Mi"
                ],
                "type": "string"
              },
              "vpc_connector_name": {
                "title": "VPC Connector Name",
                "description": "The name of the VPC connector to use for the Cloud Run Job.",
                "type": "string"
              },
              "args": {
                "title": "Args",
                "description": "Arguments to be passed to your Cloud Run Job's entrypoint command.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "keep_job": {
                "title": "Keep Job After Completion",
                "description": "Keep the completed Cloud Run Job on Google Cloud Platform.",
                "default": false,
                "type": "boolean"
              },
              "timeout": {
                "title": "Job Timeout",
                "description": "The length of time that Prefect will wait for a Cloud Run Job to complete before raising an exception.",
                "default": 600,
                "exclusiveMinimum": 0,
                "maximum": 3600,
                "type": "integer"
              },
              "max_retries": {
                "title": "Max Retries",
                "description": "The maximum retries setting specifies the number of times a task is allowed to restart in case of failure before being failed permanently.",
                "default": 3,
                "minimum": 0,
                "maximum": 10,
                "type": "integer"
              }
            },
            "required": [
              "image",
              "region",
              "credentials"
            ],
            "block_type_slug": "cloud-run-job",
            "secret_fields": [
              "credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "0.5.8"
        }
      },
      "gcp-credentials": {
        "name": "GCP Credentials",
        "slug": "gcp-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/10424e311932e31c477ac2b9ef3d53cefbaad708-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/credentials/#prefect_gcp.credentials.GcpCredentials",
        "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "Load GCP credentials stored in a `GCP Credentials` Block:\n```python\nfrom prefect_gcp import GcpCredentials\ngcp_credentials_block = GcpCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624",
          "fields": {
            "title": "GcpCredentials",
            "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
            "type": "object",
            "properties": {
              "service_account_file": {
                "title": "Service Account File",
                "description": "Path to the service account JSON keyfile.",
                "type": "string",
                "format": "path"
              },
              "service_account_info": {
                "title": "Service Account Info",
                "description": "The contents of the keyfile as a dict.",
                "type": "object"
              },
              "project": {
                "title": "Project",
                "description": "The GCP project to use for the client.",
                "type": "string"
              }
            },
            "block_type_slug": "gcp-credentials",
            "secret_fields": [
              "service_account_info.*"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.5.8"
        }
      },
      "gcpsecret": {
        "name": "GcpSecret",
        "slug": "gcpsecret",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/10424e311932e31c477ac2b9ef3d53cefbaad708-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/secret_manager/#prefect_gcp.secret_manager.GcpSecret",
        "description": "Manages a secret in Google Cloud Platform's Secret Manager. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.secret_manager import GcpSecret\n\ngcpsecret_block = GcpSecret.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:0311dc4cd2480a4af70d3b30ecd14d296243e73e7245ba064b753e4c0b25acdf",
          "fields": {
            "title": "GcpSecret",
            "description": "Manages a secret in Google Cloud Platform's Secret Manager.",
            "type": "object",
            "properties": {
              "gcp_credentials": {
                "$ref": "#/definitions/GcpCredentials"
              },
              "secret_name": {
                "title": "Secret Name",
                "description": "Name of the secret to manage.",
                "type": "string"
              },
              "secret_version": {
                "title": "Secret Version",
                "description": "Version number of the secret to use.",
                "default": "latest",
                "type": "string"
              }
            },
            "required": [
              "gcp_credentials",
              "secret_name"
            ],
            "block_type_slug": "gcpsecret",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [],
          "version": "0.5.8"
        }
      },
      "gcs-bucket": {
        "name": "GCS Bucket",
        "slug": "gcs-bucket",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/10424e311932e31c477ac2b9ef3d53cefbaad708-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/cloud_storage/#prefect_gcp.cloud_storage.GcsBucket",
        "description": "Block used to store data using GCP Cloud Storage Buckets.\n\nNote! `GcsBucket` in `prefect-gcp` is a unique block, separate from `GCS`\nin core Prefect. `GcsBucket` does not use `gcsfs` under the hood,\ninstead using the `google-cloud-storage` package, and offers more configuration\nand functionality. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "Load stored GCP Cloud Storage Bucket:\n```python\nfrom prefect_gcp.cloud_storage import GcsBucket\ngcp_cloud_storage_bucket_block = GcsBucket.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:6f44cdbd523fb8d4029fbc504a89095d67d27439aec09d2c1871b03a1f4e14e9",
          "fields": {
            "title": "GcsBucket",
            "description": "Block used to store data using GCP Cloud Storage Buckets.\n\nNote! `GcsBucket` in `prefect-gcp` is a unique block, separate from `GCS`\nin core Prefect. `GcsBucket` does not use `gcsfs` under the hood,\ninstead using the `google-cloud-storage` package, and offers more configuration\nand functionality.",
            "type": "object",
            "properties": {
              "bucket": {
                "title": "Bucket",
                "description": "Name of the bucket.",
                "type": "string"
              },
              "gcp_credentials": {
                "title": "Gcp Credentials",
                "description": "The credentials to authenticate with GCP.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GcpCredentials"
                  }
                ]
              },
              "bucket_folder": {
                "title": "Bucket Folder",
                "description": "A default path to a folder within the GCS bucket to use for reading and writing objects.",
                "default": "",
                "type": "string"
              }
            },
            "required": [
              "bucket"
            ],
            "block_type_slug": "gcs-bucket",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "get-directory",
            "put-directory",
            "read-path",
            "write-path"
          ],
          "version": "0.5.8"
        }
      },
      "vertex-ai-custom-training-job": {
        "name": "Vertex AI Custom Training Job",
        "slug": "vertex-ai-custom-training-job",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/10424e311932e31c477ac2b9ef3d53cefbaad708-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-gcp/aiplatform/#prefect_gcp.aiplatform.VertexAICustomTrainingJob",
        "description": "DEPRECATION WARNING: This block is deprecated along with Agents and all other Infrastructure blocks. It will be removed in `prefect>=3.0.0`. Infrastructure block used to run Vertex AI custom training jobs. This block is part of the prefect-gcp collection. Install prefect-gcp with `pip install prefect-gcp` to use this block.",
        "code_example": "```python\nfrom prefect_gcp.aiplatform import VertexAICustomTrainingJob\n\nvertex_ai_custom_training_job_block = VertexAICustomTrainingJob.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:3cfb58eddef311b9ed90e4c4a35605882c543b1ae51b32d770880ae4dd9af59f",
          "fields": {
            "title": "VertexAICustomTrainingJob",
            "description": "Infrastructure block used to run Vertex AI custom training jobs.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "description": "The slug for this task type.",
                "default": "vertex-ai-custom-training-job",
                "enum": [
                  "vertex-ai-custom-training-job"
                ],
                "type": "string"
              },
              "env": {
                "title": "Environment Variables",
                "description": "Environment variables to be passed to your Cloud Run Job.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "labels": {
                "title": "Labels",
                "description": "Labels applied to the infrastructure for metadata purposes.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name applied to the infrastructure for identification.",
                "type": "string"
              },
              "command": {
                "title": "Command",
                "description": "The command to run in the infrastructure.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "gcp_credentials": {
                "title": "Gcp Credentials",
                "description": "GCP credentials to use when running the configured Vertex AI custom training job. If not provided, credentials will be inferred from the environment. See `GcpCredentials` for details.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GcpCredentials"
                  }
                ]
              },
              "region": {
                "title": "Region",
                "description": "The region where the Vertex AI custom training job resides.",
                "type": "string"
              },
              "image": {
                "title": "Image Name",
                "description": "The image to use for a new Vertex AI custom training job. This value must refer to an image within either Google Container Registry or Google Artifact Registry, like `gcr.io/<project_name>/<repo>/`.",
                "type": "string"
              },
              "machine_type": {
                "title": "Machine Type",
                "description": "The machine type to use for the run, which controls the available CPU and memory.",
                "default": "n1-standard-4",
                "type": "string"
              },
              "accelerator_type": {
                "title": "Accelerator Type",
                "description": "The type of accelerator to attach to the machine.",
                "type": "string"
              },
              "accelerator_count": {
                "title": "Accelerator Count",
                "description": "The number of accelerators to attach to the machine.",
                "type": "integer"
              },
              "boot_disk_type": {
                "title": "Boot Disk Type",
                "description": "The type of boot disk to attach to the machine.",
                "default": "pd-ssd",
                "type": "string"
              },
              "boot_disk_size_gb": {
                "title": "Boot Disk Size",
                "description": "The size of the boot disk to attach to the machine, in gigabytes.",
                "default": 100,
                "type": "integer"
              },
              "maximum_run_time": {
                "title": "Maximum Run Time",
                "description": "The maximum job running time.",
                "default": 604800.0,
                "type": "number",
                "format": "time-delta"
              },
              "network": {
                "title": "Network",
                "description": "The full name of the Compute Engine networkto which the Job should be peered. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.",
                "type": "string"
              },
              "reserved_ip_ranges": {
                "title": "Reserved Ip Ranges",
                "description": "A list of names for the reserved ip ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "service_account": {
                "title": "Service Account",
                "description": "Specifies the service account to use as the run-as account in Vertex AI. The agent submitting jobs must have act-as permission on this run-as account. If unspecified, the AI Platform Custom Code Service Agent for the CustomJob's project is used. Takes precedence over the service account found in gcp_credentials, and required if a service account cannot be detected in gcp_credentials.",
                "type": "string"
              },
              "job_watch_poll_interval": {
                "title": "Job Watch Poll Interval",
                "description": "The amount of time to wait between GCP API calls while monitoring the state of a Vertex AI Job.",
                "default": 5.0,
                "type": "number"
              }
            },
            "required": [
              "region",
              "image"
            ],
            "block_type_slug": "vertex-ai-custom-training-job",
            "secret_fields": [
              "gcp_credentials.service_account_info.*"
            ],
            "block_schema_references": {
              "gcp_credentials": {
                "block_type_slug": "gcp-credentials",
                "block_schema_checksum": "sha256:f764f9c506a2bed9e5ed7cc9083d06d95f13c01c8c9a9e45bae5d9b4dc522624"
              }
            },
            "definitions": {
              "GcpCredentials": {
                "title": "GcpCredentials",
                "description": "Block used to manage authentication with GCP. Google authentication is\nhandled via the `google.oauth2` module or through the CLI.\nSpecify either one of service `account_file` or `service_account_info`; if both\nare not specified, the client will try to detect the credentials following Google's\n[Application Default Credentials](https://cloud.google.com/docs/authentication/application-default-credentials).\nSee Google's [Authentication documentation](https://cloud.google.com/docs/authentication#service-accounts)\nfor details on inference and recommended authentication patterns.",
                "type": "object",
                "properties": {
                  "service_account_file": {
                    "title": "Service Account File",
                    "description": "Path to the service account JSON keyfile.",
                    "type": "string",
                    "format": "path"
                  },
                  "service_account_info": {
                    "title": "Service Account Info",
                    "description": "The contents of the keyfile as a dict.",
                    "type": "object"
                  },
                  "project": {
                    "title": "Project",
                    "description": "The GCP project to use for the client.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gcp-credentials",
                "secret_fields": [
                  "service_account_info.*"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "run-infrastructure"
          ],
          "version": "0.5.8"
        }
      }
    }
  },
  "prefect-github": {
    "block_types": {
      "github-credentials": {
        "name": "GitHub Credentials",
        "slug": "github-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/41971cfecfea5f79ff334164f06ecb34d1038dd4-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-github/credentials/#prefect_github.credentials.GitHubCredentials",
        "description": "Block used to manage GitHub authentication. This block is part of the prefect-github collection. Install prefect-github with `pip install prefect-github` to use this block.",
        "code_example": "Load stored GitHub credentials:\n```python\nfrom prefect_github import GitHubCredentials\ngithub_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:10cc102efa9f3bd4d727d8a9671f85aeec19a65c7c42eb96499c22ae456dfbb4",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "github-credentials",
            "description": "Block used to manage GitHub authentication.",
            "properties": {
              "token": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "A GitHub personal access token (PAT).",
                "title": "Token"
              }
            },
            "secret_fields": [
              "token"
            ],
            "title": "GitHubCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      },
      "github-repository": {
        "name": "GitHub Repository",
        "slug": "github-repository",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/41971cfecfea5f79ff334164f06ecb34d1038dd4-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-github/repository/#prefect_github.repository.GitHubRepository",
        "description": "Interact with files stored on GitHub repositories. This block is part of the prefect-github collection. Install prefect-github with `pip install prefect-github` to use this block.",
        "code_example": "```python\nfrom prefect_github.repository import GitHubRepository\n\ngithub_repository_block = GitHubRepository.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:57ddaeb7b7f23695cd8ae92cb4d7b1afda25bf2699d73f302f4d8adfb88ccd5c",
          "fields": {
            "block_schema_references": {
              "credentials": {
                "block_schema_checksum": "sha256:10cc102efa9f3bd4d727d8a9671f85aeec19a65c7c42eb96499c22ae456dfbb4",
                "block_type_slug": "github-credentials"
              }
            },
            "block_type_slug": "github-repository",
            "description": "Interact with files stored on GitHub repositories.",
            "properties": {
              "repository_url": {
                "description": "The URL of a GitHub repository to read from, in either HTTPS or SSH format. If you are using a private repo, it must be in the HTTPS format.",
                "title": "Repository URL",
                "type": "string"
              },
              "reference": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "An optional reference to pin to; can be a branch name or tag.",
                "title": "Reference"
              },
              "credentials": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GitHubCredentials"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "An optional GitHubCredentials block for using private GitHub repos."
              }
            },
            "required": [
              "repository_url"
            ],
            "secret_fields": [
              "credentials.token"
            ],
            "title": "GitHubRepository",
            "type": "object",
            "definitions": {
              "GitHubCredentials": {
                "block_schema_references": {},
                "block_type_slug": "github-credentials",
                "description": "Block used to manage GitHub authentication.",
                "properties": {
                  "token": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A GitHub personal access token (PAT).",
                    "title": "Token"
                  }
                },
                "secret_fields": [
                  "token"
                ],
                "title": "GitHubCredentials",
                "type": "object"
              }
            }
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "0.3.1"
        }
      }
    }
  },
  "prefect-gitlab": {
    "block_types": {
      "gitlab-credentials": {
        "name": "GitLab Credentials",
        "slug": "gitlab-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/a5db0f07a1bb4390f0e1cda9f7ef9091d89633b9-250x250.png",
        "documentation_url": null,
        "description": "Store a GitLab personal access token to interact with private GitLab\nrepositories. This block is part of the prefect-gitlab collection. Install prefect-gitlab with `pip install prefect-gitlab` to use this block.",
        "code_example": "Load stored GitLab credentials:\n```python\nfrom prefect_gitlab import GitLabCredentials\ngitlab_credentials_block = GitLabCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:7d8d6317127bc66afe9e97ae5658ee8e1decdc598350eb292fb62be379f0246c",
          "fields": {
            "title": "GitLabCredentials",
            "description": "Store a GitLab personal access token to interact with private GitLab\nrepositories.",
            "type": "object",
            "properties": {
              "token": {
                "title": "Token",
                "description": "A GitLab Personal Access Token with read_repository scope.",
                "name": "Personal Access Token",
                "type": "string",
                "writeOnly": true,
                "format": "password"
              },
              "url": {
                "title": "URL",
                "description": "URL to self-hosted GitLab instances.",
                "type": "string"
              }
            },
            "block_type_slug": "gitlab-credentials",
            "secret_fields": [
              "token"
            ],
            "block_schema_references": {}
          },
          "capabilities": [],
          "version": "0.2.2"
        }
      },
      "gitlab-repository": {
        "name": "GitLab Repository",
        "slug": "gitlab-repository",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/a5db0f07a1bb4390f0e1cda9f7ef9091d89633b9-250x250.png",
        "documentation_url": null,
        "description": "Interact with files stored in GitLab repositories. This block is part of the prefect-gitlab collection. Install prefect-gitlab with `pip install prefect-gitlab` to use this block.",
        "code_example": "```python\nfrom prefect_gitlab.repositories import GitLabRepository\n\ngitlab_repository_block = GitLabRepository.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:ac874a97e2ff2403a4b63181b6ae85dd51b4a0df0337d290d922627f5123af44",
          "fields": {
            "title": "GitLabRepository",
            "description": "Interact with files stored in GitLab repositories.",
            "type": "object",
            "properties": {
              "repository": {
                "title": "Repository",
                "description": "The URL of a GitLab repository to read from, in either HTTP/HTTPS or SSH format.",
                "type": "string"
              },
              "reference": {
                "title": "Reference",
                "description": "An optional reference to pin to; can be a branch name or tag.",
                "type": "string"
              },
              "credentials": {
                "title": "Credentials",
                "description": "An optional GitLab Credentials block for authenticating with private GitLab repos.",
                "allOf": [
                  {
                    "$ref": "#/definitions/GitLabCredentials"
                  }
                ]
              }
            },
            "required": [
              "repository"
            ],
            "block_type_slug": "gitlab-repository",
            "secret_fields": [
              "credentials.token"
            ],
            "block_schema_references": {
              "credentials": {
                "block_type_slug": "gitlab-credentials",
                "block_schema_checksum": "sha256:7d8d6317127bc66afe9e97ae5658ee8e1decdc598350eb292fb62be379f0246c"
              }
            },
            "definitions": {
              "GitLabCredentials": {
                "title": "GitLabCredentials",
                "description": "Store a GitLab personal access token to interact with private GitLab\nrepositories.",
                "type": "object",
                "properties": {
                  "token": {
                    "title": "Token",
                    "description": "A GitLab Personal Access Token with read_repository scope.",
                    "name": "Personal Access Token",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                  },
                  "url": {
                    "title": "URL",
                    "description": "URL to self-hosted GitLab instances.",
                    "type": "string"
                  }
                },
                "block_type_slug": "gitlab-credentials",
                "secret_fields": [
                  "token"
                ],
                "block_schema_references": {}
              }
            }
          },
          "capabilities": [
            "get-directory"
          ],
          "version": "0.2.2"
        }
      }
    }
  },
  "prefect-kubernetes": {
    "block_types": {
      "kubernetes-cluster-config": {
        "name": "Kubernetes Cluster Config",
        "slug": "kubernetes-cluster-config",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/2d0b896006ad463b49c28aaac14f31e00e32cfab-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-kubernetes",
        "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation. This block is part of the prefect-kubernetes collection. Install prefect-kubernetes with `pip install prefect-kubernetes` to use this block.",
        "code_example": "Load a saved Kubernetes cluster config:\n```python\nfrom prefect_kubernetes.credentials import import KubernetesClusterConfig\n\ncluster_config_block = KubernetesClusterConfig.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "kubernetes-cluster-config",
            "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
            "properties": {
              "config": {
                "description": "The entire contents of a kubectl config file.",
                "title": "Config",
                "type": "object"
              },
              "context_name": {
                "description": "The name of the kubectl context to use.",
                "title": "Context Name",
                "type": "string"
              }
            },
            "required": [
              "config",
              "context_name"
            ],
            "secret_fields": [],
            "title": "KubernetesClusterConfig",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.5.8"
        }
      },
      "kubernetes-credentials": {
        "name": "Kubernetes Credentials",
        "slug": "kubernetes-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/2d0b896006ad463b49c28aaac14f31e00e32cfab-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-kubernetes",
        "description": "Credentials block for generating configured Kubernetes API clients. This block is part of the prefect-kubernetes collection. Install prefect-kubernetes with `pip install prefect-kubernetes` to use this block.",
        "code_example": "Load stored Kubernetes credentials:\n```python\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\nkubernetes_credentials = KubernetesCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:205323083b1cc3076ead5dc1bf6f6cd5f94d6644e54c05bcd0c9789c20915256",
          "fields": {
            "block_schema_references": {
              "cluster_config": {
                "block_schema_checksum": "sha256:90d421e948bfbe4cdc98b124995f0edd0f84b0837549ad1390423bad8e31cf3b",
                "block_type_slug": "kubernetes-cluster-config"
              }
            },
            "block_type_slug": "kubernetes-credentials",
            "description": "Credentials block for generating configured Kubernetes API clients.",
            "properties": {
              "cluster_config": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/KubernetesClusterConfig"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null
              }
            },
            "secret_fields": [],
            "title": "KubernetesCredentials",
            "type": "object",
            "definitions": {
              "KubernetesClusterConfig": {
                "block_schema_references": {},
                "block_type_slug": "kubernetes-cluster-config",
                "description": "Stores configuration for interaction with Kubernetes clusters.\n\nSee `from_file` for creation.",
                "properties": {
                  "config": {
                    "description": "The entire contents of a kubectl config file.",
                    "title": "Config",
                    "type": "object"
                  },
                  "context_name": {
                    "description": "The name of the kubectl context to use.",
                    "title": "Context Name",
                    "type": "string"
                  }
                },
                "required": [
                  "config",
                  "context_name"
                ],
                "secret_fields": [],
                "title": "KubernetesClusterConfig",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.5.8"
        }
      }
    }
  },
  "prefect-ray": {
    "block_types": {}
  },
  "prefect-shell": {
    "block_types": {
      "shell-operation": {
        "name": "Shell Operation",
        "slug": "shell-operation",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/0b47a017e1b40381de770c17647c49cdf6388d1c-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-shell/commands/#prefect_shell.commands.ShellOperation",
        "description": "A block representing a shell operation, containing multiple commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method. This block is part of the prefect-shell collection. Install prefect-shell with `pip install prefect-shell` to use this block.",
        "code_example": "Load a configured block:\n```python\nfrom prefect_shell import ShellOperation\n\nshell_operation = ShellOperation.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:5bb06b0aa1cbca2d338cbf75cfc881cd7467734a92ad2d220d2cb89685fd0d3b",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "shell-operation",
            "description": "A block representing a shell operation, containing multiple commands.\n\nFor long-lasting operations, use the trigger method and utilize the block as a\ncontext manager for automatic closure of processes when context is exited.\nIf not, manually call the close method to close processes.\n\nFor short-lasting operations, use the run method. Context is automatically managed\nwith this method.",
            "properties": {
              "commands": {
                "description": "A list of commands to execute sequentially.",
                "items": {
                  "type": "string"
                },
                "title": "Commands",
                "type": "array"
              },
              "stream_output": {
                "default": true,
                "description": "Whether to stream output.",
                "title": "Stream Output",
                "type": "boolean"
              },
              "env": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Environment variables to use for the subprocess.",
                "title": "Environment Variables",
                "type": "object"
              },
              "working_dir": {
                "anyOf": [
                  {
                    "format": "directory-path",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The absolute path to the working directory the command will be executed within.",
                "title": "Working Directory"
              },
              "shell": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The shell to run the command with; if unset, defaults to `powershell` on Windows and `bash` on other platforms.",
                "title": "Shell"
              },
              "extension": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The extension to use for the temporary file; if unset, defaults to `.ps1` on Windows and `.sh` on other platforms.",
                "title": "Extension"
              }
            },
            "required": [
              "commands"
            ],
            "secret_fields": [],
            "title": "ShellOperation",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      }
    }
  },
  "prefect-slack": {
    "block_types": {
      "slack-credentials": {
        "name": "Slack Credentials",
        "slug": "slack-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/c1965ecbf8704ee1ea20d77786de9a41ce1087d1-500x500.png",
        "documentation_url": "https://prefecthq.github.io/prefect-slack/credentials/#prefect_slack.credentials.SlackCredentials",
        "description": "Block holding Slack credentials for use in tasks and flows. This block is part of the prefect-slack collection. Install prefect-slack with `pip install prefect-slack` to use this block.",
        "code_example": "Load stored Slack credentials:\n```python\nfrom prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\n```\n\nGet a Slack client:\n```python\nfrom prefect_slack import SlackCredentials\nslack_credentials_block = SlackCredentials.load(\"BLOCK_NAME\")\nclient = slack_credentials_block.get_client()\n```",
        "block_schema": {
          "checksum": "sha256:f79058d8fcf22ed575f824b27daa68a52fedaa0e40f7a8a542d4ac9cf3ee8317",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "slack-credentials",
            "description": "Block holding Slack credentials for use in tasks and flows.",
            "properties": {
              "token": {
                "description": "Bot user OAuth token for the Slack app used to perform actions.",
                "format": "password",
                "title": "Token",
                "type": "string",
                "writeOnly": true
              }
            },
            "required": [
              "token"
            ],
            "secret_fields": [
              "token"
            ],
            "title": "SlackCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.3.1"
        }
      }
    }
  },
  "prefect-snowflake": {
    "block_types": {
      "snowflake-connector": {
        "name": "Snowflake Connector",
        "slug": "snowflake-connector",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/bd359de0b4be76c2254bd329fe3a267a1a3879c2-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-snowflake",
        "description": "Perform data operations against a Snowflake database. This block is part of the prefect-snowflake collection. Install prefect-snowflake with `pip install prefect-snowflake` to use this block.",
        "code_example": "Load stored Snowflake connector as a context manager:\n```python\nfrom prefect_snowflake.database import SnowflakeConnector\n\nsnowflake_connector = SnowflakeConnector.load(\"BLOCK_NAME\")\n```\n\nInsert data into database and fetch results.\n```python\nfrom prefect_snowflake.database import SnowflakeConnector\n\nwith SnowflakeConnector.load(\"BLOCK_NAME\") as conn:\n    conn.execute(\n        \"CREATE TABLE IF NOT EXISTS customers (name varchar, address varchar);\"\n    )\n    conn.execute_many(\n        \"INSERT INTO customers (name, address) VALUES (%(name)s, %(address)s);\",\n        seq_of_parameters=[\n            {\"name\": \"Ford\", \"address\": \"Highway 42\"},\n            {\"name\": \"Unknown\", \"address\": \"Space\"},\n            {\"name\": \"Me\", \"address\": \"Myway 88\"},\n        ],\n    )\n    results = conn.fetch_all(\n        \"SELECT * FROM customers WHERE address = %(address)s\",\n        parameters={\"address\": \"Space\"}\n    )\n    print(results)\n```",
        "block_schema": {
          "checksum": "sha256:aa391bcbe0a19582284aa9b68b25891efe55fedd46290f1d2fc5202463c49a95",
          "fields": {
            "block_schema_references": {
              "credentials": {
                "block_schema_checksum": "sha256:ba8bad16aa7f800565c2adc75866faf8a099521ced297a2354465b543bf9208c",
                "block_type_slug": "snowflake-credentials"
              }
            },
            "block_type_slug": "snowflake-connector",
            "description": "Perform data operations against a Snowflake database.",
            "properties": {
              "credentials": {
                "$ref": "#/definitions/SnowflakeCredentials",
                "description": "The credentials to authenticate with Snowflake."
              },
              "database": {
                "description": "The name of the default database to use.",
                "title": "Database",
                "type": "string"
              },
              "warehouse": {
                "description": "The name of the default warehouse to use.",
                "title": "Warehouse",
                "type": "string"
              },
              "schema": {
                "description": "The name of the default schema to use.",
                "title": "Schema",
                "type": "string"
              },
              "fetch_size": {
                "default": 1,
                "description": "The default number of rows to fetch at a time.",
                "title": "Fetch Size",
                "type": "integer"
              },
              "poll_frequency_s": {
                "default": 1,
                "description": "The number of seconds between checking query status for long running queries.",
                "title": "Poll Frequency [seconds]",
                "type": "integer"
              }
            },
            "required": [
              "credentials",
              "database",
              "warehouse",
              "schema"
            ],
            "secret_fields": [
              "credentials.password",
              "credentials.private_key",
              "credentials.private_key_passphrase",
              "credentials.token"
            ],
            "title": "SnowflakeConnector",
            "type": "object",
            "definitions": {
              "SnowflakeCredentials": {
                "block_schema_references": {},
                "block_type_slug": "snowflake-credentials",
                "description": "Block used to manage authentication with Snowflake.",
                "properties": {
                  "account": {
                    "description": "The snowflake account name.",
                    "examples": [
                      "nh12345.us-east-2.aws"
                    ],
                    "title": "Account",
                    "type": "string"
                  },
                  "user": {
                    "description": "The user name used to authenticate.",
                    "title": "User",
                    "type": "string"
                  },
                  "password": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The password used to authenticate.",
                    "title": "Password"
                  },
                  "private_key": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The PEM used to authenticate.",
                    "title": "Private Key"
                  },
                  "private_key_path": {
                    "anyOf": [
                      {
                        "format": "path",
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The path to the private key.",
                    "title": "Private Key Path"
                  },
                  "private_key_passphrase": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The password to use for the private key.",
                    "title": "Private Key Passphrase"
                  },
                  "authenticator": {
                    "default": "snowflake",
                    "description": "The type of authenticator to use for initializing connection.",
                    "enum": [
                      "snowflake",
                      "snowflake_jwt",
                      "externalbrowser",
                      "okta_endpoint",
                      "oauth",
                      "username_password_mfa"
                    ],
                    "title": "Authenticator",
                    "type": "string"
                  },
                  "token": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                    "title": "Token"
                  },
                  "endpoint": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                    "title": "Endpoint"
                  },
                  "role": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The name of the default role to use.",
                    "title": "Role"
                  },
                  "autocommit": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "Whether to automatically commit.",
                    "title": "Autocommit"
                  }
                },
                "required": [
                  "account",
                  "user"
                ],
                "secret_fields": [
                  "password",
                  "private_key",
                  "private_key_passphrase",
                  "token"
                ],
                "title": "SnowflakeCredentials",
                "type": "object"
              }
            }
          },
          "capabilities": [],
          "version": "0.28.2"
        }
      },
      "snowflake-credentials": {
        "name": "Snowflake Credentials",
        "slug": "snowflake-credentials",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/bd359de0b4be76c2254bd329fe3a267a1a3879c2-250x250.png",
        "documentation_url": "https://docs.prefect.io/integrations/prefect-snowflake",
        "description": "Block used to manage authentication with Snowflake. This block is part of the prefect-snowflake collection. Install prefect-snowflake with `pip install prefect-snowflake` to use this block.",
        "code_example": "Load stored Snowflake credentials:\n```python\nfrom prefect_snowflake import SnowflakeCredentials\n\nsnowflake_credentials_block = SnowflakeCredentials.load(\"BLOCK_NAME\")\n```",
        "block_schema": {
          "checksum": "sha256:ba8bad16aa7f800565c2adc75866faf8a099521ced297a2354465b543bf9208c",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "snowflake-credentials",
            "description": "Block used to manage authentication with Snowflake.",
            "properties": {
              "account": {
                "description": "The snowflake account name.",
                "examples": [
                  "nh12345.us-east-2.aws"
                ],
                "title": "Account",
                "type": "string"
              },
              "user": {
                "description": "The user name used to authenticate.",
                "title": "User",
                "type": "string"
              },
              "password": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The password used to authenticate.",
                "title": "Password"
              },
              "private_key": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The PEM used to authenticate.",
                "title": "Private Key"
              },
              "private_key_path": {
                "anyOf": [
                  {
                    "format": "path",
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The path to the private key.",
                "title": "Private Key Path"
              },
              "private_key_passphrase": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The password to use for the private key.",
                "title": "Private Key Passphrase"
              },
              "authenticator": {
                "default": "snowflake",
                "description": "The type of authenticator to use for initializing connection.",
                "enum": [
                  "snowflake",
                  "snowflake_jwt",
                  "externalbrowser",
                  "okta_endpoint",
                  "oauth",
                  "username_password_mfa"
                ],
                "title": "Authenticator",
                "type": "string"
              },
              "token": {
                "anyOf": [
                  {
                    "format": "password",
                    "type": "string",
                    "writeOnly": true
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The OAuth or JWT Token to provide when authenticator is set to `oauth`.",
                "title": "Token"
              },
              "endpoint": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The Okta endpoint to use when authenticator is set to `okta_endpoint`.",
                "title": "Endpoint"
              },
              "role": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The name of the default role to use.",
                "title": "Role"
              },
              "autocommit": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "Whether to automatically commit.",
                "title": "Autocommit"
              }
            },
            "required": [
              "account",
              "user"
            ],
            "secret_fields": [
              "password",
              "private_key",
              "private_key_passphrase",
              "token"
            ],
            "title": "SnowflakeCredentials",
            "type": "object"
          },
          "capabilities": [],
          "version": "0.28.2"
        }
      }
    }
  },
  "prefect-sqlalchemy": {
    "block_types": {
      "sqlalchemy-connector": {
        "name": "SQLAlchemy Connector",
        "slug": "sqlalchemy-connector",
        "logo_url": "https://cdn.sanity.io/images/3ugk85nk/production/3c7dff04f70aaf4528e184a3b028f9e40b98d68c-250x250.png",
        "documentation_url": "https://prefecthq.github.io/prefect-sqlalchemy/database/#prefect_sqlalchemy.database.SqlAlchemyConnector",
        "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost. This block is part of the prefect-sqlalchemy collection. Install prefect-sqlalchemy with `pip install prefect-sqlalchemy` to use this block.",
        "code_example": "Load stored database credentials and use in context manager:\n```python\nfrom prefect_sqlalchemy import SqlAlchemyConnector\n\ndatabase_block = SqlAlchemyConnector.load(\"BLOCK_NAME\")\nwith database_block:\n    ...\n```\n\nCreate table named customers and insert values; then fetch the first 10 rows.\n```python\nfrom prefect_sqlalchemy import (\n    SqlAlchemyConnector, SyncDriver, ConnectionComponents\n)\n\nwith SqlAlchemyConnector(\n    connection_info=ConnectionComponents(\n        driver=SyncDriver.SQLITE_PYSQLITE,\n        database=\"prefect.db\"\n    )\n) as database:\n    database.execute(\n        \"CREATE TABLE IF NOT EXISTS customers (name varchar, address varchar);\",\n    )\n    for i in range(1, 42):\n        database.execute(\n            \"INSERT INTO customers (name, address) VALUES (:name, :address);\",\n            parameters={\"name\": \"Marvin\", \"address\": f\"Highway {i}\"},\n        )\n    results = database.fetch_many(\n        \"SELECT * FROM customers WHERE name = :name;\",\n        parameters={\"name\": \"Marvin\"},\n        size=10\n    )\nprint(results)\n```",
        "block_schema": {
          "checksum": "sha256:40c0d155d74ef069d622167d2a62f90a1c05efcf1ce7e55ceb4511d25e4e4907",
          "fields": {
            "block_schema_references": {},
            "block_type_slug": "sqlalchemy-connector",
            "description": "Block used to manage authentication with a database.\n\nUpon instantiating, an engine is created and maintained for the life of\nthe object until the close method is called.\n\nIt is recommended to use this block as a context manager, which will automatically\nclose the engine and its connections when the context is exited.\n\nIt is also recommended that this block is loaded and consumed within a single task\nor flow because if the block is passed across separate tasks and flows,\nthe state of the block's connection and cursor could be lost.",
            "properties": {
              "connection_info": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ConnectionComponents"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "SQLAlchemy URL to create the engine; either create from components or create from a string.",
                "title": "Connection Info"
              },
              "connect_args": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The options which will be passed directly to the DBAPI's connect() method as additional keyword arguments.",
                "title": "Additional Connection Arguments"
              },
              "fetch_size": {
                "default": 1,
                "description": "The number of rows to fetch at a time.",
                "title": "Fetch Size",
                "type": "integer"
              }
            },
            "required": [
              "connection_info"
            ],
            "secret_fields": [
              "connection_info.password"
            ],
            "title": "SqlAlchemyConnector",
            "type": "object",
            "definitions": {
              "AsyncDriver": {
                "description": "Known dialects with their corresponding async drivers.\n\nAttributes:\n    POSTGRESQL_ASYNCPG (Enum): [postgresql+asyncpg](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.asyncpg)\n\n    SQLITE_AIOSQLITE (Enum): [sqlite+aiosqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.aiosqlite)\n\n    MYSQL_ASYNCMY (Enum): [mysql+asyncmy](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.asyncmy)\n    MYSQL_AIOMYSQL (Enum): [mysql+aiomysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.aiomysql)\n\n    ORACLE_ORACLEDB_ASYNC (Enum): [oracle+oracledb_async](https://docs.sqlalchemy.org/en/20/dialects/oracle.html#module-sqlalchemy.dialects.oracle.oracledb)",
                "enum": [
                  "postgresql+asyncpg",
                  "sqlite+aiosqlite",
                  "mysql+asyncmy",
                  "mysql+aiomysql",
                  "oracle+oracledb_async"
                ],
                "title": "AsyncDriver",
                "type": "string"
              },
              "ConnectionComponents": {
                "description": "Parameters to use to create a SQLAlchemy engine URL.\n\nAttributes:\n    driver: The driver name to use.\n    database: The name of the database to use.\n    username: The user name used to authenticate.\n    password: The password used to authenticate.\n    host: The host address of the database.\n    port: The port to connect to the database.\n    query: A dictionary of string keys to string values to be passed to the dialect\n        and/or the DBAPI upon connect.",
                "properties": {
                  "driver": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AsyncDriver"
                      },
                      {
                        "$ref": "#/definitions/SyncDriver"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "The driver name to use.",
                    "title": "Driver"
                  },
                  "database": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The name of the database to use.",
                    "title": "Database"
                  },
                  "username": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The user name used to authenticate.",
                    "title": "Username"
                  },
                  "password": {
                    "anyOf": [
                      {
                        "format": "password",
                        "type": "string",
                        "writeOnly": true
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The password used to authenticate.",
                    "title": "Password"
                  },
                  "host": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The host address of the database.",
                    "title": "Host"
                  },
                  "port": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "The port to connect to the database.",
                    "title": "Port"
                  },
                  "query": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null,
                    "description": "A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use connect_args.",
                    "title": "Query"
                  }
                },
                "required": [
                  "driver"
                ],
                "title": "ConnectionComponents",
                "type": "object"
              },
              "SyncDriver": {
                "description": "Known dialects with their corresponding sync drivers.\n\nAttributes:\n    POSTGRESQL_PSYCOPG2 (Enum): [postgresql+psycopg2](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2)\n    POSTGRESQL_PG8000 (Enum): [postgresql+pg8000](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pg8000)\n    POSTGRESQL_PSYCOPG2CFFI (Enum): [postgresql+psycopg2cffi](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.psycopg2cffi)\n    POSTGRESQL_PYPOSTGRESQL (Enum): [postgresql+pypostgresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pypostgresql)\n    POSTGRESQL_PYGRESQL (Enum): [postgresql+pygresql](https://docs.sqlalchemy.org/en/14/dialects/postgresql.html#module-sqlalchemy.dialects.postgresql.pygresql)\n\n    MYSQL_MYSQLDB (Enum): [mysql+mysqldb](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqldb)\n    MYSQL_PYMYSQL (Enum): [mysql+pymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql)\n    MYSQL_MYSQLCONNECTOR (Enum): [mysql+mysqlconnector](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.mysqlconnector)\n    MYSQL_CYMYSQL (Enum): [mysql+cymysql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.cymysql)\n    MYSQL_OURSQL (Enum): [mysql+oursql](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.oursql)\n    MYSQL_PYODBC (Enum): [mysql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pyodbc)\n\n    SQLITE_PYSQLITE (Enum): [sqlite+pysqlite](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlite)\n    SQLITE_PYSQLCIPHER (Enum): [sqlite+pysqlcipher](https://docs.sqlalchemy.org/en/14/dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher)\n\n    ORACLE_CX_ORACLE (Enum): [oracle+cx_oracle](https://docs.sqlalchemy.org/en/14/dialects/oracle.html#module-sqlalchemy.dialects.oracle.cx_oracle)\n    ORACLE_ORACLEDB (Enum): [oracle+oracledb](https://docs.sqlalchemy.org/en/20/dialects/oracle.html#module-sqlalchemy.dialects.oracle.oracledb)\n\n    MSSQL_PYODBC (Enum): [mssql+pyodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n    MSSQL_MXODBC (Enum): [mssql+mxodbc](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.mxodbc)\n    MSSQL_PYMSSQL (Enum): [mssql+pymssql](https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pymssql)",
                "enum": [
                  "postgresql+psycopg2",
                  "postgresql+pg8000",
                  "postgresql+psycopg2cffi",
                  "postgresql+pypostgresql",
                  "postgresql+pygresql",
                  "mysql+mysqldb",
                  "mysql+pymysql",
                  "mysql+mysqlconnector",
                  "mysql+cymysql",
                  "mysql+oursql",
                  "mysql+pyodbc",
                  "sqlite+pysqlite",
                  "sqlite+pysqlcipher",
                  "oracle+cx_oracle",
                  "oracle+oracledb",
                  "mssql+pyodbc",
                  "mssql+mxodbc",
                  "mssql+pymssql"
                ],
                "title": "SyncDriver",
                "type": "string"
              }
            }
          },
          "capabilities": [],
          "version": "0.5.2"
        }
      }
    }
  }
}